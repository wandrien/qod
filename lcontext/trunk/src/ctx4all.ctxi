
include "version.ctxi"

include "include/hosted.ctxi"
include "sys.ctxi"

include "compiler_htl_defines.ctxi"
include "compiler_htl_structs.ctxi"
include "compiler_config.ctxi"
include "compiler_msg.ctxi"
include "compiler_chardata.ctxi"
include "compiler_input.ctxi"
include "compiler_dict.ctxi"

include "frontend_config.ctxi"
include "backend_config.ctxi"

/*****************************************************************************/

/* Вывод отладочных сообщений и сообщений об ошибках. */

void Dbg (char @Msg)
	puts("~r~n");
	puts(@Msg);
	puts("~r~n");
end

/*****************************************************************************/

void PrintVersionAndCopyright()
	puts(@msgPRODUCT);
	puts(" Version ");
	puts(@msgVERSION);
	puts("~r~n");
	puts(@msgCOPYRIGHT);
end

/*****************************************************************************/

void PrintUsage()
	PrintVersionAndCopyright();
	puts(@msgUSAGE);
end

/*****************************************************************************/

include "frontend.ctxi"

/*****************************************************************************/

include "backend.ctxi"

/*****************************************************************************/

char@ InputFile;
char@ OutputFile;
char@ OutputTreeFile;
char@ OutputIncludeListFile;

char@ DefaultTarget;

/*****************************************************************************/

void Translate()
	@_Code = @Code;

	@_NodeMarkUsed = @NodeMarkUsed;

	/* Синтаксический анализ **********************/

	InitFrontEnd();

	OpenInputFile(@InputFile);

	Parse();

	CloseAllFiles();

	/* Промежуточные операции *********************/

	/* Отметка используемых объектов. */
	DictMarkUsed(pFunc);
	select
		case TargetFileFormat = tPE:
			Dict[Find("ExitProcess")].Used = 1;
	end:select

	/* Назначаем метки и смещения. */

	AssignLabels_Struct();
	word D = AssignLabels_Data();

	AssignLabels_Func();
	AssignLabels_FuncExternal();

	AssignStringOffsets();

	/* Вывод информации по анализу кода ***********/

	when WarnUnusedGlobals != 0:
		DoWarnUnusedGlobals();

	word OutputTreeFile_Done = 0;

	if OutputTreeFile_Done = 0
	 & @OutputTreeFile != NULL
	 & strlen(@OutputTreeFile) != 0
	 & strcmp(@OutputFile, @OutputTreeFile) != 0 then
		OutputTreeFile_Done = 1;
		OpenOutput(@OutputTreeFile);
		OutputDictEntries();
		OutputFunctionTrees();
		EmitInternalsInfo();
		CloseOutput();
	end:if

	if @OutputIncludeListFile != NULL & strlen(@OutputIncludeListFile) != 0 then
		OpenOutput(@OutputIncludeListFile);
		OutputIncludeList();
		CloseOutput();
	end:if

	/* Генерация кода *****************************/

	OpenOutput(@OutputFile);

	if OutputTreeFile_Done = 0
	 & @OutputTreeFile != NULL
	 & strlen(@OutputTreeFile) != 0
	 & strcmp(@OutputFile, @OutputTreeFile) = 0 then
		OutputTreeFile_Done = 1;
		OutputDictEntries();
		OutputFunctionTrees();
		EmitInternalsInfo();
	end:if

	/* Заголовок. */

	select
	case TargetFileFormat = tPE & TargetMode = mCON:
		EmitStringNL("format  PE  CONSOLE");
	case TargetFileFormat = tPE & TargetMode = mGUI:
		EmitStringNL("format  PE  GUI");
	case TargetFileFormat = tELF:
		EmitStringNL("format  ELF executable");
	default:
		StopInternal();
	end:select

	word T=0;
	word I=0;

	char Buff[nBUFF];

	word S = EmitSection_Code(@Buff);

	EmitSection_Data(@Buff, D);

	select
	case TargetFileFormat = tPE:
		EmitPEImport(@Buff);
	end:select

	EmitNL();
	Emit(@strcat(@strcpy(@Buff,"entry   @"),@str(S)));

	CloseOutput();

	ShowParseProgress(1);

end

/*****************************************************************************/

char@ GetArg(word I; char@ ErrMsg)

	if I >= Argc then
		if @ErrMsg = NULL then
			StopInternal();
		else
			Stop(@ErrMsg);
		end
	end:if

	return @Argv[I].Arg;
end

/*****************************************************************************/

char@ GetArgNext(word@ I; char@ ErrMsg)
	inc I;
	return @GetArg(I, @ErrMsg);
end

/*****************************************************************************/

void SetupTarget(char@ Target)
	select
	case strcmp(@Target, "--linux"  ) = 0:
		TargetFileFormat = tELF;
		TargetMode = mNONE;
	case strcmp(@Target, "--win32-c") = 0:
		TargetFileFormat = tPE;
		TargetMode = mCON;
	case strcmp(@Target, "--win32-w") = 0:
		TargetFileFormat = tPE;
		TargetMode = mGUI;
	default:
		StopInternal();
	end:select
end

/*****************************************************************************/

void SetupOptimization(char@ Mode)
	select
	case str_eq(@Mode, "size") != 0:
		RODataMergeMode = RODataMergeModeAgressive;
		PHOptimization  = 1;
		CompactFunctionEnterLeave = 1;
	case str_eq(@Mode, "speed") != 0:
		RODataMergeMode = RODataMergeModeNormal;
		PHOptimization  = 1;
		CompactFunctionEnterLeave = 1;
	default:
		RODataMergeMode = RODataMergeModeNone;
		PHOptimization  = 0;
		CompactFunctionEnterLeave = 0;
	end:select
end

/*****************************************************************************/

void __main()

	SetupTarget(@DefaultTarget);
	SetupOptimization("speed");

	word i = 1;
	while i < Argc do
		char@ arg = @GetArg(i, NULL);
		select
		case strcmp(@arg, "--help"   ) = 0:
			PrintUsage();
			return;
		case strcmp(@arg, "--version") = 0:
			PrintVersionAndCopyright();
			return;
		case strcmp(@arg, "--linux"  ) = 0
		   | strcmp(@arg, "--win32-c") = 0
		   | strcmp(@arg, "--win32-w") = 0:
			SetupTarget(@arg);
		case strcmp(@arg, "--output" ) = 0:
			@OutputFile = @GetArgNext(@i, @eFNAMEEXP);
		case strcmp(@arg, "--output-tree" ) = 0:
			@OutputTreeFile = @GetArgNext(@i, @eFNAMEEXP);
		case strcmp(@arg, "--output-include-list" ) = 0:
			@OutputIncludeListFile = @GetArgNext(@i, @eFNAMEEXP);
		case strcmp(@arg, "--file" ) = 0:
			@InputFile = @GetArgNext(@i, @eFNAMEEXP);
		case strcmp(@arg, "--show-parse-progress" ) = 0:
			show_parse_progress = 1;
		case strcmp(@arg, "--optimize" ) = 0:
			SetupOptimization(@GetArgNext(@i, @eCMDLINEPARAM));
		case strcmp(@arg, "--warn-unused-globals" ) = 0:
			WarnUnusedGlobals = 1;
		default:
			@InputFile = @GetArg(i, @eFNAMEEXP);
		end:select
		inc i;
	end:while

	if @InputFile = NULL then
		PrintUsage();
		return;
	end

	char Name[nBUFF];

	if @OutputFile = NULL then
		word l = strlen(@InputFile);
		if l + 4 >= nBUFF then
			Stop(@eLONGFILENAME);
		end:if
		strcat(@strcpy(@Name, @InputFile), ".asm");
		@OutputFile = @Name;
	end:if

	Translate();
end

/*****************************************************************************/

