
namespace Lexer of

/*****************************************************************************/

define nDIGRAPH 12

struct Digraph of
	char Name[3];
end

Digraph Digraphs[nDIGRAPH];
word nDigraph = 0;

bool DigraphPrefix[256];

/*****************************************************************************/

define nCOMMENT 2
define nCOMMENT_AFFIX 4
struct Comment of
	char Prefix[nCOMMENT_AFFIX];
	char Suffix[nCOMMENT_AFFIX];
	word PrefixLen;
	word SuffixLen;
end

Comment Comments[nCOMMENT];
word nComment = 0;

char@ HereCommentPrefix = NULL;
word HereCommentPrefixLen = 0;

/*****************************************************************************/

/*
	Пропуск пробельных символов.
*/
void SkipWhitespaces()
	while iswhitespace(Read()) do
		Next();
	end
end

/*****************************************************************************/

/*
	Чтение одного символа для строковых/символьных литералов с обработкой escape-последовательностей.
*/
char ScanChar()
	char Ch = Read();
	Next();

	if Ch != '~~' then
		return Ch;
	end

	Ch = Read();
	switch Ch of
		case 'n': Ch = '~n';
		case 'r': Ch = '~r';
		case 't': Ch = '~t';
		case '0': Ch = '~0';
	end
	Next();

	return Ch;
end

/*****************************************************************************/

/*
	Чтение строкового литерала с обработкой escape-последовательностей.
*/
void ScanString(word D)

	char Buff[nMAX_STR_LEN];

	word i = 0;
	forever do
		forever do
			char Ch = Read();
			when Ch == '"':
				exit;

			if Ch == '~r' | Ch == '~n' then
				Stop(@L10n.eQUOTEXP);
			end

			if i >= nMAX_STR_LEN then
				StopMemory();
			end

			Buff[i] = ScanChar();
			inc  i;
		end:forever

		Next();
		SkipWhitespaces();

		if Read() != '"' then
			exit;
		end
		Next();
	end:forever

	if i >= nMAX_STR_LEN then
		StopMemory();
	end

	Buff[i] = #0;
	inc  i;

	Dict[D].pType = T_PtrTo(st_char);
	Dict[D].LiteralValue = SaveString(@Buff, i);
	Dict[D].nLiteralSize = i;

end

/*****************************************************************************/

void ScanAlphaNum(char@ Buff; word @Len)
	word P = 0;
	forever do
		char Ch = Read();
		when !isalnum(Ch):
			exit;

		Buff[P] = Ch;
		inc  P;
		if   P >= nBUFF then
			Stop(@L10n.eLONGTERM);
		end

		Next();
	end:forever
	Len = P;
	Buff[P] = #0;
end

/*****************************************************************************/

void Scan1(char @Buff; word @Len)

	SkipWhitespaces();

	ScanAlphaNum(@Buff, @Len);
	if Len != 0 then
		return;
	end

	word P = 0;

	char Ch0 = Read();
	Buff[P] = Ch0;
	inc P;
	Next();

	if DigraphPrefix[byte(Ch0)] then
		char Ch1 = Read();
		word i = 0;
		while i < nDigraph do
			if Ch0 == Digraphs[i].Name[0] & Ch1 == Digraphs[i].Name[1] then
				Next();
				strcpy(@Buff, @Digraphs[i].Name);
				Len = 2;
				return;
			end:if
			inc i;
		end:while
	end:if

	Buff[P] = #0;
	Len = P;
end

/*****************************************************************************/

char@ Scan(char@ Buff)
	forever do
		word LexLen = 0;
		Scan1(@Buff, @LexLen);

		/* Обработка комментариев. */

		char@ Suffix = NULL; /* Признак конца комментария. */
		word SuffixLen;

		if
			(HereCommentPrefixLen != 0) &
			(HereCommentPrefixLen == LexLen) &
			(str_eq(@Buff, @HereCommentPrefix))
		then
			SkipWhitespaces();

			word PrefixLen = 0;
			ScanAlphaNum(@Buff, @PrefixLen);
			if PrefixLen == 0 then
				Stop(@L10n.eEXPECTED);
			end
			@Suffix = @Buff;
			SuffixLen = PrefixLen;
		else
			word i = 0;
			while i < nComment do
				if
					(LexLen == Comments[i].PrefixLen) &
					(str_eq(@Buff, @Comments[i].Prefix))
				then
					@Suffix = @Comments[i].Suffix;
					SuffixLen = Comments[i].SuffixLen;
				end:if
				inc i;
			end:while
		end:if

		if @Suffix == NULL then
			exit;
		end:if

		/* Пропускаем символы, пока не встретится Suffix. */
		word k = 0;
		while k < SuffixLen do
			select
			case Suffix[k] == Read():
				inc k;
			case Suffix[0] == Read():
				k = 1;
			default:
				k = 0;
			end:select
			Next();
		end:while
	end:forever

	return @Buff;
end
/*****************************************************************************/

void RegisterDigraph(char@ Name)
	when nDigraph >= nDIGRAPH:
		StopInternal(__FILE__, __LINE__);

	if strlen(@Name) != 2 then
		StopInternal(__FILE__, __LINE__);
	end

	strcpy(@Digraphs[nDigraph].Name, @Name);

	inc nDigraph;

	DigraphPrefix[byte(Name[0])] = true;
end

/*****************************************************************************/

void RegisterHereCommentPrefix(char@ Prefix) of
	@HereCommentPrefix = @Char[SaveString0(@Prefix)];
	HereCommentPrefixLen = strlen(@Prefix);
end

/*****************************************************************************/

void RegisterComment(char@ Prefix; char@ Suffix)
	if strlen(@Prefix) >= nCOMMENT_AFFIX then
		StopInternal(__FILE__, __LINE__);
	end

	if strlen(@Suffix) >= nCOMMENT_AFFIX then
		StopInternal(__FILE__, __LINE__);
	end

	Comments[nComment].PrefixLen = strlen(@Prefix);
	Comments[nComment].SuffixLen = strlen(@Suffix);

	strcpy(@Comments[nComment].Prefix, @Prefix);
	strcpy(@Comments[nComment].Suffix, @Suffix);

	inc nComment;
end

/*****************************************************************************/

end:Lexer;

alias Scan = Lexer.Scan;
alias ScanString = Lexer.ScanString;
alias ScanChar = Lexer.ScanChar;
alias RegisterDigraph = Lexer.RegisterDigraph;
alias RegisterComment = Lexer.RegisterComment;
alias RegisterHereCommentPrefix = Lexer.RegisterHereCommentPrefix;
