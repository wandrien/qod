

/*****************************************************************************/

NODE     Node [nNODE]; // Массив узлов синтаксического деpева
word    nNode;

/*****************************************************************************/

/* Выделить узел и вернуть его индекс. */

word Peek5(word ID; word pLeft; word pRight; word pType)
	word N  = nNode;
	when N >= nNODE:
		StopMemory();

	NODE @n = @Node[nNode];

	n.Used = 0;
	n.ID     = ID;
	n.pLeft  = pLeft;
	n.pRight = pRight;
	n.pType  = pType;
	n.SourceLocation = CurrentFileInfo;
	inc  nNode;

	return N;
end

word Peek4(word ID; word pLeft; word pRight)
	return Peek5(ID, pLeft, pRight, nDICT);
end

word Peek3(word ID; word pLeft)
	return Peek5(ID, pLeft, nNODE, nDICT);
end

word Peek2(word ID)
	return Peek5(ID, nNODE, nNODE, nDICT);
end

word Peek()
	word N  = nNode;
	when N >= nNODE:
		StopMemory();

	NODE @n = @Node[nNode];

	n.Used = 0;
	n.pLeft  = nNODE;
	n.pRight = nNODE;
	n.pType  = nDICT;
	n.SourceLocation = CurrentFileInfo;
	inc  nNode;

	return N;
end


void NodeFree(word @P)
	/* TODO: Рекурсивное освобождение узлов, когда будет реализовано управление памятью. */
	P = nNODE;
end

/*****************************************************************************/

word NodeGetDict(word P)
	when P >= nNode:
		StopInternal(__FILE__, __LINE__);

	switch Node[P].ID of
	case iFUNC, iCALL, iCALL2, iSTRING, iDATA:
		return Node[P].Value;
	end

	StopInternal(__FILE__, __LINE__);
end

void NodeSetDict(word P; word D)

	when P >= nNode:
		StopInternal(__FILE__, __LINE__);

	switch Node[P].ID of
	case iFUNC, iCALL, iCALL2, iSTRING, iDATA:
		Node[P].Value = D;
	default:
		StopInternal(__FILE__, __LINE__);
	end
end

/*****************************************************************************/

bool NodeHasImmediateValue(word P)

	when P >= nNode:
		StopInternal(__FILE__, __LINE__);

	switch Node[P].ID of
	case iLITERAL:
		return true;
	end

	return false;
end

word NodeGetImmediateValue(word P)
	when NodeHasImmediateValue(P):
		return Node[P].Value;

	StopInternal(__FILE__, __LINE__);
end

void NodeSetImmediateValue(word P; word Value)
	when NodeHasImmediateValue(P):
		Node[P].Value = Value;

	StopInternal(__FILE__, __LINE__);
end

/*****************************************************************************/

bool NodeIsLiteralChar(word P)
	when Node[P].ID == iLITERAL & Node[P].pType == st_char:
		return true;
	return false;
end

bool NodeIsLiteralWord(word P)
	when Node[P].ID == iLITERAL & Node[P].pType == st_word:
		return true;
	return false;
end

bool NodeIsLiteralInt(word P)
	when Node[P].ID == iLITERAL & Node[P].pType == st_int:
		return true;
	return false;
end

bool NodeIsFalse(word P)
	when Node[P].ID == iLITERAL & Node[P].pType == st_bool & Node[P].Value == 0:
		return true;
	return false;
end

bool NodeIsTrue(word P)
	when Node[P].ID == iLITERAL & Node[P].pType == st_bool & Node[P].Value != 0:
		return true;
	return false;
end

bool NodeIsLiteralString(word P)
	when Node[P].ID == iSTRING:
		return true;
	return false;
end

/*****************************************************************************/

void NodeAssignLiteral(word P; word pType; word Value)
	Node[P].ID     = iLITERAL;
	Node[P].pType  = pType;
	Node[P].Value  = Value;
	Node[P].pLeft  = nNODE;
	Node[P].pRight = nNODE;
end

void NodeAssignChar(word P; word Value)
	NodeAssignLiteral(P, st_char, Value);
end

void NodeAssignWord(word P; word Value)
	NodeAssignLiteral(P, st_word, Value);
end

void NodeAssignInt(word P; int Value)
	NodeAssignLiteral(P, st_int, as_unsigned(Value));
end

void NodeAssignBool(word P; bool Value)
	if Value then
		NodeAssignLiteral(P, st_bool, 1);
	else
		NodeAssignLiteral(P, st_bool, 0);
	end
end

char @NodeGetLiteralString(word P)
	when !NodeIsLiteralString(P):
		StopInternal(__FILE__, __LINE__);
	return @Char[Dict[NodeGetDict(P)].LiteralValue];
end

/*****************************************************************************/

bool NodeEqual(word P1; word P2)
	when Node[P1].ID != iLITERAL:
		StopInternal(__FILE__, __LINE__);
	when Node[P2].ID != iLITERAL:
		StopInternal(__FILE__, __LINE__);

	if (Node[P1].Value == Node[P2].Value)
	&  T_Equal(Node[P1].pType, Node[P2].pType) then
		return true;
	else
		return false;
	end
end

/*****************************************************************************/

bool NodeIsLValue(word P)
	when P >= nNode:
		StopInternal(__FILE__, __LINE__);

	switch Node[P].ID of
	case
		iDATA,
		iPARM,
		iLOCAL,
		iINDEX,
		iADDR,
		iFIELD:
		return true;
	end
	return false;
end

/*****************************************************************************/

bool NodeTypeIs(word P; word T)
	when P >= nNode:
		StopInternal(__FILE__, __LINE__);
	when Node[P].pType == T:
		return true;
	return false;
end

/*****************************************************************************/

bool NodeTypeIsPointerTo(word P; word T)
	when P >= nNode:
		StopInternal(__FILE__, __LINE__);
	when Node[P].pType == T_PtrTo(T):
		return true;
	return false;
end

/*****************************************************************************/

void WarnAtNode(word P; char @Msg)
	WarnAt(@Node[P].SourceLocation, @Msg);
end

void ErrorAtNode(word P; char @Msg)
	ErrorAt(@Node[P].SourceLocation, @Msg);
end

void StopAtNode(word P; char @Msg)
	StopAt(@Node[P].SourceLocation, @Msg);
end
