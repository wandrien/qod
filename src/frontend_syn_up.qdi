
namespace TopLevelParser of

/*****************************************************************************/

word FieldNextOffset = 0;
word FieldMaxAlign = 1;

void AssignFieldOffset(word F; word @NextOffset; word @MaxAlign)
	word pType = Dict[F].pType;
	word Align = 1; // FIXME: T_AlignOf(pType);
	when Align > MaxAlign:
		MaxAlign = Align;
	word Offset = NextOffset + (Align - NextOffset % Align - 1);
	Dict[F].Label = Offset;
	NextOffset = Offset + T_SizeOf(pType);
end

/*****************************************************************************/

bool StaticAssert(char@ Buff)
	SOURCELOCATION Location = CurrentFileInfo;
	word pExpr = ExprInParentheses(@Scan(@Buff), "static_assert");
	select
	case NodeIsTrue(pExpr):
		pass;
	case NodeIsFalse(pExpr):
		ErrorAt(@Location, @L10n.eSTATIC_ASSERT_FALSE);
	default:
		bool caught = false;
		word pType = Node[pExpr].pType;
		if !T_IsBool(pType) then
			ErrorAt(@Location, @L10n.eSTATIC_ASSERT_NON_BOOL);
			ErrorWithSubjectAt(@Location, @L10n.eWRONGTYPE_2NDLINE, @T_GetName(pType));
			caught = true;
		end
		if !IsStaticExpr(pExpr) then
			ErrorAt(@Location, @L10n.eSTATIC_ASSERT_NON_CONST);
			caught = true;
		end:if
		when !caught:
			StopInternal(__FILE__, __LINE__);
	end:select

	if str_eq(@Buff,";") then
		Scan(@Buff);
	else
		Error(@L10n.eSEMICOLONEXP);
	end:if
	return false;
end

/*****************************************************************************/

void DeclMainFunc(char@ Buff)
	Warn("begin..end is deprecated, please use _start() instead");

	word pFunction = DictAlloc();
	word pFuncType = DictAlloc();

	DictSetName(pFunction, "");
	DictSetName(pFuncType, "");

	Dict[pFunction].Class = CLASS.cFUNC;
	Dict[pFunction].Sub   = SUBCLASS.sSTART_FUNC;
	Dict[pFunction].pType = pFuncType;

	Dict[pFuncType].Class = CLASS.cTYPE;
	Dict[pFuncType].Sub   = SUBCLASS.sFUNCTYPE;
	Dict[pFuncType].pType = st_void;

	word pARGS = T_FuncMakeArgs(pFuncType);

	pCurrentFunc = pFunction;
	pStartFunc = pFunction;
	word Saved_nLocal = nLocal;

	Scan(@Buff);
	Dict[pCurrentFunc].pNode = Statements(@Buff, "end", NULL, NULL);

	nLocal = Saved_nLocal;
	pCurrentFunc = nDICT;
end

/*****************************************************************************/

void DeclAlias_Forward(word D; word pForward; word pExpr)
	if Node[pExpr].ID != iFUNC then
		ErrorWithSubject(@L10n.eDUPLICATE, @DictGetName(D));
	end:if

	word pFunc = Node[pExpr].Value;
	if !T_IsFuctTypesIdentical(pFunc, pForward) then
		ErrorWithSubject(@L10n.eDUPLICATE, @DictGetName(D));
	end:if

	Dict[pForward].Class = CLASS.cNAME;
	Dict[pForward].Sub   = SUBCLASS.sNONE;
	Dict[pForward].pType = pFunc;
end

bool DeclAlias(char @Buff)
	forever do
		word pForward = ResolveInNamespace(@Scan(@Buff), pEnteredNamespace);
		if pForward < nDICT then
			when !Dict_IsFunction(pForward):
				StopWithSubject(@L10n.eDUPLICATE, @Buff);
			when Dict[pForward].Forward == 0:
				StopWithSubject(@L10n.eDUPLICATE, @Buff);
		end

		word D = DictAlloc();
		DictSetName(D, @Buff);

		SOURCELOCATION Location = CurrentFileInfo;

		if str_eq(@Scan(@Buff),"=") then
			Scan(@Buff);
		else
			if str_eq(@Buff,".") then
				StopWithSubject(@L10n.eASSIGNEXP2, @DictGetName(D));
			else
				ErrorWithSubject(@L10n.eASSIGNEXP2, @DictGetName(D));
			end
		end:if

		word pExpr = Expr(PRIO.ZERO, @Buff);

		select
		case pForward != nDICT:
			DeclAlias_Forward(D, pForward, pExpr);
		case IsTypeExpr(pExpr):
			Dict[D].Class = CLASS.cNAME;
			Dict[D].pType = Node[pExpr].Value;
		case IsConstExpr(pExpr):
			Dict[D].Class = CLASS.cLITERAL;
			Dict[D].RO = true;
			Dict[D].pType = Node[pExpr].pType;
			Dict[D].LiteralValue = Node[pExpr].Value;
		case Node[pExpr].ID == iFUNC:
			Dict[D].Class = CLASS.cNAME;
			Dict[D].pType = Node[pExpr].Value;
		case Node[pExpr].ID == iDATA:
			Dict[D].Class = CLASS.cNAME;
			Dict[D].pType = Node[pExpr].Value;
		default:
			Dict[D].Class = CLASS.cNAME;
			Dict[D].pType = st_void; /* FIXME: better approach? */
			ErrorWithSubjectAt(@Location, @L10n.eALIAS_WRONGRVALUE, @DictGetName(D));
		end:select

		when pForward == nDICT:
			DictAddToNamespace(D, pEnteredNamespace);

		when str_eq(@Buff,";"):
			return true;

		if str_ne(@Buff,",") then
			Error(@L10n.eSEMICOLONEXP);
			return false;
		end:if
	end:forever
end

/*****************************************************************************/

void DeclFunc1(char @Buff; word _pFunc; word pForward)
	word pFuncType = Dict[_pFunc].pType;

	when !T_IsFunc(pFuncType):
		StopInternal(__FILE__, __LINE__);

	bool prototypeMismatch = false;
	if pForward != nDICT & !T_IsFuctTypesIdentical(pFuncType, pForward) then
		Error(@L10n.eTYPE_FUNC_FWD);
		prototypeMismatch = true;
		pForward = nDICT;
	end

	word pFunc;
	if pForward == nDICT then
		pFunc = _pFunc;
		Dict[pFunc].Class = CLASS.cFUNC;
		Dict[pFunc].Sub   = SUBCLASS.sFUNC;
		when !prototypeMismatch:
			DictAddToNamespace(pFunc, pEnteredNamespace);
	else
		DictFree(@_pFunc);
		DictFree(@Dict[pForward].pType);
		Dict[pForward].pType = pFuncType;
		Dict[pForward].Forward = 0;
		pFunc = pForward;
	end:if

	word pCurrentFunc_Saved = pCurrentFunc;
	pCurrentFunc = pFunc;

//	Scan(@Buff);

	select
		case str_eq(@Buff,";"): /* Прототип. */
			Dict[pCurrentFunc].pNode = Peek2(iINVALID);
			Dict[pCurrentFunc].Forward = 1;

		case str_eq(@Buff,"external"): /* Внешняя функция. */
			select
				case TargetFileFormat == TARGET_FORMAT.tPE:
					pass;
				default:
					Stop(@L10n.eNOTALLOWED);
			end

			/* Читаем имя библиотеки. Добавляем библиотеку в словарь, если она туда еще не занесена. */
			word pLib = Find(@Scan(@Buff));
			if   pLib >= nDict then
				pLib = DictAlloc();
				DictSetName(pLib, @Buff);
				Dict[pLib].Class = CLASS.cLIB;
			end:if
			when Dict[pLib].Class != CLASS.cLIB:
				StopInternal(__FILE__, __LINE__);

			/*
				Если для функции в библиотеке указано имя, отличное от объявленного имени функции,
				объявленное имя делаем алиасом для библиотечного имени.
				FIXME: Переделать! Библиотечное имя не должно присутствовать в пространстве имён модуля.
			*/
			if str_eq(@Scan(@Buff),".") then
				if Find(@Scan(@Buff)) < nDict then
					StopWithSubject(@L10n.eDUPLICATE, @Buff);
				end:if

				word pAlias = DictAlloc();

				DictSetName(pAlias, @DictGetName(pCurrentFunc));
				Dict[pAlias].Class = CLASS.cNAME;
				Dict[pAlias].pType = pCurrentFunc;
				DictAddToNamespace(pAlias, pEnteredNamespace);

				DictSetName(pCurrentFunc, @Buff);
				Scan(@Buff);

			end:if

			Dict[pCurrentFunc].Sub   = SUBCLASS.sSYS;
			Dict[pCurrentFunc].pNode = pLib;

			if str_ne(@Buff,";") then
				Stop(@L10n.eSEMICOLONEXP);
			end:if

		default: /* Тело функции. */

			if str_eq(@Buff, "of") then
				/* Optional 'of'. */
				Scan(@Buff);
			end

			word Saved_nLocal = nLocal;
			Dict[pCurrentFunc].pNode = Statements(@Buff, "end", NULL, NULL);
			nLocal = Saved_nLocal;

			CTE_Function(pCurrentFunc);

	end:select

	pCurrentFunc = pCurrentFunc_Saved;
end

/*****************************************************************************/

void DeclVarFuncType(char @Buff; word pType)
	Scan(@Buff);
	word nPtr = ReadPtrs(@Buff);

	CheckDuplicate(@Buff);

	word D = DictAlloc();

	DictSetName(D, @Buff);
	Dict[D].Class = CLASS.cTYPE;
	Dict[D].Sub   = SUBCLASS.sFUNCTYPE;
	DictAddToNamespace(D, pEnteredNamespace);

	if str_ne(@Scan(@Buff),"(") then
		Stop(@L10n.eBRACKETEXP);
	end

	Dict[D].pType = T_nPtrTo(nPtr, pType);
	FuncArgs(@Buff, D);

	if (str_ne(@Scan(@Buff),";")) then
		Stop(@L10n.eSEMICOLONEXP);
	end

end

/*****************************************************************************/

void DeclType(char @Buff; word pType)
	forever do
		CheckDuplicate(@Buff);

		word D = DictAlloc();
		DictSetName(D, @Buff);

		SOURCELOCATION Location = CurrentFileInfo;

		if str_eq(@Scan(@Buff),"=") then
			Scan(@Buff);
		else
			if str_eq(@Buff,".") then
				StopWithSubject(@L10n.eASSIGNEXP2, @DictGetName(D));
			else
				ErrorWithSubject(@L10n.eASSIGNEXP2, @DictGetName(D));
			end
		end:if

		word pExpr = Expr(PRIO.ZERO, @Buff);
		select
		case IsTypeExpr(pExpr):
			Dict[D].Class = CLASS.cNAME;
			Dict[D].pType = Node[pExpr].Value;
		default:
			Dict[D].Class = CLASS.cNAME;
			Dict[D].pType = st_void; /* FIXME: better approach? */
			ErrorWithSubjectAt(@Location, @L10n.eTYPE_WRONGRVALUE, @DictGetName(D));
			ErrorWithSubjectAt(@Location, @L10n.eWRONGTYPE_2NDLINE, @T_GetName(Node[pExpr].pType));
		end:select

		DictAddToNamespace(D, pEnteredNamespace);

		when str_eq(@Buff,";"):
			exit;

		if str_ne(@Buff,",") then
			Error(@L10n.eSEMICOLONEXP);
			exit;
		end:if

		Scan(@Buff);
	end:forever
end

/*****************************************************************************/

void DeclVarFunc(char @Buff)
	word pPrefixExpr = Expr(PRIO.LVALUE, @Buff);
	if Node[pPrefixExpr].ID != iTYPE then
		Stop(@L10n.eTYPEEXP);
	end

	word pPrefixType = Node[pPrefixExpr].Value;
	if pPrefixType == nDICT | Dict[pPrefixType].Class != CLASS.cTYPE then
		Stop(@L10n.eTYPEEXP);
	end

	if pPrefixType == st_type then
		DeclType(@Buff, pPrefixType);
		return;
	end

	/* Функтор-тип. */
	if str_eq(@Buff,"function") then
		DeclVarFuncType(@Buff, pPrefixType);
		return;
	end


	bool FirstName = true;

	forever do
		word nPtr = ReadPtrs(@Buff);

		//word pForward = ResolveInNamespace(@Buff, pEnteredNamespace);
		bool SingleItem = false;
		word pNamespace = nDICT;
		word pForward = ResolveGlobal(@Buff, @pNamespace, @SingleItem);

		NAME Name;
		if pForward < nDict then
			Name = Dict[pForward].Name;
		else
			Name_SetFromString0(@Name, @Buff);
			Scan(@Buff);
		end:if

		if SingleItem & pNamespace != pEnteredNamespace then
			pNamespace = nDICT;
			pForward = nDICT;
		end

		if pForward < nDict then
			when !Dict_IsFunction(pForward):
				StopWithSubject(@L10n.eDUPLICATE, @Name_GetString(@Name));
			when Dict[pForward].Forward == 0:
				StopWithSubject(@L10n.eDUPLICATE, @Name_GetString(@Name));
		end

		word D = DictAlloc();

		Dict[D].Name = Name;
		Dict[D].pType = T_nPtrTo(nPtr, pPrefixType);
		Dict[D].pType = ReadTypeSuffix(@Buff, Dict[D].pType);

		if T_IsFunc(Dict[D].pType) then
			when !FirstName:
				Stop(@L10n.eNOFUNCTION);
			DeclFunc1(@Buff, D, pForward);
			return;
		end

		FirstName = false;

		when pForward < nDict:
			StopWithSubject(@L10n.eDUPLICATE, @DictGetName(D));

		if Dict[D].pType == st_void then
			Stop(@L10n.eNOVOID);
		end

		if Dict[Dict[D].pType].Sub == SUBCLASS.sFUNCTYPE then
			Stop(@L10n.eNOVAL);
		end

		DictAddToNamespace(D, pEnteredNamespace);
		Dict[D].pNode = nNODE;

		select
		case T_IsStruct(pEnteredNamespace):
			Dict[D].Class = CLASS.cFIELD;
			AssignFieldOffset(D, @FieldNextOffset, @FieldMaxAlign);
		default:
			Dict[D].Class = CLASS.cDATA;

			if str_eq(@Buff,"=") then
				/*if Dict[D].nIndx > 0 then
					Stop(@L10n.eNOTAVAIL);
				end*/

				word P1=Peek();
				word P2=Peek();
				Node[P1].ID    =iASSIGN;
				Node[P1].pLeft = P2;

				word P3=Peek();
				Node[P2].ID    =iEMPTY;
				Node[P2].pLeft = P3;
				Node[P2].pRight= Expr(PRIO.ZERO, @Scan(@Buff));

				Node[P3].ID    =iDATA;
				Node[P3].Value =D;

				ImplicitCast(Dict[D].pType, @Node[P2].pRight);

				Dict[D].pNode=P1;
			end
		end:select

		if str_eq(@Buff,";") then
			exit;
		end

		if str_ne(@Buff,",") then
			Stop(@L10n.eSEMICOLONEXP);
		end

		Scan(@Buff);

	end:forever

end

/*****************************************************************************/

bool DeclDefine(char @Buff)

	word nPtr = ReadPtrs(@Scan(@Buff));

	CheckDuplicate(@Buff);

	word D = DictAlloc();

	DictSetName(D, @Buff);
	Dict[D].Class = CLASS.cLITERAL;
	Dict[D].RO = true;
	DictAddToNamespace(D, pEnteredNamespace);

	Scan(@Buff);
	select
		case nPtr==0:

			word P = Expr(PRIO.ZERO, @Buff);

			select
				case Node[P].ID==iLITERAL:
					Dict[D].pType = Node[P].pType;
					Dict[D].LiteralValue = Node[P].Value;

				default:
					Stop(@L10n.eTYPE);
			end:select

			if str_eq(@Buff,";") then
				Scan(@Buff);
			end:if

			return false;

		default:
			if str_ne(@Buff,"~"") then
				Stop(@L10n.eQUOTEXP);
			end
			ScanString(D);
	end:select

	return true;
end

/*****************************************************************************/

void Include(word pFileName; word pGuard; bool Once)
	bool DoInclude = true;

	if pGuard != nNODE then
		if !IsConstExpr(pGuard) then
			Error(@L10n.eINCLUDE_GUARD_CONST_EXP);
			DoInclude = false;
		end:if

		if !NodeIsTrue(pGuard) & !NodeIsFalse(pGuard) then
			Error(@L10n.eINCLUDE_GUARD_WRONG_TYPE);
			DoInclude = false;
		end:if

		if !NodeIsTrue(pGuard) then
			DoInclude = false;
		end:if
	end:if

	when Node[pFileName].ID == iLPTR:
		pFileName = Node[pFileName].pLeft;

	if !NodeIsLiteralString(pFileName) then
		Error(@L10n.eINCLUDE_NAME_WRONG_TYPE);
		DoInclude = false;
	end:if

	when !DoInclude:
		return;

	char@ FileName = @NodeGetLiteralString(pFileName);
	char@ FullFileName = @ResolveFileName(@FileName);

	word dFile = Find_cFILE(@FullFileName);
	if dFile != nDICT & Once then
		return;
	end:if

	if dFile == nDICT then
		dFile = DictAlloc();
		DictSetName(dFile, @FullFileName);
		Dict[dFile].Class = CLASS.cFILE;
	end

	IncludeFile(@FullFileName);
end

bool DeclInclude(char @Buff)
	word pFileName = Expr(PRIO.ZERO, @Scan(@Buff));
	when str_ne(@Buff, ";"):
		Stop(@L10n.eINCLUDE_SEMICOLON_EXP);
	Include(pFileName, nNODE, false);
	return true;
end

bool DeclIncludeWhen(char @Buff)
	word pFileName = Expr(PRIO.ZERO, @Scan(@Buff));
	when str_ne(@Buff, ","):
		Stop(@L10n.eINCLUDE_WHEN_COMMA_EXP);
	word pGuard = Expr(PRIO.ZERO, @Scan(@Buff));
	when str_ne(@Buff, ";"):
		Stop(@L10n.eINCLUDE_WHEN_SEMICOLON_EXP);
	Include(pFileName, pGuard, false);
	return true;
end

bool DeclIncludeOnce(char @Buff)
	word pFileName = Expr(PRIO.ZERO, @Scan(@Buff));
	when str_ne(@Buff, ";"):
		Stop(@L10n.eINCLUDE_ONCE_SEMICOLON_EXP);
	Include(pFileName, nNODE, true);
	return true;
end

/*****************************************************************************/

bool DeclNamespace(char @Buff);
bool DeclStruct(char @Buff);

struct EndOfBlockDescriptor of
	bool CurlyBraces;
	bool EndKeyword;
	char @Name1;
	char @Name2;
end:struct

bool ParseDeclBlock(char @Buff; EndOfBlockDescriptor @Eob)
	bool TopLevel = !Eob.CurlyBraces & !Eob.EndKeyword;

	forever do
		bool DoScan = true;
		select
		case str_eq(@Buff,"include"):
			DoScan = DeclInclude(@Buff);
		case str_eq(@Buff,"include_when"):
			DoScan = DeclIncludeWhen(@Buff);
		case str_eq(@Buff,"include_once"):
			DoScan = DeclIncludeOnce(@Buff);
		case str_eq(@Buff,"define"):
			DoScan = DeclDefine(@Buff);
		case str_eq(@Buff,"struct"):
			DoScan = DeclStruct(@Buff);
		case str_eq(@Buff,"namespace"):
			DoScan = DeclNamespace(@Buff);
		case str_eq(@Buff,"alias"):
			DoScan = DeclAlias(@Buff);
		case str_eq(@Buff,"static_assert"):
			DoScan = StaticAssert(@Buff);
		case str_eq(@Buff,"end"):
			when Eob.EndKeyword:
				exit;
			Stop(@L10n.eWRONGEND_NAMESPACE);
		case str_eq(@Buff,"}"):
			when Eob.CurlyBraces:
				exit;
			Stop(@L10n.eWRONGBRACE_NAMESPACE);
		case str_eq(@Buff, ";"):
			Warn(@L10n.wDANGLING_SEMICOLON);
		case TopLevel & str_eq(@Buff,"begin"):
			DeclMainFunc(@Buff);
			exit;
		case str_eq(@Buff, ""):
			if TopLevel then
				exit;
			else
				Stop(@L10n.eEOF);
			end:if
		default: // Пеpеменная, функция, ...
			DeclVarFunc(@Buff);
		end:select

		if DoScan then
			Scan(@Buff);
		end
	end:forever

	bool SkipFinalScan = true;
	select
	case Eob.EndKeyword:
		SkipFinalScan = EndOf(@Buff, @Eob.Name1, @Eob.Name2, true);
	case Eob.CurlyBraces:
		ScanAndMatchSemicolon(@Buff, @SkipFinalScan);
	end:select

	return SkipFinalScan == false;
end

/*****************************************************************************/

bool DeclStruct(char @Buff)
	CheckDuplicate(@Scan(@Buff));

	word pStruct = DictAlloc();
	DictSetName(pStruct, @Buff);
	Dict[pStruct].Class = CLASS.cTYPE;
	Dict[pStruct].Sub = SUBCLASS.sSTRUCT;
	DictAddToNamespace(pStruct, pEnteredNamespace);

	char @TypeName = @DictGetName(pStruct);

	if str_eq(@Scan(@Buff),";") then
		Stop(@L10n.eNOTAVAIL);
	end

	word pPrevNamespace = pEnteredNamespace;
	pEnteredNamespace = pStruct;

	word Old_FieldNextOffset = FieldNextOffset;
	FieldNextOffset = 0;
	word Old_FieldMaxAlign = FieldMaxAlign;
	FieldMaxAlign = 1;

	EndOfBlockDescriptor Eob;
	@Eob.Name1 = "struct";
	@Eob.Name2 = @TypeName;

	select
	case str_eq(@Buff, "of"):
		Eob.CurlyBraces = false;
		Eob.EndKeyword = true;
		Scan(@Buff);
	case str_eq(@Buff, "{"):
		Eob.CurlyBraces = true;
		Eob.EndKeyword = false;
		Scan(@Buff);
	default:
		Eob.CurlyBraces = false;
		Eob.EndKeyword = true;
		Deprecated(@L10n.dptMISSINGOF_NAMESPACE);
	end

    bool DoScan = ParseDeclBlock(@Buff, @Eob);

	Dict[pStruct].TypeSize = FieldNextOffset;
	FieldNextOffset = Old_FieldNextOffset;
	FieldMaxAlign = Old_FieldMaxAlign;

	pEnteredNamespace = pPrevNamespace;

	return DoScan;
end

/*****************************************************************************/

bool DeclNamespace(char @Buff)
	CheckDuplicate(@Scan(@Buff));

	word pNamespace = DictMakeNamespace(@Buff);
	DictAddToNamespace(pNamespace, pEnteredNamespace);

	char @TypeName = @DictGetName(pNamespace);

	if str_eq(@Scan(@Buff),";") then
		Stop(@L10n.eNOTAVAIL);
	end

	word pPrevNamespace = pEnteredNamespace;
	pEnteredNamespace = pNamespace;

	EndOfBlockDescriptor Eob;
	@Eob.Name1 = "namespace";
	@Eob.Name2 = @TypeName;

	select
	case str_eq(@Buff, "of"):
		Eob.CurlyBraces = false;
		Eob.EndKeyword = true;
		Scan(@Buff);
	case str_eq(@Buff, "{"):
		Eob.CurlyBraces = true;
		Eob.EndKeyword = false;
		Scan(@Buff);
	default:
		Eob.CurlyBraces = false;
		Eob.EndKeyword = true;
		Deprecated(@L10n.dptMISSINGOF_NAMESPACE);
	end

    bool DoScan = ParseDeclBlock(@Buff, @Eob);

	pEnteredNamespace = pPrevNamespace;

	return DoScan;
end

/*****************************************************************************/

void Parse()
	char Buff[nBUFF];
	Scan(@Buff);

	EndOfBlockDescriptor Eob;
	Eob.CurlyBraces = false;
	Eob.EndKeyword = false;
	@Eob.Name1 = NULL;
	@Eob.Name2 = NULL;

    ParseDeclBlock(@Buff, @Eob);
end

/*****************************************************************************/

end:TopLevelParser;

alias Parse = TopLevelParser.Parse;
