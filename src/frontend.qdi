
namespace QodFrontend of

/*****************************************************************************/

include "frontend_charid.qdi";
include "frontend_lex.qdi";

/*****************************************************************************/

char@ ResolveFileName(char@ Buff)
	char FileName[MAX_FPATH];
	
	strn_cpy(@FileName, @CurrentFileInfo.FileName, MAX_FPATH);
	FileName[fpath_last_part(@FileName)] = #0;
	
	char @S = @Buff;
	forever do
		word Pos = str_find_chars(@S, "/\");
		if Pos != 0 then
			char Fragment[MAX_FPATH];
			strn_cpy(@Fragment, @S, MAX_FPATH);
			Fragment[Pos] = #0;
			fpathn_cat(@FileName, @Fragment, MAX_FPATH);
			if S[Pos] == #0 then
				exit;
			end:if
		end:if
		@S = @S[Pos + 1];
	end:forever
	
	return @Char[SaveString0(@FileName)];
end

/*****************************************************************************/

word ReadTypeSuffix(char @Buff; word pPrefixType);
word Statements(char @Buff; char @End1; char @End2; char @End3);
word Ctrl(char @Buff);
word Expr(word Prio; char @Buff);
void CTE(word P);

/*****************************************************************************/

word pGlobalNamespace;
word pInternalNamespace;
word pKeywordsNamespace;

word pNamespace_qod;
word pNamespace_qod_impl;
word pNamespace_qod_env;
word pNamespace_qod_optional;

word pEnteredNamespace;
word pCurrentFunc;
word pStartFunc;
word pLoop;

/*****************************************************************************/

include "frontend_dict.qdi";
include "frontend_local.qdi";
include "frontend_syn_brackets.qdi";
include "frontend_syn_operators.qdi";
include "frontend_syn_expr.qdi";
include "frontend_syn_statements.qdi";
include "frontend_syn_up.qdi";

/*****************************************************************************/

void InitFrontEnd()

	init_charid();
	InitCharData();
	InitOperators();

	nDict = 0;
	nLocal = 0;
	nNode = 0;
	tArrayTypes = nDICT;

	nFile = 0;
	pFile = 0;

	pLoop = nNODE;
	pCurrentFunc = nDICT;
	pStartFunc = nDICT;

	pInternalNamespace = DictMakeNamespace("<INTERNAL>");
	pKeywordsNamespace = DictMakeNamespace("");

	pGlobalNamespace = DictMakeNamespace("");
	DictAddToNamespace(pGlobalNamespace, pGlobalNamespace);

	pNamespace_qod = DefineNamespace("qod", pGlobalNamespace);
	pNamespace_qod_impl = DefineNamespace("impl", pNamespace_qod);
	pNamespace_qod_env = DefineNamespace("env", pNamespace_qod);
	pNamespace_qod_optional = DefineNamespace("optional", pNamespace_qod);

	RegisterDigraph("!=");
	RegisterDigraph("<=");
	RegisterDigraph(">=");
	RegisterDigraph("==");

	RegisterDigraph("(*");
	RegisterDigraph("*)");
	RegisterDigraph("(%");
	RegisterDigraph("%)");

	RegisterDigraph("/*");
	RegisterDigraph("//");
	RegisterComment("/*", "*/");
	RegisterComment("//", "~n");
	RegisterHereCommentPrefix("$comment");

	Word("alias");
	Word("attribute");
	Word("as_signed");
	Word("as_unsigned");
	Word("begin");
	Word("bitsizeof");
	Word("case");
	Word("const_expr");
	Word("continue");
	Word("countof");
	Word("dec");
	Word("default");
	Word("define");
	Word("do");
	Word("else");
	Word("end");
	Word("exit");
	Word("external");
	Word("false");
	Word("__FILE__");
	Word("forever");
	Word("function");
	Word("if");
	Word("inc");
	Word("include");
	Word("include_once");
	Word("include_when");
	Word("inline");
	Word("__LINE__");
	Word("likely");
	Word("loop");
	Word("null");
	Word("NULL");
	Word("of");
	Word("repeat");
	Word("return");
	Word("select");
	Word("static_assert");
	Word("sizeof");
	Word("struct");
	Word("switch");
	Word("then");
	Word("true");
	Word("unlikely");
	Word("until");
	Word("when");
	Word("while");

	pEnteredNamespace = pInternalNamespace;

	st_cond_branch = BaseType("cond_branch", SUBCLASS.sINTERNAL_COND_BRANCH, 0);

	pEnteredNamespace = pGlobalNamespace;

	st_type    = BaseType("type", SUBCLASS.sBASE_TYPE, 0);
	st_void    = BaseType("void", SUBCLASS.sBASE_VOID, 0);
	st_noreturn = BaseType("noreturn", SUBCLASS.sBASE_NORET, 0);
	st_nulltype = BaseType("nulltype", SUBCLASS.sBASE_NULL, target_size_of_pointer);

	st_bool8   = BaseType("bool8", SUBCLASS.sBASE_BOOL, 1);
	st_bool16  = BaseType("bool16", SUBCLASS.sBASE_BOOL, 2);
	st_bool32  = BaseType("bool32", SUBCLASS.sBASE_BOOL, 4);
	st_bool    = BaseType("bool", SUBCLASS.sBASE_BOOL, target_size_of_bool);

	st_char    = BaseType("char", SUBCLASS.sBASE_CHAR, 1);
	st_byte    = BaseType("byte", SUBCLASS.sBASE_UINT, 1);

	st_int8    = BaseType("int8", SUBCLASS.sBASE_SINT, 1);
	st_int16   = BaseType("int16", SUBCLASS.sBASE_SINT, 2);
	st_int32   = BaseType("int32", SUBCLASS.sBASE_SINT, 4);
	st_int64   = BaseType("int64", SUBCLASS.sBASE_SINT, 8);
	st_int128  = BaseType("int128", SUBCLASS.sBASE_SINT, 16);

	st_uint8   = BaseType("uint8", SUBCLASS.sBASE_UINT, 1);
	st_uint16  = BaseType("uint16", SUBCLASS.sBASE_UINT, 2);
	st_uint32  = BaseType("uint32", SUBCLASS.sBASE_UINT, 4);
	st_uint64  = BaseType("uint64", SUBCLASS.sBASE_UINT, 8);
	st_uint128 = BaseType("uint128", SUBCLASS.sBASE_UINT, 16);

	st_intptr  = BaseType("intptr", SUBCLASS.sBASE_SINT, target_size_of_pointer);
	st_uintptr = BaseType("uintptr", SUBCLASS.sBASE_UINT, target_size_of_pointer);

	st_short   = BaseType("short" , SUBCLASS.sBASE_SINT, target_size_of_short);
	st_ushort  = BaseType("ushort", SUBCLASS.sBASE_UINT, target_size_of_short);
	st_int     = BaseType("int" , SUBCLASS.sBASE_SINT, target_size_of_int);
	st_uint    = BaseType("uint", SUBCLASS.sBASE_UINT, target_size_of_int);
	st_long    = BaseType("long" , SUBCLASS.sBASE_SINT, target_size_of_long);
	st_ulong   = BaseType("ulong", SUBCLASS.sBASE_UINT, target_size_of_long);
	st_word    = BaseType("word", SUBCLASS.sBASE_UINT, target_size_of_word);

	st_float   = BaseType("float", SUBCLASS.sBASE_FLOAT, target_size_of_float);
	st_double  = BaseType("double", SUBCLASS.sBASE_FLOAT, target_size_of_double);
	st_long_double = BaseType("long_double", SUBCLASS.sBASE_FLOAT, target_size_of_long_double);

	InitExpressionParser();
	InitStatementParser();

	strcpy(@Text,"");

	DefineBoolInNamespace("hosted", false, pNamespace_qod_optional);
	DefineBoolInNamespace("float", false, pNamespace_qod_optional);
	DefineBoolInNamespace("int_with_nan", false, pNamespace_qod_optional);
	DefineIntegerInNamespace("int_max_size", st_uint, 4, pNamespace_qod_optional);
	DefineIntegerInNamespace("boolean_max_size", st_uint, 4, pNamespace_qod_optional);

	DefineStringInNamespace("impl_name", @msgPRODUCT, pNamespace_qod_impl);
	DefineStringInNamespace("impl_version_string", @msgVERSION, pNamespace_qod_impl);
	DefineStringInNamespace("build_host", @qod.impl.target, pNamespace_qod_impl);

	DefineIntegerInNamespace("qod_version_major", st_uint, 0, pNamespace_qod);
	DefineIntegerInNamespace("qod_version_minor", st_uint, 1, pNamespace_qod);
	DefineStringInNamespace("qod_version_string", "0.1", pNamespace_qod);

	select
	case TargetFileFormat == TARGET_FORMAT.tPE:
		DefineStringInNamespace("target", "i386-win32-pe", pNamespace_qod_impl);
		DefineBoolInNamespace("__LINUX__", false, pNamespace_qod_env);
		DefineBoolInNamespace("__WIN32__", true, pNamespace_qod_env);

		strcat(@Text,"noreturn ExitProcess(word uExitCode) external KERNEL32;");
	case TargetFileFormat == TARGET_FORMAT.tELF:
		DefineStringInNamespace("target", "i386-linux-elf", pNamespace_qod_impl);
		DefineBoolInNamespace("__LINUX__", true, pNamespace_qod_env);
		DefineBoolInNamespace("__WIN32__", false, pNamespace_qod_env);
	default:
		StopInternal(__FILE__, __LINE__);
	end:select

	strcat(@Text,"  ");


	nText = strlen(@Text);
	pText = 0;
	CurrentFileInfo.Line = 1;
	CurrentFileInfo.Column = 1;
	@CurrentFileInfo.FileName = NULL;
	BeforeFirstFile = true;
end

/*****************************************************************************/

word LocateStartFunc()
	when pStartFunc != nDICT:
		return pStartFunc;

	pStartFunc = ResolveInNamespace("_start", pGlobalNamespace);
	when pStartFunc != nDICT:
		return pStartFunc;

	word pStd = ResolveInNamespace("std", pGlobalNamespace);
	when pStd == nDICT:
		return nDICT;

	when !T_IsNamespace(pStd):
		return nDICT;

	pStartFunc = ResolveInNamespace("start", pStd);
	return pStartFunc;
end

/*****************************************************************************/

word ProcessSourceFile(char @InputFile) of
	InitFrontEnd();
	OpenInputFile(@InputFile);
	Parse();
	CloseAllFiles();
	return LocateStartFunc();
end

/*****************************************************************************/

end:QodFrontend

alias isdigit = QodFrontend.isdigit;
alias val = QodFrontend.val;
alias CTE_LoopHasExits = QodFrontend.CTE_LoopHasExits;
alias CTE_LoopHasContinues = QodFrontend.CTE_LoopHasContinues;
alias pGlobalNamespace = QodFrontend.pGlobalNamespace;
alias ResolveInNamespace = QodFrontend.ResolveInNamespace;
alias ProcessSourceFile = QodFrontend.ProcessSourceFile;

