



void EmitUsageInfo(char @Name; word Used; word Total)

	char Buff[nBUFF];

	strcpy(@Buff, "; ");
	strcat(@Buff, @Name);
	strcat(@Buff, ":   ");
	strcat(@Buff, @str(Used));
	strcat(@Buff, " of ");
	strcat(@Buff, @str(Total));
	strcat(@Buff, " (");
	strcat(@Buff, @str(Used * 100 / Total));
	strcat(@Buff, "%)");

	EmitStringNL(@Buff);
end


void EmitInternalsInfo()

	EmitNL();
	EmitUsageInfo("Dict", nDict, nDICT);
	EmitUsageInfo("Char", CharDataUsed(), CharDataTotal());
	EmitUsageInfo("Node", nNode, nNODE);
	EmitUsageInfo("Label", nLabel, nLABEL);
//	EmitUsageInfo("Text", nText, nTEXT);

end


define vcNone 0;
define vcDict 1;
define vcChar 2;

struct ID_DESC
	char @Name;
	word ValueClass;
	word RightList;
end

ID_DESC IDDesc[iID_COUNT];
word IDDescInitialized = 0;

void InitIDDesc2(word ID; char @Name; word vc; word RightList)
	when @IDDesc[ID].Name != NULL:
		StopInternal();
	@IDDesc[ID].Name = @Name;
	IDDesc[ID].ValueClass = vc;
	IDDesc[ID].RightList  = RightList;
end

void InitIDDesc1(word ID; char @Name)
	InitIDDesc2(ID, @Name, vcNone, 0);
end

void InitializeIDDesc()

	if IDDescInitialized != 0 then
		return;
	end

	IDDescInitialized = 1;

	InitIDDesc1(iEMPTY  , "iEMPTY"  );
	InitIDDesc1(iNULL   , "iNULL"   );
	InitIDDesc1(iCHAR   , "iCHAR"   );
	InitIDDesc1(iWORD   , "iWORD"   );
	InitIDDesc1(iINT    , "iINT"    );
	InitIDDesc1(iBOOL   , "iBOOL"   );
	InitIDDesc2(iFUNC   , "iFUNC"   , vcDict, 0);
	InitIDDesc1(iSTRING , "iSTRING" );
	InitIDDesc2(iDATA   , "iDATA"   , vcDict, 0);
	InitIDDesc2(iPARM   , "iPARM"   , vcDict, 0);
	InitIDDesc1(iLOCAL  , "iLOCAL"  );
	InitIDDesc1(iREF    , "iREF"    );

	InitIDDesc1(iNOT    , "iNOT"    );
	InitIDDesc1(iBIT_NOT, "iBIT_NOT");
	InitIDDesc1(iNEG    , "iNEG"    );

	InitIDDesc1(iOR     , "iOR"     );
	InitIDDesc1(iXOR    , "iXOR"    );
	InitIDDesc1(iEQV    , "iEQV"    );
	InitIDDesc1(iAND    , "iAND"    );

	InitIDDesc1(iBIT_OR , "iBIT_OR" );
	InitIDDesc1(iBIT_XOR, "iBIT_XOR");
	InitIDDesc1(iBIT_AND, "iBIT_AND");
	InitIDDesc1(iLT     , "iLT"     );
	InitIDDesc1(iLE     , "iLE"     );
	InitIDDesc1(iEQ     , "iEQ"     );
	InitIDDesc1(iNE     , "iNE"     );
	InitIDDesc1(iGE     , "iGE"     );
	InitIDDesc1(iGT     , "iGT"     );
	InitIDDesc1(iADD    , "iADD"    );
	InitIDDesc1(iSUB    , "iSUB"    );
	InitIDDesc1(iMUL    , "iMUL"    );
	InitIDDesc1(iDIV    , "iDIV"    );
	InitIDDesc1(iMOD    , "iMOD"    );

	InitIDDesc2(iCALL   , "iCALL"   , vcDict, 0);
	InitIDDesc2(iCALL2  , "iCALL2"  , vcDict, 0);
	InitIDDesc1(iINDEX  , "iINDEX"  );
	InitIDDesc1(iADDR   , "iADDR"   );
	InitIDDesc2(iFIELD  , "iFIELD"  , vcDict, 0);
	InitIDDesc1(iLOAD   , "iLOAD"   );
	InitIDDesc1(iLPTR   , "iLPTR"   );

	InitIDDesc2(iDEF_LOCAL, "iDEF_LOCAL", vcChar, 1);
	InitIDDesc1(iSELECT , "iSELECT" );
	InitIDDesc2(iSWITCH , "iSWITCH" , vcNone, 1);
	InitIDDesc2(iWHILE  , "iWHILE"  , vcNone, 1);
	InitIDDesc2(iREPEAT , "iREPEAT" , vcNone, 1);
	InitIDDesc1(iCONTINUE, "iCONTINUE");
	InitIDDesc1(iEXIT   , "iEXIT"   );
	InitIDDesc1(iCAST   , "iCAST"   );
	InitIDDesc2(iINC    , "iINC"    , vcNone, 1);
	InitIDDesc2(iDEC    , "iDEC"    , vcNone, 1);
	InitIDDesc2(iPUSH   , "iPUSH"   , vcNone, 1);
	InitIDDesc2(iASSIGN , "iASSIGN" , vcNone, 1);
	InitIDDesc1(iINLINE , "iINLINE" );
	InitIDDesc2(iRETURN , "iRETURN" , vcNone, 1);

	InitIDDesc2(iBODY   , "iBODY"  , vcNone, 1);
	InitIDDesc2(iCOND   , "iCOND"  , vcNone, 1);
	InitIDDesc2(iCASE   , "iCASE"  , vcNone, 1);
	InitIDDesc2(iVALUE  , "iVALUE" , vcNone, 1);
	InitIDDesc2(iDEFAULT, "iDEFAULT", vcNone, 1);
end


word NodeDeep(word P)

	if P >= nNODE then
		return 0;
	end

	word D1 = NodeDeep(Node[P].pLeft);
	word D2 = NodeDeep(Node[P].pRight);

	if D2 > D1 then
		D1 = D2;
	end

	return D1 + 1;
end

void EmitNodeName(word P)
	char @N = @IDDesc[Node[P].ID].Name;
	when @N = NULL:
		StopInternal();
	EmitString(@N);
end

void EmitNodeValue(word P)
	char @N;
	select
		case IDDesc[Node[P].ID].ValueClass = vcDict:
			@N = @DictGetName(Node[P].Value);
		case IDDesc[Node[P].ID].ValueClass = vcChar:
			@N = @Char[Node[P].Value];
		default:
			@N = @str(Node[P].Value);
	end:select
	EmitString(@N);
end

void EmitNodeType(word P)
	EmitString(@str(Node[P].pType));
end

void EmitTree_Prefix(int Pad; char @LinePrefix)

	if Pad < 0 then
		EmitChar(' ');
		return;
	end

	EmitNL();
	EmitString(@LinePrefix);
	int i = 0;
	while i < Pad do
		EmitChar(' ');
		inc i;
	end
end


/*

(ID Value Left Right)

(ID
 Value
 Left
 Right
)

(ID
 Value
 Left
*ID
 Value
 Left
)

*/

void EmitTree(word P; int Pad; char @LinePrefix)

	if P >= nNODE then
		EmitTree_Prefix(Pad , @LinePrefix);
		EmitString("0");
		return;
	end

	if Pad < 0 then
		EmitString("(");
		EmitNodeName(P);
		EmitString(" ");
		EmitNodeValue(P);
		EmitString(" ");
		EmitNodeType(P);
		EmitString(" ");
		EmitTree(Node[P].pLeft , Pad, "");
		EmitString(" ");
		EmitTree(Node[P].pRight, Pad, "");
		EmitString(")");
		return;
	end

/*
	if 1 = 1 then
		EmitTree_Prefix(Pad    , @LinePrefix); EmitString("("); EmitNodeName(P);
		EmitTree_Prefix(Pad + 1, @LinePrefix); EmitNodeValue(P);
		EmitTree(Node[P].pLeft , Pad + 1, @LinePrefix);
		EmitTree(Node[P].pRight, Pad + 1, @LinePrefix);
		EmitTree_Prefix(Pad    , @LinePrefix); EmitString(")");
		return
	end
*/

	EmitTree_Prefix(Pad, @LinePrefix);

	word Deep = NodeDeep(P);
	if Deep < 3 then
		EmitTree(P, -1, "");
		return;
	end


	EmitString("(");

	do
		word RightList = IDDesc[Node[P].ID].RightList;
/*
		word RightList = 0;
		if Node[P].ID = iPUSH then
			RightList = 1;
		end
*/
		EmitNodeName(P);
		EmitString(" "); EmitNodeValue(P);
		EmitString(" "); EmitNodeType(P);
		EmitTree(Node[P].pLeft , Pad + 1, @LinePrefix);

		if RightList = 0 then
			EmitTree(Node[P].pRight, Pad + 1, @LinePrefix);
			exit;
		end

		P = Node[P].pRight;
		if P >= nNODE then
			exit;
		end

		EmitTree_Prefix(Pad, @LinePrefix);
		EmitString("*");
	end

	EmitTree_Prefix(Pad, @LinePrefix);
	EmitString(")");

end


void EmitFunctionTrees()

	InitializeIDDesc();

	char @LinePrefix = "; ";

	word I = 0;
	while I < nDict do
		select
			case Dict[I].Class = cFUNC & Dict[I].Sub != sSYS & Dict[I].Used != 0:
				EmitNL();
				EmitString(@LinePrefix);
				EmitString("== ");
				EmitString(@DictGetName(I));
				EmitString(" ");
				word j = strlen(@DictGetName(I));
				while j < 74 do
					EmitString("=");
					inc j;
				end
				EmitNL();
				EmitString(@LinePrefix);
				EmitTree(Dict[I].pNode, 0, @LinePrefix);
		end
		inc I;
	end

end

void EmitDictEntries()
	DumpDictEntries(@EmitStringNL);
end

void EmitContentForTreeFile()
	EmitDictEntries();
	EmitFunctionTrees();
	EmitInternalsInfo();
end

void EmitIncludeList()
	word i = 0;
	while i < nDict do
		select
		case Dict[i].Class = cFILE:
			EmitStringNL(@DictGetName(i));
		end:select
		inc i;
	end

end
