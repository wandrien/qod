
/*****************************************************************************/

include "frontend_charid.ctxi"
include "frontend_node.ctxi"
include "frontend_lex.ctxi"

/*****************************************************************************/

char@ ResolveFileName(char@ Buff)
	char FileName[MAX_FPATH];
	
	strn_cpy(@FileName, @CurrentFileInfo.FileName, MAX_FPATH);
	FileName[fpath_last_part(@FileName)] = #0;
	
	char @S = @Buff;
	do
		word Pos = str_find_chars(@S, "/\");
		if Pos != 0 then
			char Fragment[MAX_FPATH];
			strn_cpy(@Fragment, @S, MAX_FPATH);
			Fragment[Pos] = #0;
			fpathn_cat(@FileName, @Fragment, MAX_FPATH);
			if S[Pos] = #0 then
				exit;
			end:if
		end:if
		@S = @S[Pos + 1];
	end:do
	
	return @Char[SaveString0(@FileName)];
end

/*****************************************************************************/

word function __Statements(char @Buff; char @End1; char @End2; char @End3)
__Statements @_Statements;

/*****************************************************************************/

word function __Ctrl(char @Buff)
__Ctrl @_Ctrl;

/*****************************************************************************/

word function __Expr(word Prty; char @Buff)
__Expr @_Expr;

/*****************************************************************************/

word pFunc;
word pLoop;

/*****************************************************************************/

include "frontend_local.ctxi"
include "frontend_syn_operators.ctxi"
include "frontend_syn_expr.ctxi"
include "frontend_syn_statements.ctxi"
include "frontend_syn_up.ctxi"

/*****************************************************************************/

void InitFrontEnd()

	init_charid();
	InitLex();
	InitCharData();
	InitOperator();

	nDict = 0;
	nLocal = 0;
	nNode = 0;

	nFile = 0;
	pFile = 0;

	@_Statements = @Statements;
	@_Ctrl       = @Ctrl;
	@_Expr       = @Expr;

	RegisterDigraph("!=");
	RegisterDigraph("<=");
	RegisterDigraph(">=");
	RegisterDigraph(":=");

	RegisterDigraph("/*");
	RegisterDigraph("//");
	RegisterComment("/*", "*/");
	RegisterComment("//", "~n");
	RegisterHereCommentPrefix("$comment");

	Word("include");
	Word("define");
	Word("struct");
	Word("synonym");
	Word("function");
	Word("external");
	Word("begin");
	Word("select");
	Word("case");
	Word("default");
	Word("if");
	Word("then");
	Word("else");
	Word("while");
	Word("do");
	Word("repeat");
	Word("until");
	Word("continue");
	Word("exit");
	Word("inc");
	Word("dec");
	Word("inline");
	Word("return");
	Word("null");
	Word("NULL");
	Word("end");
	Word("switch");
	Word("of");
	Word("when");
	Word("false");
	Word("true");

	st_void = Base("void", 0);
	st_char = Base("char", 1);
	st_byte = Base("byte", 1);
	st_word = Base("word", target_size_of_word);
	st_int  = Base("int" , target_size_of_int);
	st_bool = Base("bool", target_size_of_bool);

	RegisterOperators();

	strcpy(@Text,"");

	DefineWord("__CONTEXT2_VERSION_MAJOR__ ", 0);
	DefineWord("__CONTEXT2_VERSION_MINOR__ ", 1);
	DefineString("__CONTEXT2_VERSION_STR__", "0.1");
	DefineString("__TRANSLATOR__", @msgPRODUCT);
	DefineString("__TRANSLATOR_VERSION__", @msgVERSION);
	DefineString("__TRANSLATOR_HOST__", @__TRANSLATOR_TARGET__);

	select
	case TargetFileFormat = tPE:
		DefineString("__TRANSLATOR_TARGET__", "i386-win32-pe");
		strcat(@Text,"void ExitProcess(word uExitCode) external KERNEL32;");
	case TargetFileFormat = tELF:
		DefineString("__TRANSLATOR_TARGET__", "i386-linux-elf");
	default:
		StopInternal();
	end:select

	strcat(@Text,"  ");


	nText = strlen(@Text);
	pText = 0;
	CurrentFileInfo.Line = 1;
	CurrentFileInfo.Column = 1;
	@CurrentFileInfo.FileName = NULL;
	BeforeFirstFile = 1;

	pLoop = nNODE;

end

/*****************************************************************************/

