
/*
	Compile-Time Evaluations
*/

/* TODO: Вычислять в отдельном проходе по дереву. */

/*****************************************************************************/

void CTE(word P)

	word ID = Node[P].ID;
	word pLeft = Node[P].pLeft;
	word pRight = Node[P].pRight;

	if ID == iCAST then
		when Node[pLeft].ID != iLITERAL:
			return;

		select
		case Node[pLeft].pType == st_char:
			char Value = /*FIXME: reinterpret_cast here: */ char(Node[pLeft].Value);
			select
			case Node[P].pType == st_char:
				Node[P].ID    = iLITERAL;
				Node[P].Value = word(char(Value));
			case Node[P].pType == st_word:
				Node[P].ID    = iLITERAL;
				Node[P].Value = word(Value);
			case Node[P].pType == st_int:
				Node[P].ID    = iLITERAL;
				Node[P].Value = int(Value);
			end:select
		case Node[pLeft].pType == st_word:
			word Value = /*FIXME: reinterpret_cast here: */ word(Node[pLeft].Value);
			select
			case Node[P].pType == st_char:
				Node[P].ID    = iLITERAL;
				Node[P].Value = word(char(Value));
			case Node[P].pType == st_word:
				Node[P].ID    = iLITERAL;
				Node[P].Value = word(Value);
			case Node[P].pType == st_int:
				Node[P].ID    = iLITERAL;
				Node[P].Value = int(Value);
			end:select
		case Node[pLeft].pType == st_int:
			int Value = /*FIXME: reinterpret_cast here: */ int(Node[pLeft].Value);
			select
			case Node[P].pType == st_char:
				Node[P].ID    = iLITERAL;
				Node[P].Value = word(char(Value));
			case Node[P].pType == st_word:
				Node[P].ID    = iLITERAL;
				Node[P].Value = word(Value);
			case Node[P].pType == st_int:
				Node[P].ID    = iLITERAL;
				Node[P].Value = int(Value);
			end:select
		end:select
		return;
	end

	if ID == iDIV | ID == iMOD then
		if NodeHasImmediateValue(pRight) then
			if NodeGetImmediateValue(pRight) == 0 then
				Error(@eDIVZERO);
				AddFakeCast(Node[pRight].pType, @Node[P].pRight);
				pRight = Node[P].pRight;
			end
		end
	end

	when Node[pLeft].ID != iLITERAL | Node[pRight].ID != iLITERAL:
		return;

	select
	case ID == iADD:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 + v2);
		case Node[pLeft].pType == st_int:
			int v1 = Node[pLeft].Value;
			int v2 = Node[pRight].Value;
			NodeAssignInt(P, v1 + v2);
		end:select
	case ID == iSUB:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 - v2);
		case Node[pLeft].pType == st_int:
			int v1 = Node[pLeft].Value;
			int v2 = Node[pRight].Value;
			NodeAssignInt(P, v1 - v2);
		end:select
	case ID == iMUL:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 * v2);
		case Node[pLeft].pType == st_int:
			int v1 = Node[pLeft].Value;
			int v2 = Node[pRight].Value;
			NodeAssignInt(P, v1 * v2);
		end:select
	case ID == iDIV:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 / v2);
		case Node[pLeft].pType == st_int:
			int v1 = Node[pLeft].Value;
			int v2 = Node[pRight].Value;
			NodeAssignInt(P, v1 / v2);
		end:select
	case ID == iMOD:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 % v2);
		end:select
	end:select
end

/*****************************************************************************/
