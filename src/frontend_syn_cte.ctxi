
/*
	Compile-Time Evaluations
*/

/* TODO: Вычислять в отдельном проходе по дереву. */

/*****************************************************************************/

void CTE(word P)

	word ID = Node[P].ID;
	word pLeft = Node[P].pLeft;
	word pRight = Node[P].pRight;

	if ID == iCAST then
		select
		case Node[pLeft].ID == iCHAR:
			word Value = Node[pLeft].Value;
			select
			case Node[P].pType == st_char:
				Node[P].ID    = iCHAR;
				Node[P].Value = Value;
			case Node[P].pType == st_word:
				Node[P].ID    = iWORD;
				Node[P].Value = word( /*FIXME: reinterpret_cast here: */ char(Value));
			case Node[P].pType == st_int:
				Node[P].ID    = iINT;
				Node[P].Value = int( /*FIXME: reinterpret_cast here: */ char(Value));
			end:select
		case Node[pLeft].ID == iWORD:
			word Value = Node[pLeft].Value;
			select
			case Node[P].pType == st_char:
				Node[P].ID    = iCHAR;
				Node[P].Value = Value;
			case Node[P].pType == st_word:
				Node[P].ID    = iWORD;
				Node[P].Value = word( /*FIXME: reinterpret_cast here: */ char(Value));
			case Node[P].pType == st_int:
				Node[P].ID    = iINT;
				Node[P].Value = int( /*FIXME: reinterpret_cast here: */ char(Value));
			end:select
		case Node[pLeft].ID == iINT:
			word Value = Node[pLeft].Value;
			select
			case Node[P].pType == st_char:
				Node[P].ID    = iCHAR;
				Node[P].Value = Value;
			case Node[P].pType == st_word:
				Node[P].ID    = iWORD;
				Node[P].Value = word( /*FIXME: reinterpret_cast here: */ char(Value));
			case Node[P].pType == st_int:
				Node[P].ID    = iINT;
				Node[P].Value = int( /*FIXME: reinterpret_cast here: */ char(Value));
			end:select
		end:select
		return;
	end

	if ID == iDIV | ID == iMOD then
		if NodeHasImmediateValue(pRight) != 0 then
			if NodeGetImmediateValue(pRight) == 0 then
				Error(@eDIVZERO);
				AddFakeCast(Node[pRight].pType, @Node[P].pRight);
				pRight = Node[P].pRight;
			end
		end
	end

	when Node[pLeft].ID != Node[pRight].ID:
		return;

	select
	case ID == iADD:
		if Node[pLeft].ID == iWORD then
			Node[P].ID    = iWORD;
			Node[P].Value = Node[pLeft].Value + Node[pRight].Value;
		end
		if Node[pLeft].ID == iINT then
			Node[P].ID    = iINT;
			int v1 = Node[pLeft].Value;
			int v2 = Node[pRight].Value;
			Node[P].Value = v1 + v2;
		end
	case ID == iSUB:
		if Node[pLeft].ID == iWORD then
			Node[P].ID    = iWORD;
			Node[P].Value = Node[pLeft].Value - Node[pRight].Value;
		end
		if Node[pLeft].ID == iINT then
			Node[P].ID    = iINT;
			int v1 = Node[pLeft].Value;
			int v2 = Node[pRight].Value;
			Node[P].Value = v1 - v2;
		end
	case ID == iMUL:
		if Node[pLeft].ID == iWORD then
			Node[P].ID    = iWORD;
			Node[P].Value = Node[pLeft].Value * Node[pRight].Value;
		end
		if Node[pLeft].ID == iINT then
			Node[P].ID    = iINT;
			int v1 = Node[pLeft].Value;
			int v2 = Node[pRight].Value;
			Node[P].Value = v1 * v2;
		end
	case ID == iDIV:
		if Node[pLeft].ID == iWORD then
			Node[P].ID    = iWORD;
			Node[P].Value = Node[pLeft].Value / Node[pRight].Value;
		end
		if Node[pLeft].ID == iINT then
			Node[P].ID    = iINT;
			int v1 = Node[pLeft].Value;
			int v2 = Node[pRight].Value;
			Node[P].Value = v1 / v2;
		end
	case ID == iMOD:
		if Node[pLeft].ID == iWORD then
			Node[P].ID    = iWORD;
			Node[P].Value = Node[pLeft].Value % Node[pRight].Value;
		end
	end:select
end

/*****************************************************************************/
