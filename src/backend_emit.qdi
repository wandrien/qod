
/*
	Базовые функции для генерирования выходного файла.

*/

/*****************************************************************************/

void FlushOutput()
	if write(hText, @Text, nText) != nText then
		Stop(@eWRITEERR);
	end:if

	nText=0;
end

/*****************************************************************************/

void OpenOutput(char@ FileName)
	hText = create(@FileName);
	nText = 0;
end

/*****************************************************************************/

void CloseOutput()
	if nText > 0 then
		FlushOutput();
	end:if

	close(hText);
end

/*****************************************************************************/

word EmitDisabled = 0;

void DisableEmit()
	inc EmitDisabled;
end

void EnableEmit()
	dec EmitDisabled;
end

/*****************************************************************************/

/* Вывести в листинг символ. */
void EmitChar_(char C)
	if nText > nTEXT then
		StopInternal(__FILE__, __LINE__);
	end

	if nText == nTEXT then
		FlushOutput();
	end

	Text[nText] = C;
	inc  nText;
end

void EmitChar(char C)
	when EmitDisabled > 0:
		return;

	EmitChar_(C);
end

/*****************************************************************************/

/* Вывести в листинг строку. */
void EmitString(char @S)
	when EmitDisabled > 0:
		return;

	word I = 0;
	while S[I] != #0 do
		EmitChar_(S[I]);
		inc I;
	end
end

/*****************************************************************************/

void EmitStringIgnoreNewLines(char @S)
	when EmitDisabled > 0:
		return;

	word I = 0;
	while S[I] != #0 do
		char C = S[I];
		switch C of
		case '~r', '~n':
			EmitChar_(' ');
		default:
			EmitChar_(C);
		end:switch
		inc I;
	end
end

/*****************************************************************************/

/* Вывести в листинг переход на новую линию. */
void EmitNL()
	EmitString("~r~n");
end

/*****************************************************************************/

/* Вывести в листинг строку и следом переход на новую линию. */
void EmitStringNL(char @Inst)
	EmitString(@Inst);
	EmitNL();
end

/*****************************************************************************/

/* Если Label не равно 0, выводит метку Label. Следом выводит строку Inst и опциональный комментарий Comment. */
void EmitLine(LABEL @Label; char @Inst; char @Comment)
	when EmitDisabled > 0:
		return;

	when @Inst == NULL:
		@Inst = "";
	when @Comment == NULL:
		@Comment = "";

	if @Label != NULL then
		PHO_InvalidateRegs();
	else
		@Inst = @PHO_Optimize(@Inst);
	end:if

	when @Label == NULL & Inst[0] == #0 & Comment[0] == #0:
		return;

	when Inst[0] != #0 | @Label != NULL:
		MeaningfulFlags = 0;

	word C = 0;

	if @Label != NULL then
		EmitChar_('@'); inc C;

		char @P = @str(LabelGetValue(@Label));
		word I = 0;
		while P[I] != #0 do
			EmitChar_(P[I]); inc C;
			inc I;
		end:while

		EmitChar_(':'); inc C;
		EmitChar_(' '); inc C;
	end:if

	if Inst[0] != #0 then
		word I = 0;
		while Inst[I] != #0 do
			char Ch = Inst[I];

			switch Ch of
			case '~r', '~n':
				C = 0;
			default:
				while C < 8 do
					EmitChar_(' '); inc C;
				end:while
				inc C;
			end:switch

			EmitChar_(Ch);
			inc I;
		end
	end:if

	if Comment[0] != #0 then
		while C < 40 do
			EmitChar_(' '); inc C;
		end:while
		EmitString(" ; ");
		EmitStringIgnoreNewLines(@Comment);
	end:if

	EmitNL();
end

/*****************************************************************************/

void EmitLabel(LABEL @Label)
	when @Label == NULL: StopInternal(__FILE__, __LINE__);
	EmitLine(@Label, "", NULL);
end

void EmitLabelIfUsed(LABEL @Label)
	when LabelIsUsed(@Label):
		EmitLabel(@Label);
end

/*****************************************************************************/

void Emit(char @Inst)
	EmitLine(NULL, @Inst, NULL);
end

/*****************************************************************************/

SOURCELOCATION PrevSourceLocation;

void EmitWithSourceNote(char @Inst; word P)
	if P < nNODE & P > 0 & EmitSourceLineNotes != 0 then
		char Buff[nBUFF];
		SOURCELOCATION @SourceLocation = @Node[P].SourceLocation;
		if
			(@PrevSourceLocation.FileName != @SourceLocation.FileName |
			PrevSourceLocation.Line != SourceLocation.Line) &
			(int(SourceLocation.Line) != -1)
		then
			strcpy4(@Buff, "#line ", @SourceLocation.FileName, ":", @str(SourceLocation.Line));
			EmitLine(NULL, NULL, @Buff);
			PrevSourceLocation = SourceLocation;
		end:if
	end:if
	EmitLine(NULL, @Inst, NULL);
end

/*****************************************************************************/

char EmitTmpBuff[1024];

void EmitJumpToLabelWithComment(LABEL @Label; char @Comment)
	when !EmitDebugComments_Jumps:
		@Comment = NULL;
	LabelMarkUsed(@Label);
	EmitLine(NULL, @strcpy2(@EmitTmpBuff, "jmp     @", @str(LabelGetValue(@Label))), @Comment);
end

void EmitJumpToLabel(LABEL @Label)
	EmitJumpToLabelWithComment(@Label, NULL);
end

void EmitBranchToLabel(char @Condition; LABEL @Label)
	char @s = "";
	when Condition[1] == #0: @s = " ";
	LabelMarkUsed(@Label);
	Emit(@strcpy5(@EmitTmpBuff, "j", @Condition, @s, "     @", @str(LabelGetValue(@Label))));
end

/*****************************************************************************/

void EmitWithExprComment(char @Inst; char @Comment)
	when !EmitDebugComments_Expr:
		@Comment = NULL;
	EmitLine(NULL, @Inst, @Comment);
end

/*****************************************************************************/