
namespace DataEmitter of

/*****************************************************************************/

word EmitByteState;
word EmitByteBytesInLine = 0;

/*****************************************************************************/

void EmitByteReset()
	EmitByteBytesInLine = 0;

	select
		case EmitByteState == 1:
			EmitNL();
		case EmitByteState == 2:
			EmitChar('"');
			EmitNL();
	end

	EmitByteState = 0;
end

/*****************************************************************************/

void EmitByte(char c)

	char C[2];
	C[0] = c;
	C[1] = #0;

	word NewState;

	char Buff[30];
	Buff[0] = #0;

	if c < ' ' | c == '"' then
		NewState = 1;
	else
		NewState = 2;
	end

	select
		case EmitByteState == 0:
			select
				case NewState == 1:
					strcpy2(@Buff, "db ", @str(word(c)));
				case NewState == 2:
					strcpy2(@Buff, "db ~"", @C);
				default:
					StopInternalCodegen(__FILE__, __LINE__);
			end
		case EmitByteState == 1:
			select
				case NewState == 1:
					strcpy2(@Buff, ", ", @str(word(c)));
				case NewState == 2:
					strcpy2(@Buff, ", ~"", @C);
				default:
					StopInternalCodegen(__FILE__, __LINE__);
			end
		case EmitByteState == 2:
			select
				case NewState == 1:
					strcpy2(@Buff, "~", ", @str(word(c)));
				case NewState == 2:
					strcpy(@Buff, @C);
				default:
					StopInternalCodegen(__FILE__, __LINE__);
			end
		default:
			StopInternalCodegen(__FILE__, __LINE__);
	end

	EmitByteState = NewState;

	word I=0;
	while Buff[I]!=#0 do
		EmitChar(Buff[I]);
		inc  I;
	end

	inc EmitByteBytesInLine;
	select
	case EmitByteBytesInLine > 70 & word(c) < 0x80:
		EmitByteReset();
	case EmitByteBytesInLine > 50 & c == ' ':
		EmitByteReset();
	case EmitByteBytesInLine > 40 & c == '~n':
		EmitByteReset();
	end

end


/*****************************************************************************/


define RODATA_NR 30000;
char rodata[RODATA_NR];
word rodata_size;
word rodata_nr;

/*****************************************************************************/

int rodata_first_occurrence[256 * 256];

void Reset_rodata_first_occurrence()
	word i = 0;
	while i < countof(rodata_first_occurrence) do
		rodata_first_occurrence[i] = -1;
		inc i;
	end:while
end

void Register_rodata_first_occurrence(char @Fragment; word Len; word Offset)
	word j = 0;
	word c_prev = 255;
	while j < Len do
		word c_curr = word(Fragment[j]);
		word idx = c_prev * 256 + c_curr;
		c_prev = c_curr;
		if rodata_first_occurrence[idx] == -1 then
			rodata_first_occurrence[idx] = as_signed(Offset + j);
		end:if
		if rodata_first_occurrence[256 * 255 + c_curr] == -1 then
			rodata_first_occurrence[256 * 255 + c_curr] = as_signed(Offset + j);
		end:if
		inc j;
	end:while
end

/*****************************************************************************/

word EmitRODataFragment(word FirstChar; word Len)
	word i = 0;
	word j = 0;

	char @Fragment = @Char[FirstChar];

	if rodata_nr > 0 & Len > 0 then
		word L = word_min(Len, 32);
		word l = 0;
		int i1 = 0;
		word c_prev = 255;
		while l < L do
			word c_curr = word(Fragment[l]);
			word idx = c_prev * 256 + c_curr;
			c_prev = c_curr;
			int first_occurrence = rodata_first_occurrence[idx];
			if first_occurrence < 0 then
				when rodata_size > 0:
					i1 = as_signed(rodata_size - 1);
				exit;
			end:if
			first_occurrence = first_occurrence - as_signed(l);
			if first_occurrence > i1 then
				i1 = first_occurrence;
			end:if
			inc l;
		end:while
		i = as_unsigned(i1);
	end:if

	word offset = i;

	word rodata_sz = rodata_size;
	when rodata_nr < rodata_sz:
		rodata_sz = rodata_nr;

	while j < Len do

		if i >= rodata_sz then
			exit;
		end

		if Fragment[j] != rodata[i] then
			inc i;
			offset = i;
			j = 0;
		else
			inc i;
			inc j;
		end

	end

	if j == Len then
		return offset;
	end

	if rodata_size >= rodata_nr then
		offset = rodata_size;
		rodata_size = rodata_size + Len;
		j = 0;
		while j < Len do
			EmitByte(Fragment[j]);
			inc j;
		end
		return offset;
	end

	while j < Len do
		char c = Fragment[j];
		if rodata_size < rodata_nr then
			rodata[rodata_size] = c;
		end
		inc rodata_size;
		EmitByte(c);
		inc j;
	end

	if rodata_nr > 0 then
		Register_rodata_first_occurrence(@Fragment, Len, offset);
	end:if

	return offset;
end

/*****************************************************************************/

/*
	Выводит секцию неизменяемых данных и назначает смещения строкам для случая, когда строки располагаются в этой секции.
*/
void EmitROData()
	word RODataSize = 0;

	int curr_len = -1;
	int next_len = -1;
	word I;

	if RODataMergeMode == RODataMergeModeNone then
		rodata_nr = 0;
	else
		rodata_nr = RODATA_NR;
		Reset_rodata_first_occurrence();
	end


	if RODataMergeMode == RODataMergeModeAgressive then
		I = 0;
		while I < nDict do
			if (Dict[I].Class == CLASS.cLITERAL)
			&  Dict[I].RO
			&  T_IsPtr(Dict[I].pType)
			&  Dict[I].Used
			then
				int len = as_signed(Dict[I].nLiteralSize);
				when len < 0:
					StopInternalCodegen(__FILE__, __LINE__);
				next_len = int_max(next_len, len);
			end
			inc I;
		end
	end

	rodata_size = 0;


	Emit("~r~n@@ROLITERALS:");
	EmitByteReset();

	repeat
		curr_len = next_len;
		next_len = -1;
		I = 0;
		while I < nDict do
			if (Dict[I].Class == CLASS.cLITERAL)
			&  Dict[I].RO
			&  T_IsPtr(Dict[I].pType)
			&  Dict[I].Used
			then
				int len = as_signed(Dict[I].nLiteralSize);
				when len < 0:
					StopInternalCodegen(__FILE__, __LINE__);
				if len == curr_len | curr_len == -1 then
					EmitByteReset();
					Dict[I].Label = EmitRODataFragment(Dict[I].LiteralValue, word(len));
					RODataSize = word_max(RODataSize, Dict[I].Label + word(len));
				end
				if next_len < len & len < curr_len then
					next_len = len;
				end
			end
			inc I;
		end
	until next_len < 0;

	EmitByteReset();

	char Buff[nBUFF];
	EmitComment(@strcpy2(@Buff, "ROLITERALS size: ", @str(RODataSize)));
end

/*****************************************************************************/

/*
	Назначает смещения символьным строкам для случая, когда строки расположены в секции изменяемых данных.
*/
void AssignStringOffsets()
	word data_len = 0;
	word I = 0;
	while I < nDict do
		if (Dict[I].Class == CLASS.cLITERAL)
		&  !Dict[I].RO
		&  T_IsPtr(Dict[I].pType)
		&  Dict[I].Used
		then
			word len = Dict[I].nLiteralSize;
			Dict[I].Label = data_len;
			data_len = data_len + len;
		end:if
		inc I;
	end:while
end

/*****************************************************************************/

/*
	Выводит в листинг символьные строки для случая, когда строки размещаются в секции изменяемых данных.
	Смещения строк должны быть заполнены заранее.
*/
void EmitSection_Data_Strings(char @Buff)
	EmitStringNL("");
	Emit("~r~n@@RWLITERALS:");
	word data_len = 0;
	word I = 0;
	while I < nDict do
		if (Dict[I].Class == CLASS.cLITERAL)
		&  !Dict[I].RO
		&  T_IsPtr(Dict[I].pType)
		&  Dict[I].Used
		then
			word len = Dict[I].nLiteralSize;
			if Dict[I].Label != data_len then
				StopInternalCodegen(__FILE__, __LINE__);
			end:if
			data_len = data_len + len;
			EmitByteReset();
			word J = 0;
			while J < len do
				EmitByte(Char[Dict[I].LiteralValue + J]);
				inc J;
			end:while
		end:if
		inc I;
	end:while

	EmitByteReset();
end

/*****************************************************************************/

void EmitSection_Bss_Content(char @Buff; word D)
	EmitStringNL("");
	EmitStringNL("@@DATA:");
	EmitRes(@Buff, "b", D);
end

/*****************************************************************************/

void EmitSection_Data(char @Buff; word D)
	EmitStringNL("");
	EmitDataSectionStart(@Buff);
	EmitSection_Data_Strings(@Buff);
	if D != 0 & !IsBssEnabled() then
		EmitSection_Bss_Content(@Buff, D);
	end:if
	EmitDataSectionEnd(@Buff);
end

/*****************************************************************************/

void EmitSection_Bss(char @Buff; word D)
	if D != 0 & IsBssEnabled() then
		EmitStringNL("");
		EmitBssSectionStart(@Buff);
		EmitSection_Bss_Content(@Buff, D);
		EmitBssSectionEnd(@Buff);
	end:if
end

/*****************************************************************************/

void EmitPEImport(char @Buff)
	EmitNL();
	EmitStringNL("section ~".idata~" import data readable writeable");
	EmitNL();

	word FirstLabel = NewLabelValue();
	word LabelCount = 0;

	/* Таблица экспортируемых библиотек. */

	word I  = 0;
	while I<nDict do
		if Dict[I].Class == CLASS.cLIB & Dict[I].Used then
			word Label = NewLabelValue();
			inc LabelCount;
			when FirstLabel + LabelCount != Label: StopInternalCodegen(__FILE__, __LINE__);

			strcpy(@Buff, "dd      0, 0, 0, RVA @");
			strcat(@Buff, @str(Label));
			strcat(@Buff, ", RVA @");
			strcat(@Buff, @str(Dict[I].Label));
			Emit(@Buff);

		end:if

		inc I;
	end:while

	Emit("dd      0, 0, 0, 0, 0");



	/* Таблицы точек импорта. */

	I =0;
	while I<nDict do
		if Dict[I].Class == CLASS.cLIB & Dict[I].Used then
			EmitNL();

			word  J=0;
			while J<nDict do
				if Dict[J].Class == CLASS.cFUNC & Dict[J].Sub == SUBCLASS.sSYS & Dict[J].pNode == I & Dict[J].Used then

					word Label = NewLabelValue();
					inc LabelCount;
					when FirstLabel + LabelCount != Label: StopInternalCodegen(__FILE__, __LINE__);

					strcpy(@Buff, "@");
					strcat(@Buff, @str(Dict[J].Label));
					strcat(@Buff, "  dd      RVA @");
					strcat(@Buff, @str(Label));
					EmitStringNL(@Buff);
				end:if

				inc J;
			end:while

			Emit("dd      0");
		end:if

		inc I;
	end:while


	/* Имена библиотек. */

	EmitNL();

	word Label = FirstLabel + 1;
	I =0;
	while I<nDict do
		if Dict[I].Class == CLASS.cLIB & Dict[I].Used then
			LABEL L; LabelSetValue(@L, Label);
			EmitLabel(@L);
			EmitPhoSkip(@strcpy3(@Buff,"db     ~"",@DictGetName(I),".DLL~", 0"));
			inc Label;
		end:if

		inc I;
	end:while


	/* Имена функций. */

	I =0;
	while I<nDict do
		if Dict[I].Class == CLASS.cLIB & Dict[I].Used then
			EmitNL();

			word  J=0;
			while J<nDict do
				if Dict[J].Class == CLASS.cFUNC & Dict[J].Sub == SUBCLASS.sSYS & Dict[J].pNode == I & Dict[J].Used then
					LABEL L; LabelSetValue(@L, Label);
					EmitLabel(@L);
					EmitPhoSkip("dw      0");
					EmitPhoSkip(@strcpy3(@Buff,"db     ~"",@DictGetName(J),"~", 0"));
					inc Label;
				end:if

				inc J;
			end:while
		end:if

		inc I;
	end:while

	EmitNL();
	EmitStringNL("section ~".reloc~" fixups data readable discardable");
end

/*****************************************************************************/

end:namespace

alias EmitROData = DataEmitter.EmitROData;
alias AssignStringOffsets = DataEmitter.AssignStringOffsets;
alias EmitSection_Data = DataEmitter.EmitSection_Data;
alias EmitSection_Bss = DataEmitter.EmitSection_Bss;
alias EmitPEImport = DataEmitter.EmitPEImport;
