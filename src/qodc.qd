include "include/hosted.qdi";

include_when "messages_utf8.qdi", qod.env.__LINUX__;
include_when "messages_cp866.qdi", qod.env.__WIN32__;

word val(char @Buff);

include "compiler_htl_defines.qdi";
include "compiler_htl_structs.qdi";
include "compiler_str.qdi";
include "compiler_foc.qdi";
include "compiler_config.qdi";
include "compiler_msg.qdi";
include "compiler_chardata.qdi";
include "compiler_input.qdi";
include "compiler_dict.qdi";
include "compiler_node.qdi";
include "compiler_option.qdi";

include "frontend_config.qdi";
include "backend_config.qdi";

include "version.qdi";

include "frontend.qdi";
include "backend.qdi";

/*****************************************************************************/

/* Вывод отладочных сообщений и сообщений об ошибках. */

void Dbg (char @Msg)
	puts("~r~n");
	puts(@Msg);
	puts("~r~n");
end

/*****************************************************************************/

void PrintVersionAndCopyright()
	puts(@msgPRODUCT);
	puts(" Version ");
	puts(@msgVERSION);
	puts("~r~n");
	puts(@msgCOPYRIGHT);
end

/*****************************************************************************/

void PrintUsage()
	PrintVersionAndCopyright();
	puts(@L10n.msgUSAGE);
	puts(@L10n.msgFFLAGS);
	CompilerOptions.PrintOptionSummary(@puts);
	puts(@L10n.msgUSAGE2);
end

/*****************************************************************************/

char @GetDefaultTarget()
	when qod.env.__LINUX__ :
		return "--linux";
	attribute(maybe_unreachable)
	when qod.env.__WIN32__:
		return "--win32-c";
	attribute(ensure_unreachable) pass;
end

/*****************************************************************************/

char@ GetArg(word I; char@ ErrMsg)

	ARGS@ args = @GetProgramArgs();

	if I >= args.argc then
		if @ErrMsg == NULL then
			StopInternal(__FILE__, __LINE__);
		else
			Stop(@ErrMsg);
		end
	end:if

	return @args.argv[I].arg;
end

/*****************************************************************************/

char@ GetArgNext(word@ I; char@ ErrMsg)
	inc I;
	return @GetArg(I, @ErrMsg);
end

/*****************************************************************************/

void SetupTarget(char@ Target)
	select
	case str_eq(@Target, "--linux"  ):
		TargetFileFormat = TARGET_FORMAT.tELF;
		TargetMode = TARGET_MODE.mNONE;
	case str_eq(@Target, "--win32-c"):
		TargetFileFormat = TARGET_FORMAT.tPE;
		TargetMode = TARGET_MODE.mCON;
	case str_eq(@Target, "--win32-w"):
		TargetFileFormat = TARGET_FORMAT.tPE;
		TargetMode = TARGET_MODE.mGUI;
	default:
		StopInternal(__FILE__, __LINE__);
	end:select
end

/*****************************************************************************/

void SetupOptimization(char@ Mode)
	select
	case str_eq(@Mode, "size"):
		RODataMergeMode = RODataMergeModeAgressive;
		PHOptimization  = true;
		ReorderOperands = true;
		SeparateColdSection = false;
		AutodetectColdBranches = false;
		SwOptionsNormal.OmitRedundantFramePointer = true;
		SwOptionsNormal.EmitEnterInstruction = true;
		SwOptionsNormal.EmitLeaveInstruction = true;
		SwOptionsNormal.EmitShortCode = true;
		SwOptionsNormal.EmitFastMult = false;
		SwOptionsNormal.AlignFunctions = 0;
		SwOptionsNormal.AlignLoops = 0;
		SwOptionsNormal.SeparateColdBranches = false;
		SwOptionsCold = SwOptionsNormal;
		SwOptionsHot = SwOptionsNormal;
	case str_eq(@Mode, "speed"):
		RODataMergeMode = RODataMergeModeNormal;
		PHOptimization  = true;
		ReorderOperands = true;
		SeparateColdSection = true;
		AutodetectColdBranches = true;
		SwOptionsNormal.OmitRedundantFramePointer = true;
		SwOptionsNormal.EmitEnterInstruction = false;
		SwOptionsNormal.EmitLeaveInstruction = true;
		SwOptionsNormal.EmitShortCode = false;
		SwOptionsNormal.EmitFastMult = true;
		SwOptionsNormal.AlignFunctions = 0;
		SwOptionsNormal.AlignLoops = 0;
		SwOptionsNormal.SeparateColdBranches = true;
		SwOptionsCold = SwOptionsNormal;
		SwOptionsHot = SwOptionsNormal;
		SwOptionsCold.EmitEnterInstruction = true;
		SwOptionsCold.EmitLeaveInstruction = true;
		SwOptionsCold.EmitShortCode = true;
		SwOptionsCold.EmitFastMult = false;
		SwOptionsCold.SeparateColdBranches = false;
		SwOptionsHot.AlignFunctions = 32;
		SwOptionsHot.AlignLoops = 32;
	default:
		RODataMergeMode = RODataMergeModeNone;
		PHOptimization  = false;
		ReorderOperands = true;
		SeparateColdSection = false;
		AutodetectColdBranches = false;
		SwOptionsNormal.OmitRedundantFramePointer = false;
		SwOptionsNormal.EmitEnterInstruction = false;
		SwOptionsNormal.EmitLeaveInstruction = true;
		SwOptionsNormal.EmitShortCode = false;
		SwOptionsNormal.EmitFastMult = false;
		SwOptionsNormal.AlignFunctions = 0;
		SwOptionsNormal.AlignLoops = 0;
		SwOptionsNormal.SeparateColdBranches = false;
		SwOptionsCold = SwOptionsNormal;
		SwOptionsHot = SwOptionsNormal;
	end:select
end

/*****************************************************************************/

void SetupAssembler(char@ Mode)
	select
	case str_eq(@Mode, "fasm"):
		TargetAssembler = ASM_MODE.aFASM;
	case str_eq(@Mode, "nasm"):
		TargetAssembler = ASM_MODE.aNASM;
	default:
		Stop(@L10n.eWRONGOPTION);
	end:select
end

/*****************************************************************************/

termination_status main() of
	char@ InputFile = NULL;
	char@ OutputFile = NULL;
	char@ OutputTreeFile = NULL;
	char@ OutputIncludeListFile = NULL;

	RegisterBackendOptions();

	SetupTarget(@GetDefaultTarget());
	SetupOptimization("none");

	ARGS@ args = @GetProgramArgs();

	word i = 1;
	while i < args.argc do
		char@ arg = @GetArg(i, NULL);
		select
		case str_eq(@arg, "--help"   ):
			PrintUsage();
			return 0;
		case str_eq(@arg, "--version"):
			PrintVersionAndCopyright();
			return 0;
		case str_eq(@arg, "--dump-flags"):
			CompilerOptions.PrintOptionValues(@puts, "");
			return 0;
		case str_eq(@arg, "--linux"  )
		   | str_eq(@arg, "--win32-c")
		   | str_eq(@arg, "--win32-w"):
			SetupTarget(@arg);
		case str_eq(@arg, "--output" ):
			@OutputFile = @GetArgNext(@i, @L10n.eFNAMEEXP);
		case str_eq(@arg, "--output-tree" ):
			@OutputTreeFile = @GetArgNext(@i, @L10n.eFNAMEEXP);
		case str_eq(@arg, "--output-include-list" ):
			@OutputIncludeListFile = @GetArgNext(@i, @L10n.eFNAMEEXP);
		case str_eq(@arg, "--asm" ):
			SetupAssembler(@GetArgNext(@i, @L10n.eCMDLINEPARAM));
		case str_eq(@arg, "--file" ):
			@InputFile = @GetArgNext(@i, @L10n.eFNAMEEXP);
		case str_eq(@arg, "--show-parse-progress" ):
			show_parse_progress = 1;
		case str_eq(@arg, "--optimize" ):
			SetupOptimization(@GetArgNext(@i, @L10n.eCMDLINEPARAM));
		case str_eq(@arg, "--warn-unused-globals" ):
			WarnUnusedGlobals = true;
		case str_eq(@arg, "--error-deprecated-features" ):
			ErrorDeprecatedFeatures = 1;
		case str_eq(@arg, "--no-error-deprecated-features" ):
			ErrorDeprecatedFeatures = 0;
		case str_eq(@arg, "--emit-source-line-notes" ):
			EmitSourceLineNotes = true;
		case CompilerOptions.ParseOption(@arg):
			pass;
		case str_has_prefix(@arg, "-"):
			ErrorWithSubject(@L10n.eWRONGOPTION, @arg);
		default:
			@InputFile = @GetArg(i, @L10n.eFNAMEEXP);
		end:select
		inc i;
	end:while

	when HasErrors:
		return 1;

	if @InputFile == NULL then
		Error(@L10n.eNOINPUTFILES);
		return 1;
	end

	char Name[nBUFF];

	if @OutputFile == NULL then
		word l = strlen(@InputFile);
		if l + 4 >= nBUFF then
			Stop(@L10n.eLONGFILENAME);
		end:if
		strcat(@strcpy(@Name, @InputFile), ".asm");
		@OutputFile = @Name;
	end:if

	word pStartFunc = ProcessSourceFile(@InputFile);
	word ExitCode = Compile(
		pStartFunc,
		@OutputFile,
		@OutputTreeFile,
		@OutputIncludeListFile
	);
	ShowParseProgress(1);
	return termination_status(ExitCode);
end

/*****************************************************************************/
