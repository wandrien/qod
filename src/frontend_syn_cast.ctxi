
/*****************************************************************************/

word CanExplicitCast(word To; word From)

	if(To=st_char & From=st_byte)
	| (To=st_char & From=st_word)
	| (To=st_char & From=st_int )
	| (To=st_byte & From=st_char)
	| (To=st_word & From=st_char)
	| (To=st_int  & From=st_char) then
		return 1;
	end:if

	return 0;
end

/*****************************************************************************/

void AddCast(word pType1; word @P)

	/* FIXME: Эта ветка должна быть частью подсистемы CTE. */
	if pType1=st_int & Node[P].ID=iWORD then
		Node[P].ID=iINT;
		return;
	end

	word P1 = Peek();
	word P2 = Peek();
	Node[P1].ID    = iCAST;
	Node[P1].pType = pType1;
	Node[P1].pLeft = P2;

	Node[P2].ID    = iEMPTY;
	Node[P2].pLeft = P;

	P = P1;
end

/*****************************************************************************/

void Test(word pType1; word pType2; word @P)
	select
	case pType1=pType2:
		return;

	case pType1=st_byte & pType2=st_word:
		return;

	case pType1=st_byte & pType2=st_int:
		return;

	case pType1=st_word & pType2=st_byte:
		AddCast(pType1, @P);
		return;

	case pType1=st_word & pType2=st_int:
		return;

	case pType1=st_int & pType2=st_byte:
		AddCast(pType1, @P);
		return;

	case pType1=st_int & pType2=st_word:
		return;

	case Dict[pType1].Sub=sFUNCTYPE & Dict[pType2].Sub=sFUNCTYPE:
		when T_IsFuctTypesIdentical(pType1, pType2) = 1:
			return;

	case T_IsPtr(pType1) = 1 & T_IsPtr(pType2) = 1:
		when pType1 = T_PtrTo(st_void):
			return;
		when pType2 = T_PtrTo(st_void):
			return;
		Test(T_DerefPtr(pType1), T_DerefPtr(pType2), @P);
		return;
	end:select

	Stop(@eTYPE);
end

/*****************************************************************************/

void ImplicitCast(word pType1; word @P)
	Test(pType1, Node[P].pType, @P);
end

/*****************************************************************************/
