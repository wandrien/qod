
/*****************************************************************************/

void AddFakeCast(word pType1; word @P)

	word P1 = Peek();
	Node[P1].ID    = iFAKE_CAST;
	Node[P1].pType = pType1;
	Node[P1].pLeft = P;

	P = P1;
end

/*****************************************************************************/

void AddCast(word pType1; word @P)

	/* FIXME: Эта ветка должна быть частью подсистемы CTE. */
	if pType1 == st_int & Node[P].ID == iLITERAL & Node[P].pType == st_word then
		Node[P].pType = pType1;
		return;
	end

	word P1 = Peek();
	Node[P1].ID    = iCAST;
	Node[P1].pType = pType1;
	Node[P1].pLeft = P;

	P = P1;

	_CTE(P);
end

/*****************************************************************************/

void AddImplicitCast(word pTypeTo; word @P)
	when Node[P].pType != pTypeTo:
		AddCast(pTypeTo, @P);
end

/*****************************************************************************/

bool IsImplicitCastPossible(word pTypeFrom; word pTypeTo)

	select
	case pTypeFrom == pTypeTo:
		return true;
	case T_IsPtr(pTypeFrom) & T_IsPtr(pTypeTo):
		when pTypeFrom == T_PtrTo(st_void):
			return true;
		when pTypeTo == T_PtrTo(st_void):
			return true;
		word pTypeDerefFrom = T_DerefPtr(pTypeFrom);
		word pTypeDerefTo = T_DerefPtr(pTypeTo);
		when T_IsFuctTypesIdentical(pTypeDerefFrom, pTypeDerefTo):
			return true;
	case T_IsInteger(pTypeFrom) & T_IsInteger(pTypeTo):
		if T_IsSigned(pTypeFrom) == T_IsSigned(pTypeTo) then
			when T_SizeOf(pTypeFrom) <= T_SizeOf(pTypeTo):
				return true;
		end:if

		/* HACK: temporary rules to make self-compilation possible */
		when pTypeFrom == st_word & pTypeTo == st_int:
			return true;

		when pTypeFrom == st_int & pTypeTo == st_word:
			return true;

		when pTypeFrom == st_word & pTypeTo == st_byte:
			return true;
		/* END HACK */
	end:select

	return false;
end

/*****************************************************************************/

void ImplicitCast(word pTypeTo; word @P)
	when !IsImplicitCastPossible(Node[P].pType, pTypeTo):
		Stop(@eTYPE);

	AddImplicitCast(pTypeTo, @P);
end

/*****************************************************************************/

bool IsExplicitCastPossible(word From; word To)
	when IsImplicitCastPossible(From, To):
		return true;

	when T_IsInteger(From) & T_IsInteger(To):
		return true;

	when T_IsInteger(From) & (To == st_char):
		return true;

	when (From == st_char) & T_IsInteger(To):
		return true;

	when T_IsPtr(From) & (To == st_intptr | To == st_uintptr):
		return true;

	return false;
end
