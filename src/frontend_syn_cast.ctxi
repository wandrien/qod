
/*****************************************************************************/

void AddFakeCast(word pType1; word @P)

	word P1 = Peek();
	Node[P1].ID    = iFAKE_CAST;
	Node[P1].pType = pType1;
	Node[P1].pLeft = P;

	P = P1;
end

/*****************************************************************************/

void AddCast(word pType1; word @P)

	/* FIXME: Эта ветка должна быть частью подсистемы CTE. */
	if pType1 == st_int & Node[P].ID == iWORD then
		Node[P].ID=iINT;
		Node[P].pType = pType1;
		return;
	end

	word P1 = Peek();
	Node[P1].ID    = iCAST;
	Node[P1].pType = pType1;
	Node[P1].pLeft = P;

	P = P1;
end

/*****************************************************************************/

void AddImplicitCast(word pTypeTo; word @P)
	when Node[P].pType != pTypeTo:
		AddCast(pTypeTo, @P);
end

/*****************************************************************************/

word IsImplicitCastPossible(word pTypeFrom; word pTypeTo)

	select
	case pTypeFrom == pTypeTo:
		return 1;
	case T_IsPtr(pTypeFrom) == 1 & T_IsPtr(pTypeTo) == 1:
		when pTypeFrom == T_PtrTo(st_void):
			return 1;
		when pTypeTo == T_PtrTo(st_void):
			return 1;
		word pTypeDerefFrom = T_DerefPtr(pTypeFrom);
		word pTypeDerefTo = T_DerefPtr(pTypeTo);
		when T_IsFuctTypesIdentical(pTypeDerefFrom, pTypeDerefTo) == 1:
			return 1;
	case T_IsInteger(pTypeFrom) == 1 & T_IsInteger(pTypeTo) == 1:
		if T_IsSigned(pTypeFrom) == T_IsSigned(pTypeTo) then
			when T_SizeOf(pTypeFrom) <= T_SizeOf(pTypeTo):
				return 1;
		end:if

		/* HACK: temporary rules to make self-compilation possible */
		when pTypeFrom == st_word & pTypeTo == st_int:
			return 1;

		when pTypeFrom == st_int & pTypeTo == st_word:
			return 1;

		when pTypeFrom == st_word & pTypeTo == st_byte:
			return 1;
		/* END HACK */
	end:select

	return 0;
end

/*****************************************************************************/

void ImplicitCast(word pTypeTo; word @P)
	when IsImplicitCastPossible(Node[P].pType, pTypeTo) == 0:
		Stop(@eTYPE);

	AddImplicitCast(pTypeTo, @P);
end

/*****************************************************************************/

word IsExplicitCastPossible(word From; word To)
	when IsImplicitCastPossible(From, To) == 1:
		return 1;

	when T_IsInteger(From) == 1 & T_IsInteger(To) == 1:
		return 1;

	when T_IsInteger(From) == 1 & To == st_char:
		return 1;

	when From == st_char & T_IsInteger(To) == 1:
		return 1;

	return 0;
end
