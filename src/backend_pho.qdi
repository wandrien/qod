

/*****************************************************************************/

define PHO_REG_INVALID 0
define PHO_REGS 4
define PHO_FIRST_REG 1

struct PHO_STATE of
	word PHO_ValidRegConst[PHO_REGS + 1];
	word PHO_RegConst[PHO_REGS + 1];
	word PHO_RegNodeLink1[PHO_REGS + 1];
	word PHO_RegNodeLink2[PHO_REGS + 1];
end:struct

PHO_STATE PhoState;

/*****************************************************************************/

void PHO_SaveState(PHO_STATE @State)
	when !PHOptimization:
		return;
	State = PhoState;
end

void PHO_RestoreState(PHO_STATE @State)
	when !PHOptimization:
		return;
	PhoState = State;
end

/*****************************************************************************/

char@ PHO_RegName(word Reg)
	char @S;

	select
	case Reg == 1: @S = "EAX";
	case Reg == 2: @S = "EBX";
	case Reg == 3: @S = "ECX";
	case Reg == 4: @S = "EDX";
	default:
		StopInternal(__FILE__, __LINE__);
	end:select

	return @S;
end

/*****************************************************************************/

void PHO_InvalidateRegNodeLink(word R)
	PhoState.PHO_RegNodeLink1[R] = nNODE;
	PhoState.PHO_RegNodeLink2[R] = nNODE;
end

void PHO_InvalidateReg(word R)
	if R >= (PHO_FIRST_REG + PHO_REGS) then
		StopInternal(__FILE__, __LINE__);
	end:if

	PHO_InvalidateRegNodeLink(R);

	if PhoState.PHO_ValidRegConst[R] != 0 then
		char Buff[nBUFF]; Buff[0] = #0;
		when EmitDebugComments_PHO:
			strcpy2(@Buff, "PHO: Invalidate: ", @PHO_RegName(R));
		EmitComment(@Buff);

		PhoState.PHO_ValidRegConst[R] = 0;
	end:if
end

/*****************************************************************************/

void PHO_InvalidateRegs()
	word i = PHO_FIRST_REG;
	while i < PHO_FIRST_REG + PHO_REGS do
		PHO_InvalidateReg(i);
		inc i;
	end:while
end

/*****************************************************************************/

void PHO_InvalidateRegNodeLinks()
	word i = PHO_FIRST_REG;
	while i < PHO_FIRST_REG + PHO_REGS do
		PHO_InvalidateRegNodeLink(i);
		inc i;
	end:while
end

/*****************************************************************************/

bool PHO_RegContainsAConst(word R)
	if R >= PHO_FIRST_REG + PHO_REGS then
		StopInternal(__FILE__, __LINE__);
	end:if
	if PhoState.PHO_ValidRegConst[R] != 0 then
		return true;
	end:if
	return false;
end

/*****************************************************************************/

bool PHO_RegContainsConst(word R; word Data)
	if R >= PHO_FIRST_REG + PHO_REGS then
		StopInternal(__FILE__, __LINE__);
	end:if
	if PhoState.PHO_ValidRegConst[R] != 0 & PhoState.PHO_RegConst[R] == Data then
		return true;
	end:if
	return false;
end

/*****************************************************************************/

word PHO_FindRegWithConst(word Data)
	word i = PHO_FIRST_REG;
	while i < PHO_FIRST_REG + PHO_REGS do
		if PHO_RegContainsConst(i, Data) then
			return i;
		end:if
		inc i;
	end:while
	return PHO_REG_INVALID;
end

/*****************************************************************************/

void PHO_RegConnectConst(word R; word Data)
	when !PHOptimization:
		return;

	if R >= PHO_FIRST_REG + PHO_REGS then
		StopInternal(__FILE__, __LINE__);
	end:if

	if (PhoState.PHO_ValidRegConst[R] == 0) | (PhoState.PHO_RegConst[R] != Data) then
		char Buff[nBUFF]; Buff[0] = #0;
		when EmitDebugComments_PHO:
			strcpy4(@Buff, "PHO: Constant: ", @PHO_RegName(R), " = ", @str(Data));
		EmitComment(@Buff);
	end:if

	PhoState.PHO_ValidRegConst[R] = 1;
	PhoState.PHO_RegConst[R] = Data;
end

void PHO_RegLoadConst(word R; word Data)
	PHO_RegConnectConst(R, Data);
	PHO_InvalidateRegNodeLink(R);
end

/*****************************************************************************/

char@ PHO_EncodeReg(word Reg; word Mask)
	word r = Reg, m = Mask;

	char @S;

	select
	case r == 1 & m == 0xFFFF_FFFF: @S = "EAX";
	case r == 2 & m == 0xFFFF_FFFF: @S = "EBX";
	case r == 3 & m == 0xFFFF_FFFF: @S = "ECX";
	case r == 4 & m == 0xFFFF_FFFF: @S = "EDX";
	case r == 1 & m == 0x0000_FFFF: @S = "AX" ;
	case r == 2 & m == 0x0000_FFFF: @S = "BX" ;
	case r == 3 & m == 0x0000_FFFF: @S = "CX" ;
	case r == 4 & m == 0x0000_FFFF: @S = "DX" ;
	case r == 1 & m == 0x0000_00FF: @S = "AL" ;
	case r == 2 & m == 0x0000_00FF: @S = "BL" ;
	case r == 3 & m == 0x0000_00FF: @S = "CL" ;
	case r == 4 & m == 0x0000_00FF: @S = "DL" ;
/*
	case str_has_prefix(@S, "AH" ) != 0: StopInternal(__FILE__, __LINE__);
	case str_has_prefix(@S, "BH" ) != 0: StopInternal(__FILE__, __LINE__);
	case str_has_prefix(@S, "CH" ) != 0: StopInternal(__FILE__, __LINE__);
	case str_has_prefix(@S, "DH" ) != 0: StopInternal(__FILE__, __LINE__);
*/
	default:
		StopInternal(__FILE__, __LINE__);
	end:select

	return @S;
end

/*****************************************************************************/

/*
	Декодирует обозначение регистра в начале строки @S.
	Распознаются регистры A, B, C и D в режимах E*X, *X и *L.
	Если регистр успешно декодирован, в @Reg пишет номер регистра, в @Mask - маску значащих бит
	и возвращает ненулевое значение.
	Если регистр распознать не удалось, возвращает 0.
	Для регистров в режиме *H выдаёт сообщение о внутренней ошибке и завершает работу программы,
	поскольку с таким режимом работать мы (пока) не умеем.
*/
word PHO_DecodeReg(char @S; word @Reg; word @Mask)

	word r, m;

	select
	case str_has_prefix(@S, "EAX"): r = 1; m = 0xFFFF_FFFF;
	case str_has_prefix(@S, "EBX"): r = 2; m = 0xFFFF_FFFF;
	case str_has_prefix(@S, "ECX"): r = 3; m = 0xFFFF_FFFF;
	case str_has_prefix(@S, "EDX"): r = 4; m = 0xFFFF_FFFF;
	case str_has_prefix(@S, "AX" ): r = 1; m = 0x0000_FFFF;
	case str_has_prefix(@S, "BX" ): r = 2; m = 0x0000_FFFF;
	case str_has_prefix(@S, "CX" ): r = 3; m = 0x0000_FFFF;
	case str_has_prefix(@S, "DX" ): r = 4; m = 0x0000_FFFF;
	case str_has_prefix(@S, "AL" ): r = 1; m = 0x0000_00FF;
	case str_has_prefix(@S, "BL" ): r = 2; m = 0x0000_00FF;
	case str_has_prefix(@S, "CL" ): r = 3; m = 0x0000_00FF;
	case str_has_prefix(@S, "DL" ): r = 4; m = 0x0000_00FF;
	case str_has_prefix(@S, "AH" ): r = 1; m = 0x0000_FF00;
	case str_has_prefix(@S, "BH" ): r = 2; m = 0x0000_FF00;
	case str_has_prefix(@S, "CH" ): r = 3; m = 0x0000_FF00;
	case str_has_prefix(@S, "DH" ): r = 4; m = 0x0000_FF00;
	default:
		return 0;
	end:select

	Reg  = r;
	Mask = m;

	return 1;

end

/*****************************************************************************/

/* Returns 1 if replacement found and placed into Buff. */
word PHO_Optimize_FindReplacement(char @Buff; word Reg1; word Mask1; word Const2)
	bool Reg1HasConst = PHO_RegContainsAConst(Reg1);
	word Reg1Const = PhoState.PHO_RegConst[Reg1];

	/* Shortest options first. */
	if Reg1HasConst then
		select
		case Reg1Const == Const2:
			strcpy(@Buff, ""); /* 0 bytes */
			return 1;
		case Reg1Const == Const2 + 1:
			strcpy(@Buff, "dec     "); /* 1 or 2 bytes */
			strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
			return 1;
		case Reg1Const == Const2 - 1:
			strcpy(@Buff, "inc     "); /* 1 or 2 bytes */
			strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
			return 1;
		end:select
	end:if

	/* XOR is short and doesn't depend on other values, so it's a good choice */
	if Const2 == 0 then
		strcpy(@Buff, "xor     "); /* 2 bytes */
		strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
		strcat(@Buff, ",  ");
		strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
		return 1;
	end:if

	/* Back to the options that depend on the previous value of the register */
	if Reg1HasConst then
		select
		case Reg1Const == !Const2:
			strcpy(@Buff, "not     "); /* 2 bytes */
			strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
			return 1;
		case Reg1Const == word(-Const2):
			strcpy(@Buff, "neg     "); /* 2 bytes */
			strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
			return 1;
		case ((Const2 & 1) == 0) & (Reg1Const == (Const2 / 2)):
			strcpy(@Buff, "add     "); /* 2 bytes */
			strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
			strcat(@Buff, ",  ");
			strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
			return 1;
		end:select
	end:if

	/* Check if another register has the same constant. */
	word RegC = PHO_FindRegWithConst(Const2);
	if RegC != PHO_REG_INVALID then
		strcpy(@Buff, "mov     "); /* 2 bytes */
		strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
		strcat(@Buff, ",  ");
		strcat(@Buff, @PHO_EncodeReg(RegC, Mask1));
		return 1;
	end:if

	/* Now check for Reg1 = Reg1 + <signed char>. This gives a 3-byte instuction. */
	if Reg1HasConst then
		/*
			We trying to do <ADD reg, -diff> and <SUB reg, -diff> instead of
			<ADD reg, +diff> and <SUB reg, +diff>, since the biggest negative value
			is -128 and positive one is just 127.
		*/
		word Diff = Const2 - Reg1Const;
		if Diff <= 128 then
			strcpy(@Buff, "sub     "); /* 3 bytes */
			strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
			strcat(@Buff, ", -");
			strcat(@Buff, @str(Diff));
			return 1;
		end:if

		Diff = Reg1Const - Const2;
		if Diff <= 128 then
			strcpy(@Buff, "add     "); /* 3 bytes */
			strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
			strcat(@Buff, ", -");
			strcat(@Buff, @str(Diff));
			return 1;
		end:if
	end:if

	/* <PUSH imm> + <POP reg> takes 3 bytes for short imms. */
	if EmitShortCode & Mask1 == 0xFFFF_FFFF then
		if (Const2 <= 127) & (int(Const2) >= -128) then
			strcpy(@Buff, "push    ");
			strcat(@Buff, @str(Const2));
			strcat(@Buff, "~r~n");
			strcat(@Buff, "pop     ");
			strcat(@Buff, @PHO_EncodeReg(Reg1, Mask1));
			return 1;
		end:if
	end:if

	return 0;
end

define opINVALIDATE  0
define opMOV         1
define opADD         2
define opSUB         3
define opMUL         4
define opIMUL        5
define opAND         6
define opOR          7
define opXOR         8
define opINVALIDATE_REG 9
define opNOP        10

bool PHO_MatchBranchSuffix(char @Suffix)
	return
		  str_has_prefix(@Suffix, "l ")
		| str_has_prefix(@Suffix, "le")
		| str_has_prefix(@Suffix, "e ")
		| str_has_prefix(@Suffix, "ne")
		| str_has_prefix(@Suffix, "ge")
		| str_has_prefix(@Suffix, "g ")
		| str_has_prefix(@Suffix, "s ")
		| str_has_prefix(@Suffix, "ns")
		| str_has_prefix(@Suffix, "b ")
		| str_has_prefix(@Suffix, "be")
		| str_has_prefix(@Suffix, "ae")
		| str_has_prefix(@Suffix, "a ")
		| str_has_prefix(@Suffix, "z ")
		| str_has_prefix(@Suffix, "nz")
	;
end

word PHO_ClassifyInst(char @Inst)
	select
	case str_has_prefix(@Inst, "mov "): return opMOV;
	case str_has_prefix(@Inst, "imul "): return opIMUL;
	case str_has_prefix(@Inst, "mul "): return opMUL;
	case str_has_prefix(@Inst, "sub "): return opSUB;
	case str_has_prefix(@Inst, "add "): return opADD;
	case str_has_prefix(@Inst, "and "): return opAND;
	case str_has_prefix(@Inst, "or "): return opOR;
	case str_has_prefix(@Inst, "xor "): return opXOR;
	case str_has_prefix(@Inst, "pop "): return opINVALIDATE_REG;
	case str_has_prefix(@Inst, "lea "): return opINVALIDATE_REG;
	case str_has_prefix(@Inst, "set"):
		if PHO_MatchBranchSuffix(@Inst[4]) then
				return opINVALIDATE_REG;
		end:if
	case
	  str_has_prefix(@Inst, "movzx")
	| str_has_prefix(@Inst, "movsx"):
		return opINVALIDATE_REG;
	case
	  str_has_prefix(@Inst, "push")
	| str_has_prefix(@Inst, "cmp" )
	| str_has_prefix(@Inst, "test"):
		return opNOP;
	case Inst[0] == 'j':
		if PHO_MatchBranchSuffix(@Inst[1]) then
				return opNOP;
		end:if
	end:select

	return opINVALIDATE;
end


char PHO_Buff[256];

char@ PHO_Optimize_(char @Inst)
	when !PHOptimization:
		return @Inst;

	/* Для пустой строки ничего не делаем. */
	if strlen(@Inst[str_skip_chars(@Inst, " ~t")]) == 0 then
		return @Inst;
	end:if

	/* FIXME: Add support of shl and shr */
	word operation = PHO_ClassifyInst(@Inst);
	switch operation of
	case opNOP:
		return @Inst;
	case opINVALIDATE:
		PHO_InvalidateRegs();
		return @Inst;
	end:switch

	char@ s = @Inst;
	
	@s = @s[str_find_chars(@s, " ~t")]; /* Пропуск названия инструкции. */
	@s = @s[str_skip_chars(@s, " ~t")]; /* Пропуск пробелов. */

	/* Если регистр не распознан, ничего не делаем, т.к. значение отслеживаемых регистров не меняется. */
	word Reg1;
	word Mask1;
	if PHO_DecodeReg(@s, @Reg1, @Mask1) == 0 then
		return @Inst;
	end:if

	if operation == opINVALIDATE_REG then
		PHO_InvalidateReg(Reg1);
		return @Inst;
	end:if

	if Mask1 == 0xFF00 then
		/* FIXME: Add support of this case. */
		PHO_InvalidateReg(Reg1);
		return @Inst;
	end:if

	@s = @s[str_find_chars(@s, " ~t,")]; /* Пропуск регистра. */
	@s = @s[str_skip_chars(@s, " ~t" )]; /* Пропуск пробелов. */

	/* Если нет запятой - отдельный вариант для однооперандных вариантов mul, imul. */
	if s[0] != ',' then
		if (operation == opIMUL) | (operation == opMUL) then
			/* FIXME: Add support of this case. */
			PHO_InvalidateRegs();
			return @Inst;
		end:if
	end:if

	/* Если нет запятой, неизвестная или неверно сформированная команда. */
	if s[0] != ',' then
		StopInternal(__FILE__, __LINE__);
	end:if

	@s = @s[1];                          /* Пропуск запятой. */
	@s = @s[str_skip_chars(@s, " ~t")];  /* Пропуск пробелов. */


	word Const2; /* Второй операнд. */

	/* Декодируем второй регистр... */
	word Reg2;
	word Mask2;
	if PHO_DecodeReg(@s, @Reg2, @Mask2) != 0 then

		if Mask2 == 0xFF00 then
			/* FIXME: Add support of this case. */
			PHO_InvalidateReg(Reg2);
			return @Inst;
		end:if

		/* Обработка случая обнуления через XOR. */
		if Reg1 == Reg2 & Mask1 == Mask2 & Mask1 == 0xFFFF_FFFF & str_has_prefix(@Inst, "xor") then
			if PHO_RegContainsConst(Reg1, 0) then
				return "";
			else
				PHO_RegLoadConst(Reg1, 0);
				return @Inst;
			end:if
		end:if

		/* Если значение второго регистра нам неизвестно, инвалидируем значение для первого. */
		if !PHO_RegContainsAConst(Reg2) then
			PHO_InvalidateReg(Reg1);
			return @Inst;
		end:if

		Const2 = PhoState.PHO_RegConst[Reg2];
	else
		/* Если второй операнд не регистр, пробуем его распознать как число. */

		/* FIXME: не использовать здесь is_digit и val, поскольку они предназначены для распознавания символов и чисел входного языка транслятора, а не языка ассемблера. */

		/* Если не число, инвалидируем значение изменямого регистра. */
		if !isdigit(s[0]) then
			PHO_InvalidateReg(Reg1);
			return @Inst;
		end:if

		Const2 = val(@s);
	end:if


	/* Вариант - загрузка полного значения регистра. */
	if (Mask1 == 0xFFFF_FFFF) & (operation == opMOV) then
		char @RetInst = @Inst;
		PHO_Buff[0] = #0;
		when PHO_Optimize_FindReplacement(@PHO_Buff, Reg1, Mask1, Const2) != 0:
			@RetInst = @PHO_Buff;
		PHO_RegLoadConst(Reg1, Const2);
		return @RetInst;
	end:if

	/* Для всех прочих вариантов необходимо знать значение в Reg1. */
	if !PHO_RegContainsAConst(Reg1) then
		PHO_InvalidateReg(Reg1);
		return @Inst;
	end:if

	/* Вычисляем новое значение в регистре. */

	word Const1 = PhoState.PHO_RegConst[Reg1];
	Const2 = Const2 & Mask1;
	word Result;

	switch operation of
	case opMOV:
		Result = Const2;
	case opADD:
		Result = Const1 + Const2;
	case opSUB:
		Result = Const1 - Const2;
	case opAND:
		Result = Const1 & Const2;
	case opOR:
		Result = Const1 | Const2;
	case opXOR:
		Result = Const1 ^ Const2;
	case opMUL:
		Result = Const1 * Const2;
	case opIMUL:
		Result = int(Const1) * int(Const2);
	default:
		StopInternal(__FILE__, __LINE__);
	end:switch

	Result = (Result & Mask1) | (Const1 & (Mask1 ^ 0xFFFF_FFFF));

	if Result == Const1 then
		return "";
	end:if

	PHO_RegLoadConst(Reg1, Result);

	return @Inst;

end

char@ PHO_Optimize(char @Inst)
	char @NewInst = @PHO_Optimize_(@Inst);
	if str_ne(@NewInst, @Inst) then
		char Buff[nBUFF]; Buff[0] = #0;
		when EmitDebugComments_PHO:
			strcpy5(@Buff, "PHO: Instruction: (", @Inst, ") -> (", @NewInst, ")");
		EmitComment(@Buff);
	end:if
	return @NewInst;
end

/*****************************************************************************/

word PHO_EncodeRegContainingConst(char @Buff; word Const; word RegMode)
	when !PHOptimization:
		return 0;

	when RegMode != 4: /* FIXME: not implemented */
		return 0;

	word Reg = PHO_FindRegWithConst(Const);
	when Reg == PHO_REG_INVALID:
		return 0;

	strcat(@Buff, @PHO_EncodeReg(Reg, 0xFFFF_FFFF));
	return 1;
end

/*****************************************************************************/

bool PHO_Try_Emit_Load_Constant(word Reg; word RegMode; word Value)
	when !PHOptimization:
		return false;

	word Mask;

	switch RegMode of
	case 4: Mask = 0xFFFF_FFFF;
	case 2: Mask = 0x0000_FFFF; /* NOT IMPLEMENTED */ return false;
	case 1: Mask = 0x0000_00FF; /* NOT IMPLEMENTED */ return false;
	default:
		return false;
	end:switch

	char Buff[nBUFF];
	Buff[0] = #0;
	if PHO_Optimize_FindReplacement(@Buff, Reg, Mask, Value) == 0 then
		CodeLoadConstant(@Buff, Reg, RegMode, Value);
	end:if

	EmitPhoSkip(@Buff);
	PHO_RegLoadConst(Reg, Value);
	return true;
end
