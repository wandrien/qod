
struct strbuf
	char @Buff;
	word BuffSize;
	word BuffLen;
end

void strbuf_init(strbuf @Dst; char @Buff; word BuffSize)
	when @Buff == NULL:
		BuffSize = 0;
	@Dst.Buff = @Buff;
	Dst.BuffSize = BuffSize;
	Dst.BuffLen = 0;
	when BuffSize > 0:
		Buff[0] = #0;
end

word strbuf_get_virtual_len(strbuf @Dst)
	return Dst.BuffLen;
end

word strbuf_get_actual_len(strbuf @Dst)
	word BuffSize = Dst.BuffSize;
	if BuffSize == 0 then
		return 0;
	end
	word MaxRoom = BuffSize - 1;
	if Dst.BuffLen > MaxRoom then
		return MaxRoom;
	else
		return Dst.BuffLen;
	end
end

word strbuf_append_cstr(strbuf @Dst; char @Src)
	when @Src == NULL:
		return Dst.BuffLen;
	word SrcLen = strlen(@Src);
	word BuffSize = Dst.BuffSize;
	word OldLen = Dst.BuffLen;
	word NewLen = OldLen + SrcLen;
	if OldLen + 1 >= BuffSize then
		Dst.BuffLen = NewLen;
		return NewLen;
	end

	word RoomSize;
	if NewLen + 1 >= BuffSize then
		RoomSize = BuffSize - OldLen - 1;
	else
		RoomSize = SrcLen;
	end
	memcpy(@Dst.Buff[OldLen], @Src, RoomSize);
	Dst.BuffLen = NewLen;
	Dst.Buff[OldLen + RoomSize] = #0;
	return NewLen;
end

word strbuf_append_cstr2(strbuf @Dst; char @Src1; char @Src2)
	strbuf_append_cstr(@Dst, @Src1);
	return strbuf_append_cstr(@Dst, @Src2);
end

word strbuf_append_cstr3(strbuf @Dst; char @Src1; char @Src2; char @Src3)
	strbuf_append_cstr(@Dst, @Src1);
	strbuf_append_cstr(@Dst, @Src2);
	return strbuf_append_cstr(@Dst, @Src3);
end

word strbuf_append_cstr4(strbuf @Dst; char @Src1; char @Src2; char @Src3;
                                      char @Src4)
	strbuf_append_cstr(@Dst, @Src1);
	strbuf_append_cstr(@Dst, @Src2);
	strbuf_append_cstr(@Dst, @Src3);
	return strbuf_append_cstr(@Dst, @Src4);
end

word strbuf_append_cstr5(strbuf @Dst; char @Src1; char @Src2; char @Src3;
                                      char @Src4; char @Src5)
	strbuf_append_cstr(@Dst, @Src1);
	strbuf_append_cstr(@Dst, @Src2);
	strbuf_append_cstr(@Dst, @Src3);
	strbuf_append_cstr(@Dst, @Src4);
	return strbuf_append_cstr(@Dst, @Src5);
end

word strbuf_append_cstr6(strbuf @Dst; char @Src1; char @Src2; char @Src3;
                                      char @Src4; char @Src5; char @Src6)
	strbuf_append_cstr(@Dst, @Src1);
	strbuf_append_cstr(@Dst, @Src2);
	strbuf_append_cstr(@Dst, @Src3);
	strbuf_append_cstr(@Dst, @Src4);
	strbuf_append_cstr(@Dst, @Src5);
	return strbuf_append_cstr(@Dst, @Src6);
end

