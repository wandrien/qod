
/*****************************************************************************/

struct MUL_TRICKS of
	word Value;
	word Multipliers[3];
	word PowerOfTwo;
end

define nMUL_TRICKS 40

MUL_TRICKS MulTricks[nMUL_TRICKS];
word      nMulTricks;

/*****************************************************************************/

word FindMulTrick_(word Value)
	word n = 0;
	while n < nMulTricks do
		when MulTricks[n].Value == Value:
			return n;
		inc n;
	end:while
	return nMUL_TRICKS;
end

word FindMulTrick(word Value)
	if EmitFastMult then
		return FindMulTrick_(Value);
	else
		return nMUL_TRICKS;
	end:if
end

/*****************************************************************************/

void PrepareBaseMulTrick(word Multiplier; word PowerOfTwo)
	when nMulTricks >= nMUL_TRICKS:
		StopInternalCodegen(__FILE__, __LINE__);

	if PowerOfTwo > 0 then
		word p = PowerOfTwo;
		/* FIXME: the language doesn't support bit shift operators */
		Multiplier = 2;
		while p > 1 do
			Multiplier = Multiplier * Multiplier;
			dec p;
		end:while
	end:if

	MulTricks[nMulTricks].Value = Multiplier;
	MulTricks[nMulTricks].Multipliers[0] = Multiplier;
	MulTricks[nMulTricks].Multipliers[1] = 0;
	MulTricks[nMulTricks].Multipliers[2] = 0;
	MulTricks[nMulTricks].PowerOfTwo = PowerOfTwo;

	inc nMulTricks;
end

void PrepareDoubleMulTrick(word Multiplier1, Multiplier2)
	when nMulTricks >= nMUL_TRICKS:
		StopInternalCodegen(__FILE__, __LINE__);

	word Value = Multiplier1 * Multiplier2;

	when FindMulTrick_(Value) < nMUL_TRICKS:
		return;

	MulTricks[nMulTricks].Value = Value;
	MulTricks[nMulTricks].Multipliers[0] = Multiplier1;
	MulTricks[nMulTricks].Multipliers[1] = Multiplier2;
	MulTricks[nMulTricks].Multipliers[2] = 0;
	MulTricks[nMulTricks].PowerOfTwo = 0;

	inc nMulTricks;
end

void PrepareMulTricks()
	nMulTricks = 0;

	PrepareBaseMulTrick(3, 0);
	PrepareBaseMulTrick(5, 0);
	PrepareBaseMulTrick(9, 0);

	PrepareBaseMulTrick(0, 1);
	PrepareBaseMulTrick(0, 2);
	PrepareBaseMulTrick(0, 3);
	PrepareBaseMulTrick(0, 4);
	PrepareBaseMulTrick(0, 5);
	PrepareBaseMulTrick(0, 6);
	PrepareBaseMulTrick(0, 7);
	PrepareBaseMulTrick(0, 8);
	PrepareBaseMulTrick(0, 9);
	PrepareBaseMulTrick(0, 10);
	PrepareBaseMulTrick(0, 11);
	PrepareBaseMulTrick(0, 12);

	word nBaseTricks = nMulTricks;

	word n1 = 0;
	while n1 < nBaseTricks do
		word n2 = 0;
		while n2 < nBaseTricks do
			if MulTricks[n1].PowerOfTwo > 0 & MulTricks[n2].PowerOfTwo > 0 then
				pass;
			else
				PrepareDoubleMulTrick(MulTricks[n1].Value, MulTricks[n2].Value);
			end:if
			inc n2;
		end:while
		inc n1;
	end:while

end

/*****************************************************************************/

void Emit_Trick_MUL_Reg_Const(char @Buff; word Reg; word RegMode; word Value)
	Buff[0] = #0;

	word shl_op = 0;

	switch Value of
	case 3, 5, 9:
		word Mult = Value - 1;
		strcpy(@Buff, "lea     ");
		strcat(@Buff, @EncodeReg(NULL, Reg, RegMode));
		strcat(@Buff, ",  ");
		EncodeMemRef_Reg_Mult_Reg_Offset(@Buff, 0, Reg, Reg, RegMode, Mult, 0);
	case 2:
		EncodeCmdRegReg(@Buff, "add", Reg, RegMode, Reg, RegMode);
	case 4:
		shl_op = 2;
	case 8:
		shl_op = 3;
	case 16:
		shl_op = 4;
	case 32:
		shl_op = 5;
	case 64:
		shl_op = 6;
	case 128:
		shl_op = 7;
	case 256:
		shl_op = 8;
	case 512:
		shl_op = 9;
	case 1024:
		shl_op = 10;
	case 2048:
		shl_op = 11;
	case 4096:
		shl_op = 12;
	default:
		StopInternalCodegen(__FILE__, __LINE__);
	end:switch

	if shl_op != 0 then
		EncodeCmdRegConst(@Buff, "shl", Reg, RegMode, shl_op);
	end:if

	Emit(@Buff);
end

/*****************************************************************************/

bool Emit_MUL_Reg_Const(word Reg; word RegMode; word Value)
	char Buff[nBUFF];

	when Value == 1:
		return true;

	word n = FindMulTrick(Value);
	if n >= nMUL_TRICKS then
		Buff[0] = #0;
		EncodeCmdRegConst(@Buff, "imul", Reg, RegMode, Value);
		Emit(@Buff);
		return true;
	end:if

	word@ Mults = @MulTricks[n].Multipliers;
	word i = 0;
	forever do
		word Mult = Mults[i];
		when Mult == 0:
			return true;
		Emit_Trick_MUL_Reg_Const(@Buff, Reg, RegMode, Mult);
		inc i;
	end:forever
end

/*****************************************************************************/
