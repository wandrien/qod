
namespace StatementParser of

/*****************************************************************************/

void MatchSemicolon(char @Buff)
	Scan(@Buff);
	if str_ne(@Buff,";") then
		Error(@L10n.eSEMICOLONEXP);
	end
end

/*****************************************************************************/

bool EndOf(char @Buff, @A1, @A2; bool EatSemicolon)
	when str_ne(@Buff, "end"):
		StopInternal(__FILE__, __LINE__);

	Scan(@Buff);
	if str_eq(@Buff, ":") then
		Scan(@Buff);
		if str_eq(@Buff, @A1)
		| (@A2 != NULL & str_eq(@Buff, @A2)) then
			Scan(@Buff);
		else
			Stop(@L10n.eNOTALLOWED);
		end:if
	end:if

	if EatSemicolon & str_eq(@Buff, ";") then
		return false;
	else
		return true;
	end
end

/*****************************************************************************/

void Statement_IF(char @Buff; word @P1; bool @SkipFinalScan)
	Node[P1].ID = iSELECT;

	char @End1="if";
	char @Case="";
	char @Then="then";
	char @Else="else";
	if str_eq(@Buff,"select") then
		@End1="select";
		@Case="case";
		@Then=":";
		@Else="default";

		if str_ne(@Scan(@Buff),"case") then
			Stop(@L10n.eCASEEXP);
		end:if
	else
		strcpy(@Buff,@Case);
	end:if

	word @BackLink = @Node[P1].pLeft;
	while str_ne(@Buff,"end") do
		word CASE = Peek();
		word COND = Peek();
		word BODY = Peek();

		Node[CASE].ID = iCASE;
		Node[COND].ID = iCOND;
		Node[BODY].ID = iBODY;

		Node[CASE].pLeft  = COND;
		Node[COND].pRight = BODY;
		BackLink = CASE;
		@BackLink = @Node[CASE].pRight;

		if str_eq(@Buff,@Case) then
			Node[COND].pLeft = Expr(PRIO.ZERO, @Scan(@Buff));
			word pType = Node[Node[COND].pLeft].pType;

			if str_ne(@Buff,@Then) then
				Stop(@L10n.eTHENEXP);
			end:if

			if pType != st_bool then
				ErrorAtNode(COND, @L10n.eTYPE_COND_EXPR);
			end:if
		else
			if str_eq(@Else,"default") then
				if str_ne(@Scan(@Buff),":") then
					Stop(@L10n.eCOLONEXP);
				end:if
			end:if

			@Case="";
			@Else="";
		end:if

		Scan(@Buff);
		Node[BODY].pLeft = Statements(@Buff, @Case, @Else, "end");
	end:while

	SkipFinalScan = EndOf(@Buff, @End1, NULL, true);

	CTE_SELECT(P1);
end

/*****************************************************************************/

void Statement_WHEN(char @Buff; word @P1; bool @SkipFinalScan)

	Node[P1].ID=iSELECT;

	word CASE = Peek();
	word COND = Peek();
	word BODY = Peek();

	Node[CASE].ID = iCASE;
	Node[COND].ID = iCOND;
	Node[BODY].ID = iBODY;

	Node[CASE].pLeft  = COND;
	Node[COND].pRight = BODY;
	Node[P1].pLeft = CASE;

	Node[COND].pLeft = Expr(PRIO.ZERO, @Scan(@Buff));
	word pType = Node[Node[COND].pLeft].pType;

	if pType != st_bool then
		ErrorAtNode(COND, @L10n.eTYPE_COND_EXPR);
	end:if

	if str_ne(@Buff,":") then
		Stop(@L10n.eTHENEXP);
	end:if

	Scan(@Buff);

	Node[BODY].pLeft = Ctrl(@Buff);

	SkipFinalScan = true;

	CTE_SELECT(P1);
end


/*****************************************************************************/

bool Statement_SWITCH_CheckCast(word pTargetType; word pLiteralType)
	select
	case pTargetType == st_char:
		when pLiteralType == st_char:
			return true;
	case pTargetType == st_byte:
		when pLiteralType == st_word:
			return true;
	case pTargetType == st_word:
		when pLiteralType == st_word:
			return true;
	case pTargetType == st_int:
		when pLiteralType == st_word | pLiteralType == st_int:
			return true;
	end:select
	return false;
end

void Statement_SWITCH(char @Buff; word @P1; bool @SkipFinalScan)

	Node[P1].ID = iSWITCH;

	word COND = Peek();
	Node[COND].ID = iCOND;
	Node[P1].pLeft = COND;

	word @CaseBackLink = @Node[COND].pRight;

	Node[COND].pLeft = Expr(PRIO.ZERO, @Scan(@Buff));
	word pType = Node[Node[COND].pLeft].pType;

	when pType != st_char & pType != st_byte & pType != st_word & pType != st_int:
		Stop(@L10n.eSWTYPE);

	when str_ne(@Buff,"of"):
		Stop(@L10n.eOFEXP);

	when str_ne(@Scan(@Buff),"case"):
		Stop(@L10n.eCASEEXP);

	while str_eq(@Buff,"case") do
		word CASE = Peek();
		Node[CASE].ID = iCASE;
		CaseBackLink = CASE;
		@CaseBackLink = @Node[CASE].pRight;
		word @ValueBackLink = @Node[CASE].pLeft;

		repeat
			word EXPR = Expr(PRIO.ZERO, @Scan(@Buff));

			when !NodeHasImmediateValue(EXPR):
				Stop(@L10n.eCONSTEXP);

			when !Statement_SWITCH_CheckCast(pType, Node[EXPR].pType):
				Stop(@L10n.eCONSTEXP);

			word  CASE_I = Node[COND].pRight;
			while CASE_I < nNODE do
				word  VALUE_I = Node[CASE_I].pLeft;
				while VALUE_I < nNode & Node[VALUE_I].ID == iVALUE do
					if Node[Node[VALUE_I].pLeft].Value == Node[EXPR].Value then
						Stop(@L10n.eDUPCASE);
					end:if

					VALUE_I = Node[VALUE_I].pRight;
				end:while

				CASE_I = Node[CASE_I].pRight;
			end:while

			word VALUE = Peek();
			Node[VALUE].ID = iVALUE;
			Node[VALUE].pLeft = EXPR;
			ValueBackLink = VALUE;
			@ValueBackLink = @Node[VALUE].pRight;

		until str_ne(@Buff,",");

		if str_ne(@Buff,":") then
			Stop(@L10n.eCOLONEXP);
		end

		word BODY = Peek();
		Node[BODY].ID = iBODY;
		ValueBackLink = BODY;

		Scan(@Buff);
		Node[BODY].pLeft = Statements(@Buff, "case", "default", "end");
	end

	if str_eq(@Buff,"default") then
		if str_ne(@Scan(@Buff),":") then
			Stop(@L10n.eCOLONEXP);
		end

		word CASE = Peek();
		word DEFAULT = Peek();
		word BODY = Peek();

		Node[CASE].ID = iCASE;
		Node[DEFAULT].ID = iDEFAULT;
		Node[BODY].ID = iBODY;

		Node[CASE].pLeft = DEFAULT;
		Node[DEFAULT].pRight = BODY;
		CaseBackLink = CASE;

		Scan(@Buff);
		Node[BODY].pLeft = Statements(@Buff, "end", NULL, NULL);
	end:if

	SkipFinalScan = EndOf(@Buff, "switch", NULL, true);

	CTE_SWITCH(P1);
end

/*****************************************************************************/

void Statement_WHILE(char @Buff; word @P1; bool @SkipFinalScan)

	word  BODY = Peek();
	word  COND = Peek();
	Node [P1].ID = iWHILE;
	Node [P1].pLeft = BODY;

	Node [BODY].ID = iBODY;
	Node [BODY].pRight = COND;

	Node [COND].ID = iCOND;

	char @End2 = NULL;

	select
	case str_eq(@Buff,"while"):
		@End2 = "while";
		Node[COND].pLeft = Expr(PRIO.ZERO, @Scan(@Buff));
		word pType = Node[Node[COND].pLeft].pType;

		if pType != st_bool then
			Error(@L10n.eTYPE);
		end

		if str_ne(@Buff,"do") then
			Stop(@L10n.eDOEXP);
		end
	case str_eq(@Buff,"forever"):
		@End2 = "forever";
		Scan(@Buff);
		if str_ne(@Buff,"do") then
			Stop(@L10n.eDOEXP);
		end
	case str_eq(@Buff,"do"):
		Deprecated("'do' should be replaced with 'forever do'");
	default:
		StopInternal(__FILE__, __LINE__);
	end:select

	word pLoop1=pLoop;
	pLoop=P1;

	Scan(@Buff);
	Node[BODY].pLeft = Statements(@Buff, "end", NULL, NULL);

	SkipFinalScan = EndOf(@Buff, "do", @End2, true);

	pLoop=pLoop1;

	CTE_WHILE(@P1);
end

/*****************************************************************************/

void Statement_REPEAT(char @Buff; word @P1; bool @SkipFinalScan)
	word  BODY = Peek();
	word  COND = Peek();
	Node[P1].ID = iREPEAT;
	Node[P1].pLeft = BODY;

	Node[BODY].ID = iBODY;
	Node[BODY].pRight = COND;

	Node[COND].ID = iCOND;

	word pLoop1=pLoop;
	pLoop=P1;

	Scan(@Buff);
	Node[BODY].pLeft = Statements(@Buff, "until", NULL, NULL);

	Node[COND].pLeft = Expr(PRIO.ZERO, @Scan(@Buff));
	word pType = Node[Node[COND].pLeft].pType;

	if str_ne(@Buff,";") then
		Stop(@L10n.eSEMICOLONEXP);
	end

	if pType != st_bool then
		Stop(@L10n.eTYPE);
	end

	pLoop=pLoop1;

	CTE_REPEAT(@P1);
end

/*****************************************************************************/

void Statement_CONTINUE(char @Buff; word @P1; bool @SkipFinalScan)
	when pLoop>=nNODE:
		Stop(@L10n.eWRONGCONTINUE);

	when Node[pLoop].ID != iWHILE
	&    Node[pLoop].ID != iREPEAT:
		StopInternal(__FILE__, __LINE__);

	Node[P1].ID = iCONTINUE;
	Node[P1].Value = pLoop;
	Node[P1].pType = st_noreturn;

	MatchSemicolon(@Buff);
end

/*****************************************************************************/

void Statement_EXIT(char @Buff; word @P1; bool @SkipFinalScan)
	when pLoop>=nNODE:
		Stop(@L10n.eWRONGEXIT);

	when Node[pLoop].ID != iWHILE
	&    Node[pLoop].ID != iREPEAT:
		StopInternal(__FILE__, __LINE__);

	Node[P1].ID = iEXIT;
	Node[P1].Value = pLoop;
	Node[P1].pType = st_noreturn;

	MatchSemicolon(@Buff);
end

/*****************************************************************************/

void Statement_INCDEC(char @Buff; word @P1; bool @SkipFinalScan)

	if str_eq(@Buff,"inc") then
		Node[P1].ID =iINC;
	else
		Node[P1].ID =iDEC;
	end:if

	Node[P1].pLeft= Expr(PRIO.INC, @Scan(@Buff));
	word pType = Node[Node[P1].pLeft].pType;

	if str_ne(@Buff,";") then
		Stop(@L10n.eSEMICOLONEXP);
	end

	select
	case !NodeIsLValue(Node[P1].pLeft):
		ErrorAtNode(P1, @L10n.eLVALUE_IN_INC);
		AddFakeCast(st_word, @Node[P1].pLeft);
	case pType!=st_byte & pType!=st_word & pType!=st_int:
		ErrorAtNode(P1, @L10n.eTYPE);
		AddFakeCast(st_word, @Node[P1].pLeft);
	end:select

end

/*****************************************************************************/

void Statement_RETURN(char @Buff; word @P1; bool @SkipFinalScan)

	Node[P1].ID = iRETURN;
	Scan(@Buff);

	word pTypeReturn = Func_GetRetType(pCurrentFunc);

	if pTypeReturn == st_noreturn then
		Stop(@L10n.eRETINNORET);
	end:if

	if pTypeReturn != st_void then
		Node[P1].pLeft=Expr(PRIO.ZERO, @Buff);
		ImplicitCast(pTypeReturn, @Node[P1].pLeft);
	end:if

	if str_ne(@Buff,";") then
		Stop(@L10n.eSEMICOLONEXP);
	end

	Node[P1].pType = st_noreturn;
end

/*****************************************************************************/

void Statement_INLINE(char @Buff; word @P1; bool @SkipFinalScan)

	word Code=val(@Scan(@Buff));
	if Code>255 then
		Stop(@L10n.eOVERFLOW);
	end

	Node[P1].ID   =iINLINE;
	Node[P1].Value= Code;

	if str_eq(@Scan(@Buff),",") then
		strcpy (@Buff,"inline");
		SkipFinalScan = true;
		return;
	end

	if str_ne(@Buff,";") then
		Stop(@L10n.eSEMICOLONEXP);
	end

end

/*****************************************************************************/

void Statement_DEF_LOCAL(char @Buff; word @_P1; bool @SkipFinalScan; word pPrefixType)

	word P1 = _P1;

	while true do
		word nPtr=ReadPtrs(@Buff);

		word I = ResolveLocal(@Buff);
		when I < nLOCAL:
			ErrorWithSubject(@L10n.eDUPLICATE, @Buff);

		I = ResolveParm(@Buff);
		when I < nDICT:
			ErrorWithSubject(@L10n.eDUPLICATE, @Buff);

		EnsureValidIdentifier(@Buff);

		word Name2 = SaveString0(@Buff);
		word pType = ReadTypeSuffix(@Scan(@Buff), T_nPtrTo(nPtr, pPrefixType));

		if pType == st_void then
			Stop(@L10n.eNOVOID);
		end:if

		if T_IsFunc(pType) then
			Stop(@L10n.eNOVAL);
		end:if

		when nLocal>=nLOCAL:
			StopMemory();
		Local[nLocal].Name2 = Name2;
		Local[nLocal].pType = pType;

		word N = 1;
		if T_IsArray(Local[nLocal].pType) then
			N = T_ArrayGetLen(Local[nLocal].pType);
		end

		word P4=Peek();

		Node[P1].ID   =iDEF_LOCAL;
		Node[P1].pType=Local[nLocal].pType;
		Node[P1].Value=Local[nLocal].Name2;
		Node[P1].pLeft =P4;

		Node[P4].ID    =iEMPTY;
		Node[P4].Value = N;

		if str_eq(@Buff,"=") then
			/*if Local[nLocal].nIndx > 0 then
				Stop(@L10n.eNOTAVAIL);
			end:if*/

			word P5=Peek();
			Node[P4].ID    =iASSIGN;
			Node[P4].pLeft = P5;

			word P6=Peek();
			Node[P5].ID    =iEMPTY;
			Node[P5].pLeft = P6;
			Node[P5].pRight= Expr(PRIO.ZERO, @Scan(@Buff));

			Node[P6].ID    =iLOCAL;
			Node[P6].Value =nLocal;
			Node[P6].pType =Local[nLocal].pType;

			ImplicitCast(pType, @Node[P5].pRight);
		end:if

		inc nLocal;

		if str_ne(@Buff,",") then
			return;
		end:if
		Scan(@Buff);

		word pNext = Peek();
		Node[P1].pRight = pNext;
		P1 = pNext;
	end:while
end

void Statement_ASSIGN(char @Buff; word @P1; bool @SkipFinalScan)

	word pLValue = Expr(PRIO.LVALUE, @Buff);

	when pLValue == nNODE:
		StopInternal(__FILE__, __LINE__);

	if Node[pLValue].ID == iTYPE then
		Statement_DEF_LOCAL(@Buff, @P1, @SkipFinalScan, Node[pLValue].Value);
	else
		word P3=Peek();
		Node[P1].ID    = iASSIGN;
		Node[P1].pLeft = P3;

		Node[P3].ID    = iEMPTY;
		Node[P3].pLeft = pLValue;

		if str_eq(@Buff,"=") then
			if !NodeIsLValue(Node[P3].pLeft) then
				Error(@L10n.eLVALUE_IN_ASSIGNMENT);
			end:if
			Node[P3].pRight = Expr(PRIO.ZERO, @Scan(@Buff));
			ImplicitCast(Node[pLValue].pType, @Node[P3].pRight);
		end:if

		if Node[pLValue].pType == st_noreturn then
			Node[P1].pType = st_noreturn;
		else
			Node[P1].pType = st_void;
		end:if
	end:if

	if str_ne(@Buff,";") then
		Stop(@L10n.eSEMICOLONEXP);
	end:if
end

/*****************************************************************************/

byte CtrlPrefix0[256];
byte CtrlPrefix1[256];

void RegisterCtrlPrefix(char @Str)
	CtrlPrefix0[word(Str[0])] = 1;
	CtrlPrefix1[word(Str[1])] = 1;
end

void InitCtrlPrefix()
	RegisterCtrlPrefix("if");
	RegisterCtrlPrefix("select");
	RegisterCtrlPrefix("while");
	RegisterCtrlPrefix("do");
	RegisterCtrlPrefix("forever");
	RegisterCtrlPrefix("when");
	RegisterCtrlPrefix("switch");
	RegisterCtrlPrefix("repeat");
	RegisterCtrlPrefix("return");
	RegisterCtrlPrefix("continue");
	RegisterCtrlPrefix("exit");
	RegisterCtrlPrefix("inc");
	RegisterCtrlPrefix("dec");
	RegisterCtrlPrefix("inline");
	RegisterCtrlPrefix("pass");
	RegisterCtrlPrefix("null");
end

/*****************************************************************************/

word Ctrl(char @Buff)

	bool SkipFinalScan = false;

	word P1 = Peek();

	select
		case CtrlPrefix0[word(Buff[0])] == 0 | CtrlPrefix1[word(Buff[1])] == 0:
			Statement_ASSIGN(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"if") | str_eq(@Buff,"select"):
			Statement_IF(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"while") | str_eq(@Buff,"do") | str_eq(@Buff,"forever"):
			Statement_WHILE(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"when"):
			Statement_WHEN(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"switch"):
			Statement_SWITCH(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"repeat"):
			Statement_REPEAT(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"return"):
			Statement_RETURN(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"continue"):
			Statement_CONTINUE(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"exit"):
			Statement_EXIT(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"inc") | str_eq(@Buff,"dec"):
			Statement_INCDEC(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"inline"):
			Statement_INLINE(@Buff, @P1, @SkipFinalScan);

		case str_eq(@Buff,"pass"):
			Node[P1].ID   =iEMPTY;
			MatchSemicolon(@Buff);

		case str_eq(@Buff,"null"):
			Node[P1].ID   =iEMPTY;
			MatchSemicolon(@Buff);
			Warn(@L10n.dprNULL);

		default:
			Statement_ASSIGN(@Buff, @P1, @SkipFinalScan);
	end:select

	if !SkipFinalScan then
		Scan(@Buff);
	end

	return P1;
end

/*****************************************************************************/

word Statements(char @Buff; char @End1; char @End2; char @End3)

	word Saved_nLocal = nLocal;

	word P = nNODE;
	word @Backlink = @P;

	repeat
		word pCtrl = Ctrl(@Buff);
		Backlink = pCtrl;
		while Node[pCtrl].pRight != nNODE do
			pCtrl = Node[pCtrl].pRight;
		end
		@Backlink =@Node[pCtrl].pRight;

		if @End2 != NULL & str_eq(@Buff, @End2) then
			exit;
		end
		if @End3 != NULL & str_eq(@Buff, @End3) then
			exit;
		end

	until str_eq(@Buff, @End1);

	nLocal = Saved_nLocal;

	CTE_CodeList(P);

	return P;
end

/*****************************************************************************/

void InitStatementParser()
	InitCtrlPrefix();
end

/*****************************************************************************/

end:StatementParser;

alias MatchSemicolon = StatementParser.MatchSemicolon;
alias EndOf = StatementParser.EndOf;
alias Statements = StatementParser.Statements;
alias Ctrl = StatementParser.Ctrl;
alias InitStatementParser = StatementParser.InitStatementParser;
