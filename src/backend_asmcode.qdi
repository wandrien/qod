
/*
	Вспомогательные функции для генерирования в листинг названий регистров, меток и т.п.
*/

/*****************************************************************************/

define RegNone 0
define RegA    1
define RegB    2
define RegC    3
define RegD    4

/*****************************************************************************/

bool IsNativeOperandSize(word Size)
	word S = Mach.NativeRegSize;
	when Size > Mach.NativeRegSize:
		return false;
	forever do
		when S == 0:
			return false;
		when S == Size:
			return true;
		S = S / 2;
	end:forever
end

/*****************************************************************************/

char @Encode_OperandSize(word Size)
	select
	case Size == 0:
		return "";
	case Size == 1:
		return "byte  ";
	case Size == 2:
		return "word  ";
	case Size == 4 & Mach.AllowedRegSize >= 4:
		return "dword ";
	case Size == 8 & Mach.AllowedRegSize >= 8:
		return "qword ";
	default:
		StopInternalCodegen(__FILE__, __LINE__);
	end:select
end

/*****************************************************************************/

/*
	Помещает в Buff обозначение регистра Reg в режиме RegMode
	RegMode:
		1 - 8 бит
		2 - 16 бит
		4 - 32 бита

	Если @Buff == NULL,
		возвращает указатель на статическую строку с именем регистра.
*/
char @EncodeReg(char @Buff; word Reg; word RegMode)

	char @R = NULL;

	switch Reg of
	case RegA:
		switch RegMode of
			case 1: @R = " AL";
			case 2: @R = " AX";
			case 4: @R = "EAX";
			case 8: @R = "RAX";
			default: StopInternalCodegen(__FILE__, __LINE__);
		end:switch
	case RegB:
		switch RegMode of
			case 1: @R = " BL";
			case 2: @R = " BX";
			case 4: @R = "EBX";
			case 8: @R = "RBX";
			default: StopInternalCodegen(__FILE__, __LINE__);
		end:switch
	case RegC:
		switch RegMode of
			case 1: @R = " CL";
			case 2: @R = " CX";
			case 4: @R = "ECX";
			case 8: @R = "RCX";
			default: StopInternalCodegen(__FILE__, __LINE__);
		end:switch
	case RegD:
		switch RegMode of
			case 1: @R = " DL";
			case 2: @R = " DX";
			case 4: @R = "EDX";
			case 8: @R = "RDX";
			default: StopInternalCodegen(__FILE__, __LINE__);
		end:switch
	default: StopInternalCodegen(__FILE__, __LINE__);
	end:switch

	if @Buff != NULL then
		strcat(@Buff, @R);
		return @Buff;
	end:if

	return @R;

end

/*****************************************************************************/

/* Помещает в Buff обозначение указанной метки. */
char @EncodeLabel(char @Buff; word Label)

	strcat2(@Buff, " @", @str(Dict[Label].Label));
	return @Buff;
end

/*****************************************************************************/

/* Помещает в Buff обозначения регистра и преформатированного операнда. */
char @EncodeRegFmt(char @Buff; word Reg1; word RegMode1; char @Fmt2)

	EncodeReg(@Buff, Reg1, RegMode1);
	strcat(@Buff, ",  ");
	strcat(@Buff, @Fmt2);
	return @Buff;

end

/*****************************************************************************/

/* Помещает в Buff обозначения 2-х регистров. */
char @EncodeRegReg(char @Buff; word Reg1; word RegMode1; word Reg2; word RegMode2)

	EncodeReg(@Buff, Reg1, RegMode1);
	strcat(@Buff, ",  ");
	EncodeReg(@Buff, Reg2, RegMode2);
	return @Buff;

end

/*****************************************************************************/

/* Помещает в Buff обозначения регистра и константного значения. */
char @EncodeRegConst(char @Buff; word Reg1; word RegMode1; word Value)

	EncodeReg(@Buff, Reg1, RegMode1);
	strcat(@Buff, ",  ");
	strcat(@Buff, @str(Value));
	return @Buff;

end

/*****************************************************************************/
/* Помещает в Buff код для операции и добавляет отступ. */
char @EncodeCmd(char @Buff; char @Cmd)

	word prefix_len = strlen(@Buff);
	word cmd_len = strlen(@Cmd);

	memcpy(@Buff[prefix_len], @Cmd, cmd_len);

	while cmd_len < 8 do
		Buff[prefix_len + cmd_len] = ' ';
		inc cmd_len;
	end

	Buff[prefix_len + cmd_len] = #0;

	return @Buff;
end

/*****************************************************************************/

/* Помещает в Buff код для операции регистра и преворматированного правого операнда. */
char @EncodeCmdRegFmt(char @Buff; char @Cmd; word Reg1; word RegMode1; char @Fmt2)
	EncodeCmd(@Buff, @Cmd);
	EncodeRegFmt(@Buff, Reg1, RegMode1, @Fmt2);
	return @Buff;
end

/*****************************************************************************/

/* Помещает в Buff код для операции регистра и и регистра. */
char @EncodeCmdRegReg(char @Buff; char @Cmd; word Reg1; word RegMode1; word Reg2; word RegMode2)
	EncodeCmd(@Buff, @Cmd);
	EncodeRegReg(@Buff, Reg1, RegMode1, Reg2, RegMode2);
	return @Buff;
end

/*****************************************************************************/

/* Помещает в Buff код для операции регистра и константы. */
char @EncodeCmdRegConst(char @Buff; char @Cmd; word Reg; word RegMode; word Value)
	EncodeCmd(@Buff, @Cmd);
	EncodeRegConst(@Buff, Reg, RegMode, Value);
	return @Buff;
end

/*****************************************************************************/

/* Помещает в Buff код для операции с регистром. */
char @EncodeCmdReg(char @Buff; char @Cmd; word Reg; word RegMode)
	EncodeCmd(@Buff, @Cmd);
	EncodeReg(@Buff, Reg, RegMode);
	return @Buff;
end

/*****************************************************************************/

char @EncodePushReg(char @Buff; word Reg; word RegMode)
	return @EncodeCmdReg(@Buff, "push", Reg, RegMode);
end

char @EncodePopReg(char @Buff; word Reg; word RegMode)
	return @EncodeCmdReg(@Buff, "pop", Reg, RegMode);
end

char @EncodeMovRegReg(char @Buff; word Reg1; word Reg2; word RegMode)
	return @EncodeCmdRegReg(@Buff, "mov", Reg1, RegMode, Reg2, RegMode);
end

char @EncodeXchgRegReg(char @Buff; word Reg1; word Reg2; word RegMode)
	return @EncodeCmdRegReg(@Buff, "xchg", Reg1, RegMode, Reg2, RegMode);
end

/*****************************************************************************/

/* Помещает в Buff код загрузки константы в регистр. */
char @EncodeLoadConstant(char @Buff; word Reg; word RegMode; word Value)
	select
	case Value == 0:
		EncodeCmdRegReg(@Buff, "xor", Reg, RegMode, Reg, RegMode);
	default:
		EncodeCmdRegConst(@Buff, "mov", Reg, RegMode, Value);
	end
	return @Buff;
end

/*****************************************************************************/

/* Помещает в Buff код загрузки метки в регистр. */
char @EncodeLoadLabel(char @Buff; word Reg; word Label)

	strcat(@Buff, "mov     ");
	EncodeReg(@Buff, Reg, Mach.PointerSize);
	strcat(@Buff, ",");
	EncodeLabel(@Buff, Label);

	return @Buff;
end

/*****************************************************************************/

char EncodeOffsetAddenum_Buff[nBUFF];
char @EncodeOffsetAddenum(int Offset)
	select
	case Offset > 0:
		strcpy2(@EncodeOffsetAddenum_Buff,"+",@istr(Offset));
	case Offset < 0:
		strcpy2(@EncodeOffsetAddenum_Buff,"-",@istr(-Offset));
	default:
		EncodeOffsetAddenum_Buff[0] = #0;
	end:select
	return @EncodeOffsetAddenum_Buff;
end

/*****************************************************************************/

/*

ID             Value Location                  LValue    Indirect
iSTRING, RO=0: [@@RWLITERALS + IX + Offset]    Yes       Yes
iSTRING, RO=1: [@@ROLITERALS + IX + Offset]    No        Yes
iDATA:         [@@DATA       + IX + Offset]    Yes       Yes
iPARM:         [EBP          + IX + Offset]    Yes       Yes
iLOCAL:        [EBP          + IX + Offset]    Yes       Yes       (Offset is negative)
iREF:          [               IX + Offset]    Yes       Yes
iREG                           IX + Offset     No        No
iCONST                              Offset     No        No
*/

struct ValueRef of
	word ID;
	word pType;
	int  Offset;
	word IX;
	bool RO;
end

bool ValueRef_IsLValue(ValueRef@ vref)
	switch vref.ID of
	case iSTRING:
		when !vref.RO:
			return true;
		return false;
	case iDATA, iPARM, iLOCAL, iREF:
		return true;
	case iREG, iCONST:
		return false;
	default:
		StopInternal(__FILE__, __LINE__);
	end:switch
end

bool ValueRef_IsIndirect(ValueRef@ vref)
	switch vref.ID of
	case iSTRING, iDATA, iPARM, iLOCAL, iREF:
		return true;
	case iREG, iCONST:
		return false;
	default:
		StopInternal(__FILE__, __LINE__);
	end:switch
end

/*****************************************************************************/

/*
	Распаковывает из узлов iDATA, iPARM, iLOCAL и iSTRING информацию об объекте.
	Offset - смещение относительно специфичного источника.
	Напр., для iDATA - смещение от начала секции данных.
*/
void ValueRef_ExtractDataInfo(ValueRef @Ref; word P)
	word Value = Node[P].Value;

	Ref.IX = 0;
	Ref.ID = Node[P].ID;

	switch Ref.ID of
	case iDATA:
		Ref.pType  = Dict[Value].pType;
		Ref.Offset = as_signed(Dict[Value].Label);
		when Ref.Offset < 0:
			StopInternal(__FILE__, __LINE__);
		Ref.RO     = false;

	case iPARM:
		when Dict[Value].Class != CLASS.cARG:
			StopInternal(__FILE__, __LINE__);
		Ref.pType  = Dict[Value].pType;
		Ref.Offset = as_signed(Dict[Value].Label);
		Ref.RO     = false;

	case iLOCAL:
		Ref.pType  = Local[Value].pType;
		Ref.Offset = -Local[Value].Value;
		Ref.RO     = false;

	case iSTRING:
		Ref.pType  = Dict[Value].pType;
		Ref.Offset = as_signed(Dict[Value].Label);
		Ref.RO     = Dict[Value].RO;

	default:
		StopInternal(__FILE__, __LINE__);
	end

end

/*****************************************************************************/

void ValueRef_Apply_FIELD(ValueRef @Ref; word P)

	word F = Node[P].Value;

	when Dict[F].Class != CLASS.cFIELD:
		StopInternalCodegen(__FILE__, __LINE__);

	Ref.pType = Dict[F].pType;
	int Offset = Ref.Offset + int(Dict[F].Label);
	when Offset < Ref.Offset:
		StopInternalCodegen(__FILE__, __LINE__);
	Ref.Offset = Offset;
end

/*****************************************************************************/

/*

iDATA:    [@@DATA + IX + offset]
iPARM:    [EBP    + IX + offset]
iLOCAL:   [EBP    + IX + offset]
iREF:     [         IX + offset]

*/

char @ValueRef_Encode_(char @Buff; word Size; word ID; word IX; int Offset)

	char@ SizeMarker = @Encode_OperandSize(Size);
	char@ Prefix = "";

	char@ Plus_RX = "";
	char@ RX = "";

	if IX != RegNone then
		@Plus_RX = "+";
		@RX = @EncodeReg(NULL, IX, Mach.PointerSize);
	end

	switch ID of
	case iDATA:
		@Prefix = "[@@DATA";
	case iPARM, iLOCAL:
		@Prefix = "[EBP";
	case iREF:
		when IX == RegNone:
			StopInternalCodegen(__FILE__, __LINE__);
		@Prefix = "[";
		@Plus_RX = "";
	default:
		StopInternalCodegen(__FILE__, __LINE__);
	end:switch

	strcat6(@Buff, @SizeMarker, @Prefix, @Plus_RX, @RX, @EncodeOffsetAddenum(Offset), "]");

	return @Buff;
end

char @ValueRef_Encode(char @Buff; ValueRef @Ref)
	return @ValueRef_Encode_(@Buff, T_SizeOf(Ref.pType), Ref.ID, Ref.IX, Ref.Offset);
end

char @ValueRef_Encode_ForLEA(char @Buff; ValueRef @Ref)
	return @ValueRef_Encode_(@Buff, 0, Ref.ID, Ref.IX, Ref.Offset);
end

/*
iSTRING, RO=0: @@RWLITERALS + Offset
iSTRING, RO=1: @@ROLITERALS + Offset
iDATA:         @@DATA       + Offset
*/

char @ValueRef_Encode_StaticOffset(char @Buff; ValueRef @Ref)
	char @Prefix = "";
	switch Ref.ID of
	case iDATA:
		@Prefix = "@@DATA";
	case iSTRING:
		if !Ref.RO then
			@Prefix = "@@RWLITERALS";
		else
			@Prefix = "@@ROLITERALS";
		end:if
	default:
		StopInternalCodegen(__FILE__, __LINE__);
	end:switch

	strcat2(@Buff, @Prefix, @EncodeOffsetAddenum(Ref.Offset));
	return @Buff;
end


/*****************************************************************************/

char @EncodeMemRef_Reg_Mult_Reg_Offset(char @Buff; word Size; word Reg1; word Reg2; word RegMode; word Mult; int Offset)

	char@ SizeMarker = @Encode_OperandSize(Size);

	strcat3(@Buff, @SizeMarker, "[", @EncodeReg(NULL, Reg1, RegMode));

	if Mult > 1 then
		strcat2(@Buff, "*", @str(Mult));
	end:if

	if Reg2 != RegNone then
		strcat2(@Buff, "+", @EncodeReg(NULL, Reg2, RegMode));
	end:if

	select
	case Offset > 0:
		strcat3(@Buff, "+", @istr(Offset), "]");
	case Offset < 0:
		strcat3(@Buff, "-", @istr(-Offset), "]");
	default:
		strcat(@Buff, "]");
	end:select

	return @Buff;
end

/*****************************************************************************/

void Emit_CmdRegReg(char @Cmd; word Reg1; word RegMode1; word Reg2; word RegMode2)
	char Buff[nBUFF];
	Buff[0] = #0;
	Emit(@EncodeCmdRegReg(@Buff, @Cmd, Reg1, RegMode1, Reg2, RegMode2));
end

/*****************************************************************************/

void Emit_MOV_or_XCHG(word Reg1, Reg2; word RegMode)
	/*
		XCHG is encoded as a single byte for native-length registers,
		when XCHG'ing with ax/eax/rax.
		0x92 - xchg AX, DX (16-bit mode), xchg EAX, EDX (32-bit mode)
		MOV takes 2 bytes.
		So we prefer XCHG when optimizing for size.
		See also notes on XCHG performance:
		https://stackoverflow.com/questions/45766444/why-is-xchg-reg-reg-a-3-micro-op-instruction-on-modern-intel-architectures
	*/
	if SwOptions.EmitShortCode & (Reg1 == RegA | Reg2 == RegA) then
		Emit_CmdRegReg("xchg", Reg1, RegMode, Reg2, RegMode);
	else
		Emit_CmdRegReg("mov", Reg1, RegMode, Reg2, RegMode);
	end:if
end

/*****************************************************************************/

void Emit_Load_Constant(word Reg; word RegMode; word Value)
	when PHO_Try_Emit_Load_Constant(Reg, RegMode, Value):
		return;

	char Buff[nBUFF];
	Buff[0] = #0;
	Emit(@EncodeLoadConstant(@Buff, Reg, RegMode, Value));
end

/*****************************************************************************/

void Emit_TEST_Reg_Self(word Reg; word RegMode)
	char Buff[nBUFF];
	Buff[0] = #0;
	EmitPhoSkip(@EncodeCmdRegReg(@Buff, "test", Reg, RegMode, Reg, RegMode));
end

void Emit_MOV_Reg_Reg(word Reg1; word Reg2; word RegMode)
	Emit_CmdRegReg("mov", Reg1, RegMode, Reg2, RegMode);
end

void Emit_XCHG_Reg_Reg(word Reg1; word Reg2; word RegMode)
	Emit_CmdRegReg("xchg", Reg1, RegMode, Reg2, RegMode);
end

void Emit_MOVSX_Reg_Reg(word Reg1; word RegMode1; word Reg2; word RegMode2)
	Emit_CmdRegReg("movsx", Reg1, RegMode1, Reg2, RegMode2);
end

void Emit_MOVZX_Reg_Reg(word Reg1; word RegMode1; word Reg2; word RegMode2)
	Emit_CmdRegReg("movzx", Reg1, RegMode1, Reg2, RegMode2);
end

void Emit_PUSH_Reg(word Reg; word RegMode)
	char Buff[nBUFF];
	Buff[0] = #0;
	EmitPhoSkip(@EncodePushReg(@Buff, Reg, RegMode));
end

void Emit_POP_Reg(word Reg; word RegMode)
	char Buff[nBUFF];
	Buff[0] = #0;
	EmitPhoInvalidate(@EncodePopReg(@Buff, Reg, RegMode));
end

void Emit_INC_Reg(word Reg; word RegMode)
	char Buff[nBUFF];
	Buff[0] = #0;
	Emit(@EncodeCmdReg(@Buff, "inc", Reg, RegMode));
end

void Emit_DEC_Reg(word Reg; word RegMode)
	char Buff[nBUFF];
	Buff[0] = #0;
	Emit(@EncodeCmdReg(@Buff, "dec", Reg, RegMode));
end

void Emit_MOVS(word Size)
	Emit("cld");

	select
	case Size == 0:
		pass;
	case Size % 4 == 0:
		Emit_Load_Constant(RegC, 4, Size / 4);
		Emit("rep     movsd");
	case Size % 2 == 0:
		Emit_Load_Constant(RegC, 4, Size / 2);
		Emit("rep     movsw");
	default:
		Emit_Load_Constant(RegC, 4, Size);
		Emit("rep     movsb");
	end:select
end

/*****************************************************************************/

/** Returns nonzero if INC/DEC is preferred over ADD/SUB for the given register and the compilation options.
  Returns 1 if a single INC/DEC is preferred over <ADD/SUB reg, 1>.
  Returns 2 if a couple of INC/DEC is preferred over <ADD/SUB reg, 2>.
*/
word PreferIncDec(word Reg; word RegMode)
	/* <INC AL> and <ADD AL, 1> have the same size */
	when Reg == RegA & RegMode == 1:
		return 0;

	if SwOptions.EmitShortCode then /* We don't care about the speed */
		when RegMode == Mach.Mode:
			/* <ADD EAX, 1> takes 3 bytes and <INC EAX> takes just 1. So 2 INCs are okay, */
			return 2;
		return 1;
	end:if

	when SlowIncDec: /* P4 not happy about INC/DEC. */
		/* Details: https://github.com/dotnet/runtime/issues/7697 */
		return 0;

	/* INC/DEC seems to be ok, so use it, but we aren't crazy enoght about the code size to use double INC/DEC. */
	return 1;
end

/*****************************************************************************/
