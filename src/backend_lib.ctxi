
/*
	Вспомогательные и интерфейсные функции, не подходящие в другие файлы.
*/

/*****************************************************************************/

word AlignTo(word v; word align)
	while v % align !=0 do
		inc v;
	end
	return v;
end

/*****************************************************************************/

word DefaultStaticAlign(word v)
	return AlignTo(v, target_default_static_alignment);
end

/*****************************************************************************/

word DefaultInStackAlign(word v)
	return AlignTo(v, target_default_stack_alignment);
end

/*****************************************************************************/

word SizeOfType(word pType)
	when Dict[pType].Class != cTYPE:
		StopInternal(__FILE__, __LINE__);
	return T_SizeOf(pType);
end

/*****************************************************************************/

/*
	Распаковывает из узлов iDATA, iPARM, iLOCAL и iSTRING информацию об объекте.
	Offset - смещение относительно специфичного источника.
	Напр., для iDATA - смещение от начала секции данных.
*/
word ExtractDataInfo(word P, @pType, @Offset, @RO)

	word ID = Node[P].ID;
	word Value = Node[P].Value;

	select
		case ID == iDATA:
			pType  = Dict[Value].pType;
			Offset = Dict[Value].Label;
			RO     = 0;

		case ID == iPARM:
			when Dict[Value].Class != cARG:
				StopInternal(__FILE__, __LINE__);
			pType  = Dict[Value].pType;
			Offset = Dict[Value].Label;
			RO     = 0;

		case ID == iLOCAL:
			pType  = Local[Value].pType;
			Offset = Local[Value].Value;
			RO     = 0;

		case ID == iSTRING:
			pType  = Dict[Value].pType;
			Offset = Dict[Value].Label;
			RO     = Dict[Value].RO;

		default:
			StopInternal(__FILE__, __LINE__);
      end

	if pType < nDICT then
		when T_IsArray(pType):
			pType = T_ArrayDeref(pType);
	end:if

	return ID;
end

/*****************************************************************************/

bool NodeHasConst(word P; word Data)
	if (Node[P].ID == iNULL & Data == 0)
	 | (Node[P].ID == iLITERAL & Node[P].Value == Data) then
		return true;
	end:if
	return false;
end

bool NodeCanBeEncodedAsImm(word P)
	word ID=Node[P].ID;
	switch ID of
	case iLITERAL, iNULL, iBOOL:
		return true;
	default:
		return false;
	end:switch
end

/*****************************************************************************/

/*

ID             Value Location                  LValue    Indirect
iSTRING, RO=0: [@@RWLITERALS + XI + Offset]    Yes       Yes
iSTRING, RO=1: [@@ROLITERALS + XI + Offset]    No        Yes
iDATA:         [@@DATA       + XI + Offset]    Yes       Yes
iPARM:         [EBP          + XI + Offset]    Yes       Yes
iLOCAL:        [EBP          + XI - Offset]    Yes       Yes
iREF:          [               XI + Offset]    Yes       Yes
iREG                           XI + Offset     No        No
iCONST                              Offset     No        No
*/

struct ValueRef
	word ID;
	word RO;
	word pType;
	word Size;
	word Offset;
	word XI;
end

bool ValueRef_IsLValue(ValueRef@ vref)
	switch vref.ID of
	case iSTRING:
		when vref.RO == 0:
			return true;
		return false;
	case iDATA, iPARM, iLOCAL, iREF:
		return true;
	case iREG, iCONST:
		return false;
	end:switch
end

bool ValueRef_IsIndirect(ValueRef@ vref)
	switch vref.ID of
	case iSTRING, iDATA, iPARM, iLOCAL, iREF:
		return true;
	case iREG, iCONST:
		return false;
	end:switch
end

