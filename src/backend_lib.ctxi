
/*
	Вспомогательные и интерфейсные функции, не подходящие в другие файлы.
*/

/*****************************************************************************/

word AlignTo(word v; word align)
	while v % align !=0 do
		inc v;
	end
	return v;
end

/*****************************************************************************/

word DefaultStaticAlign(word v)
	return AlignTo(v, target_default_static_alignment);
end

/*****************************************************************************/

word DefaultInStackAlign(word v)
	return AlignTo(v, target_default_stack_alignment);
end

/*****************************************************************************/

word SizeOfType(word pType; word nIndx)

	word S = 0;
	when Dict[pType].Class != cTYPE:
		StopInternal();

	S = T_SizeOf(pType);

/*	when nIndx > 0:
		S = nIndx * S;*/

	return S;
end

/*****************************************************************************/

/*
	Распаковывает из узлов iDATA, iPARM, iLOCAL и iSTRING информацию об объекте.
	(Ofs - смещение относительно специфичного источника (напр., для iDATA - смещение от начала секции данных и т.п.))
*/
word ExtractDataInfo(word P, @pType, @nIndx, @Ofs, @RO)

	word ID = Node[P].ID;

	select
		case ID == iDATA:
			pType = Dict[Node[P].Value].pType;
			//nIndx = T_ArrayGetSizeOr0(Dict[Node[P].Value].pType);
			Ofs   = Dict[Node[P].Value].Value;
			RO    = 0;

		case ID == iPARM:
			when Dict[Node[P].Value].Class != cARG:
				StopInternal();
			pType = Dict[Node[P].Value].pType;
			//nIndx = T_ArrayGetSizeOr0(Dict[Node[P].Value].pType);
			Ofs   = Dict[Node[P].Value].Value;
			RO    = 0;

		case ID == iLOCAL:
			pType = Local[Node[P].Value].pType;
			//nIndx = T_ArrayGetSizeOr0(Local[Node[P].Value].pType);
			Ofs   = Local[Node[P].Value].Value;
			RO    = 0;

		case ID == iSTRING:
			nIndx = 0;
			pType = Dict[Node[P].Value].pType;
			Ofs   = Dict[Node[P].Value].Value;
			RO    = Dict[Node[P].Value].RO;

		default:
			StopInternal();
      end

	nIndx = 0;
	if pType < nDICT then
		nIndx = T_ArrayGetSizeOr0(pType);
		when T_IsArray(pType) != 0:
			pType = T_ArrayDeref(pType);
	end:if

	return ID;
end

/*****************************************************************************/

word NodeHasConst(word P; word Data)
	if (Node[P].ID == iNULL & Data == 0)
	 | ( (Node[P].ID == iWORD | Node[P].ID == iINT) & Node[P].Value == Data) then
		return 1;
	end:if
	return 0;
end

/*****************************************************************************/

