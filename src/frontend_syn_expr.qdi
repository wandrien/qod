
include "frontend_syn_cast.qdi";
include "frontend_syn_cte.qdi";

namespace ExpressionParser of

/*****************************************************************************/

word Char2Digit[256];

void InitNumberParser()
	word Ch = 0;
	while Ch < 256 do
		word Digit;
		select
		case Ch >= word('0') & Ch <= word('9'):
			Digit = Ch - word('0');
		case Ch >= word('A') & Ch <= word('Z'):
			Digit = Ch - word('A') + 10;
		case Ch >= word('a') & Ch <= word('z'):
			Digit = Ch - word('a') + 10;
		default:
			Digit = 10000;
		end:select
		Char2Digit[Ch] = Digit;
		inc Ch;
	end:while
end

/*****************************************************************************/

/* Парсинг строки в целое число по указанному основанию. */
word val2(char @Str; int StrLen; word Base)
	when StrLen < 1:
		Stop(@eMALFORMEDINT);

	when Str[0] == #0:
		Stop(@eMALFORMEDINT);

	if Base < 2 | Base > 36 then
		Stop(@eINVALIDBASE);
	end

	bool Overflow = false;
	int i = 0;

	word Value = 0;
	while i < StrLen & Str[i] != #0 do

		while Str[i] == '_' do
			inc i;
		end

		word ch = word(Str[i]);
		word Digit = Char2Digit[ch];

		when Digit >= Base:
			StopWithSubjectChar(@eWRONGCHARININT, char(ch));

		word NewValue = Value * Base + Digit;

		if !Overflow & NewValue < Value then
			Overflow = true;
			Error(@eINTTOOBIG);
		end:if

		Value = NewValue;

		inc i;
	end:while

	return Value;
end

/*****************************************************************************/

/* Парсинг строки в число. */
word val(char @Buff)
	word Base;
	int P;
	int Len = 0;

	forever do
		int StrLen = int(strlen(@Buff));
		when StrLen < 0:
			StopInternal(__FILE__, __LINE__);

		if StrLen == 1 then
			/* Срезаем угол для частого варианта:
			   число из одной цифры может быть только десяточное. */
			Base = 10;
			P    = 0;
			Len  = StrLen;
			exit;
		end:if

		char LastChar = Buff[StrLen - 1];
		if LastChar == 'h' | LastChar == 'H' then
			/* Суффикс h - шестнадцатиричное. */
			Base = 16;
			P    = 0;
			Len  = StrLen - 1;
			exit;
		end:if

		if Buff[0] == '0' then
			switch Buff[1] of
			/* Префикс 0x - шестнадцатиричное. */
			case 'x', 'X':
				Base = 16;
				P    = 2;
				Len  = StrLen - P;
				exit;
			/* Префикс 0b - двоичное. */
			case 'b', 'B':
				Base = 2;
				P    = 2;
				Len  = StrLen - P;
				exit;
			/* Префикс 0o - восьмиричное. */
			case 'o', 'O':
				Base = 8;
				P    = 2;
				Len  = StrLen - P;
				exit;
			end:switch
		end:if

		int k = int(str_find_chars(@Buff, "$"));
		select
		/* Символ $ не найден - десятичное. */
		case Buff[k] == #0:
			Base = 10;
			P    = 0;
			Len  = StrLen;
		/* Символ $ в начале строки - шестнадцатиричное. */
		case k == 0:
			Deprecated(@dprHEXFORMAT);
			Base = 16;
			P    = 1;
			Len  = StrLen - P;
		/* Символ $ в середине строки - слева от него основание в десятичном виде, справа - само число. */
		default:
			Base = val2(@Buff, k, 10);
			P    = k + 1;
			Len  = StrLen - P;
		end:select

		exit;
	end:forever

	return val2(@Buff[P], Len, Base);
end

/*****************************************************************************/

void EnsureValidIdentifier(char @Buff)
	word I = 0;
	if !isalpha(Buff[0]) then
		StopWithSubject(@eNAMEEXPECTED, @Buff);
	end:if
end

/*****************************************************************************/

word Tabl(char @Buff)
	word nIndx = 0;
	if strcmp(@Buff,"[") == 0 then
		word P = Expr(PRIO_ZERO, @Scan(@Buff));

		select
		case !T_IsInteger(Node[P].pType):
			Error(@eARR_SIZE_TYPE);
			ErrorWithSubject(@eARR_SIZE_TYPE_2, @T_GetName(Node[P].pType));
			nIndx = 1;
		case !NodeHasImmediateValue(P):
			Error(@eARR_SIZE_CONSTEXP);
			nIndx = 1;
		default:
			nIndx = NodeGetImmediateValue(P);
		end:select

		if nIndx < 1 then
			Error(@eARR_SIZE_LO_BOUND);
			nIndx = 1;
		end

		if T_IsSigned(Node[P].pType) then
			int i = as_signed(nIndx);
			if i < 1 then
				Error(@eARR_SIZE_LO_BOUND);
				nIndx = 1;
			end
		end

		/*
		TODO:
		if nIndx > SIZE_MAX then
			Error(@eARR_SIZE_HI_BOUND);
			nIndx = 1;
		end
		*/

		when strcmp(@Buff,"]")!=0:
			Stop(@eBRACKETEXP);
	    Scan(@Buff);
	end:if

	return nIndx;
end

word Tabl_(char @Buff; word T)
	word S = Tabl(@Buff);
	if S > 0 then
		return T_Array(T, S);
	end:if
	return T;
end

/*****************************************************************************/

/* Читает строковой литерал и создаёт синтаксический узел для него. */

word StringNode()
	word D = DictAlloc();
	Dict[D].Class = cLITERAL;
	Dict[D].RO = byte(ROStrings);
	DictSetName(D, "");
	ScanString(D);

	word P = Peek();
	Node[P].ID = iSTRING;
	NodeSetDict(P, D);

	return P;
end

word StringNode__FILE__()
	char @Value = @CurrentFileInfo.FileName;
	word i = strlen(@Value) + 1;

	if pCurrentFileLiteral == nDICT & ROStrings == 1 then
		word D = DictAlloc();
		Dict[D].Class = cLITERAL;
		Dict[D].RO = byte(ROStrings);
		DictSetName(D, "");
		Dict[D].pType = T_PtrTo(st_char);
		Dict[D].LiteralValue = SaveString(@Value, i);
		Dict[D].nLiteralSize = i;
		pCurrentFileLiteral = D;
	end

	word P = Peek();
	Node[P].ID = iSTRING;
	NodeSetDict(P, pCurrentFileLiteral);

	return P;
end

/*****************************************************************************/

word BoolNode(bool value)
	word P1 = Peek();
	Node[P1].ID    = iLITERAL;
	Node[P1].pType = st_bool;
	if value then
		Node[P1].Value = 1;
	else
		Node[P1].Value = 0;
	end
	return P1;
end

/*****************************************************************************/

/* Парсит последовательность операций разыменования указателя, возвращает количество операций. */

word ReadPtrs(char @Buff)
	word nPtr=0;
	while strcmp(@Buff,"@") == 0 do
		inc nPtr;
		Scan(@Buff);
	end
	return nPtr;
end

/*****************************************************************************/

void FuncArgs_ReadDecl(char @Buff; word pARGS)
	word pPrefixType = ResolveGlobal(@Buff, NULL);
	when pPrefixType >= nDICT | Dict[pPrefixType].Class != cTYPE:
		StopWithSubject(@eTYPEEXP, @Buff);

	forever do
		word nPtr = ReadPtrs(@Buff);

		EnsureValidIdentifier(@Buff);
		word pARG = FindInNamespace(@Buff, pARGS);
		when pARG < nDICT:
			ErrorWithSubject(@eDUPLICATE, @Buff);

		pARG = DictAlloc();
		DictSetName(pARG, @Buff);
		Dict[pARG].Class = cARG;
		word pType = ReadTypeSuffix(@Buff, T_nPtrTo(nPtr, pPrefixType));
		Dict[pARG].pType = pType;
		DictAddToNamespace(pARG, pARGS);

		when pType == st_void:
			Error(@eNOVOID);
		when T_IsFunc(pType):
			Error(@eNOVAL);

		when strcmp(@Scan(@Buff),",")!=0:
			exit;

		Scan(@Buff);
	end:forever
end

void FuncArgs(char @Buff; word pFunc)
	word pARGS = DictAlloc();
	DictSetName(pARGS, "args");
	Dict[pARGS].Class = cARGS;
	DictAddToNamespace(pARGS, pFunc);

	Scan(@Buff);
	when str_eq(@Buff, ")"):
		return;

	bool FirstIteration = true;
	forever do
		FuncArgs_ReadDecl(@Buff, pARGS);
		select
		case str_eq(@Buff, ")"):
			exit;
		case str_eq(@Buff, ";"):
			Scan(@Buff);
			when str_eq(@Buff, ")"):
				exit;
		default:
			Stop(@eSEMICOLONEXP);
		end
	end:forever
end

/*****************************************************************************/

word ReadTypeSuffix(char @Buff; word pPrefixType)
	word pType = pPrefixType;
	select
	case str_eq(@Buff, "@"):
		pType = ReadTypeSuffix(@Scan(@Buff), pType);
		return T_nPtrTo(1, pType);
	case str_eq(@Buff, "["):
		word Count = Tabl(@Buff);
		pType = ReadTypeSuffix(@Buff, pType);
		return T_Array(pType, Count);
	case str_eq(@Buff, "("):
		word D = DictAlloc();
		DictSetName(D, "");
		Dict[D].Class = cTYPE;
		Dict[D].Sub   = sFUNCTYPE;
		FuncArgs(@Buff, D);
		Scan(@Buff);
		Dict[D].pType = ReadTypeSuffix(@Buff, pType);
		return D;
	default:
		return pType;
	end:select
end

/*****************************************************************************/

/*
	Вычисление логического НЕ преобразованием исходной форумулы.

	FIXME: Эта функция должна быть частью подсистемы CTE.
*/

word Not(word P)
	switch Node[P].ID of
	case iOR:   Node[P].ID = iAND; Not(Node[P].pLeft); Not(Node[P].pRight);
	case iAND:  Node[P].ID = iOR;  Not(Node[P].pLeft); Not(Node[P].pRight);
	case iXOR:  Node[P].ID = iEQV;
	case iEQV:  Node[P].ID = iXOR;
	case iLT:   Node[P].ID = iGE;
	case iLE:   Node[P].ID = iGT;
	case iEQ:   Node[P].ID = iNE;
	case iNE:   Node[P].ID = iEQ;
	case iGE:   Node[P].ID = iLT;
	case iGT:   Node[P].ID = iLE;
	default:
		select
		case NodeIsFalse(P):
			NodeAssignBool(P, true);
		case NodeIsTrue(P):
			NodeAssignBool(P, false);
		default:
			word P2 = Peek();
			Node[P2].ID    = iNOT;
			Node[P2].pLeft = P;
			return P2;
		end:select
	end:switch

	return P;
end

/*****************************************************************************/

void ParseCallArgs(word pFunc; word @P7; char @Buff; word pBracket)
	word pARGS = T_FuncGetArgs(pFunc);
	when pARGS >= nDICT:
		StopInternal(__FILE__, __LINE__);
	word pARG = Dict[pARGS].pFirst;

	while pARG < nDICT do
		word P8=Peek();
		Node[P8].ID   =iPUSH;
		Node[P8].pLeft=Expr(PRIO_ZERO, @Buff);

		ImplicitCast(Dict[pARG].pType, @Node[P8].pLeft);

		P7 = P8;
		@P7=@Node[P8].pRight;

		pARG = Dict[pARG].pNext;

		if  pARG < nDICT then
			when strcmp(@Buff,",")!=0:
				Stop(@eCOMMAEXP);
			Scan(@Buff);
		end:if

	end:while

	when !str_eq(@Buff,@Bracket[pBracket].RightBracket):
		Stop(@eBRACKETEXP);
	Scan(@Buff);
end

/*****************************************************************************/

word ExprInParentheses(char @Buff; char @ExprName)
	word b = LookupBracket(BracketType_Parentheses, @Buff);
	if b == BRACKET_INVALID then
		if @ExprName != NULL then
			StopWithSubject(@eOPENBRACKETEXPAFTER, @ExprName);
		else
			Stop(@eOPENBRACKETEXP);
		end:if
	end:if

	word P = Expr(PRIO_ZERO, @Scan(@Buff));
	if !str_eq(@Buff,@Bracket[b].RightBracket) then
		ErrorWithSubject(@eCLOSEBRACKETEXPBEFORE, @Buff);
		if @ExprName != NULL then
			ErrorWithSubject(@eMISSINGBRACKETIN, @ExprName);
		end:if
	else
		Scan(@Buff);
	end
	return P;
end

/*****************************************************************************/

word AutoDerefPtr(word pExpr)
	forever do
		word pType = Node[pExpr].pType;
		when !T_IsPtr(pType): exit;
		word P = Peek5(iADDR, pExpr, nNODE, T_DerefPtr(pType));
		Node[P].SourceLocation = Node[pExpr].SourceLocation;
		pExpr = P;
	end:forever
	return pExpr;
end

/*****************************************************************************/

word ReadFuncCall(char @Buff; word pPreallocated; word pFunc; word pBracket)
	word pFuncType = Func_GetType(pFunc);
	word pRetType = T_FuncGetRetType(pFuncType);
	Node[pPreallocated].ID = iCALL;
	Node[pPreallocated].Value = pFunc;
	Node[pPreallocated].pType = pRetType;

	Scan(@Buff);
	ParseCallArgs(pFuncType, @Node[pPreallocated].pLeft, @Buff, pBracket);
	return pPreallocated;
end

word ReadIndirecFuncCall(char @Buff; word pPtrExpr; word pBracket)
	word pFuncType = Node[pPtrExpr].pType;
	word pRetType = T_FuncGetRetType(pFuncType);
	pPtrExpr = Peek3(iLPTR, pPtrExpr);
	Node[pPtrExpr].pType = T_nPtrTo(1, pFuncType);

	word P_CALL2 = Peek5(iCALL2, nNODE, pPtrExpr, pRetType);

	Scan(@Buff);
	ParseCallArgs(pFuncType, @Node[P_CALL2].pLeft, @Buff, pBracket);

	return P_CALL2;
end

word ReadCast(char @Buff; word pTargetType; word pBracket)
	word pCastee = Expr(PRIO_ZERO, @Scan(@Buff));

	if IsExplicitCastPossible(Node[pCastee].pType, pTargetType) then
		AddCast(pTargetType, @pCastee);
	else
		AddFakeCast(pTargetType, @pCastee);
		char Buff2[nBUFF];
		strcpy4(@Buff2,
			@msgNOWAYTOCAST_1,
			@T_GetName(Node[pCastee].pType),
			@msgNOWAYTOCAST_2,
			@T_GetName(pTargetType)
		);
		ErrorWithSubject(@eTYPE, @Buff2);
	end:if

	when !str_eq(@Buff,@Bracket[pBracket].RightBracket):
		Stop(@eBRACKETEXP);
	Scan(@Buff);
	
	return pCastee;
end

word MakeNodeForDict(word I)
	switch Dict[I].Class of
	case cDATA:
		word P = Peek();
		Node[P].ID = iDATA;
		Node[P].Value = I;
		Node[P].pType = Dict[I].pType;
		return P;

	case cLITERAL:
		word P = Peek();
		word pTypeI = Dict[I].pType;
		select
		case
			(pTypeI == st_word) |
			(pTypeI == st_int)  |
			(pTypeI == st_char) |
			(pTypeI == st_bool) :
			NodeAssignLiteral(P, pTypeI, Dict[I].LiteralValue);

		case pTypeI == T_PtrTo(st_char):
			P = Peek();
			Node[P].ID = iSTRING;
			Node[P].pType = pTypeI;
			if ROStrings != 0 then
				Node[P].Value = I;
			else
				word NewLiteral = DictDupLiteral(I);
				Dict[NewLiteral].RO = 0;
				Node[P].Value = NewLiteral;
			end

		default:
			StopInternal(__FILE__, __LINE__);
		end:select

		return P;

	case cFUNC:
		word P = Peek();
		Node[P].ID    = iFUNC;
		Node[P].pType = T_PtrTo(T_FuncTypeForFunction(I));
		Node[P].Value = I;
		return P;

	case cTYPE:
		word P = Peek();
		Node[P].ID    = iTYPE;
		Node[P].pType = st_type;
		Node[P].Value = I;
		return P;

	case cWORD:
		StopWithSubject(@eKEYWORDUNEXP, @DictGetName(I));
	default:
		StopWithSubject(@eUNDECLARED, @DictGetName(I));
	end:switch
end

word ReadPostfixOperators(char @Buff; word pPrefixExpr)
	word pType = Node[pPrefixExpr].pType;
	forever do
		while str_eq(@Buff,"[") & T_IsArray(pType) do /* Индексация массива. */
			word P3 = Peek();
			Node[P3].ID = iINDEX;
			Node[P3].Value = T_ArrayGetLen(pType);
			Node[P3].pLeft = pPrefixExpr;
			Node[P3].pRight = Expr(PRIO_ZERO, @Scan(@Buff));
			pType = T_DerefArray(pType);
			Node[P3].pType = pType;
			ImplicitCast(st_word, @Node[P3].pRight);

			when str_ne(@Buff,"]"):
				Stop(@eBRACKETEXP);
			Scan(@Buff);

			pPrefixExpr = P3;
		end:while

		while str_eq(@Buff,"[") do /* Индексация указателя. */
			when !T_IsPtr(pType):
				Stop(@eNOADDR);
			word P3 = Peek5(iADDR, pPrefixExpr, nNODE, T_DerefPtr(pType));

			Node[P3].pRight = Expr(PRIO_ZERO, @Scan(@Buff));
			ImplicitCast(st_word, @Node[P3].pRight);

			when str_ne(@Buff,"]"):
				Stop(@eBRACKETEXP);
			Scan(@Buff);

			pPrefixExpr = P3;
			pType = Node[pPrefixExpr].pType;
		end:while

		word b = LookupBracket(BracketType_Parentheses, @Buff);
		select
		case b != BRACKET_INVALID: /* Вызов функции или приведение типа. */
			pPrefixExpr = AutoDerefPtr(pPrefixExpr);
			pType = Node[pPrefixExpr].pType;

			select
			case Node[pPrefixExpr].ID == iFUNC:
				pPrefixExpr = ReadFuncCall(@Buff,
					pPrefixExpr /* overwrite node*/,
					Node[pPrefixExpr].Value, b);
				pType = Node[pPrefixExpr].pType;
			case T_IsFunc(pType):
				pPrefixExpr = ReadIndirecFuncCall(@Buff, pPrefixExpr, b);
				pType = Node[pPrefixExpr].pType;
			case Node[pPrefixExpr].ID == iTYPE:
				pPrefixExpr = ReadCast(@Buff, Node[pPrefixExpr].Value, b);
				pType = Node[pPrefixExpr].pType;
			default:
				Stop(@eHEADEREXP);
			end:select

		case strcmp(@Buff,".") == 0: /* Обращение к полю структуры/пространства имён. */
			pPrefixExpr = AutoDerefPtr(pPrefixExpr);
			pType = Node[pPrefixExpr].pType;

			Scan(@Buff);

			select
			case pType == st_type:
				word pMember = ResolveInNamespace(@Buff, Node[pPrefixExpr].Value);
				when pMember >= nDICT:
					StopWithSubject(@eUNDECLARED_WITHIN_NAMESPACE, @Buff);
				pPrefixExpr = MakeNodeForDict(pMember);
				pType = Node[pPrefixExpr].pType;
				Scan(@Buff);

			case Dict[pType].Sub == sSTRUCT:
				word F = FindInNamespace(@Buff, pType);
				when F >= nDICT:
					StopWithSubject(@eUNDECLARED_WITHIN_STRUCT, @Buff);
				when Dict[F].Class != cFIELD:
					StopInternal(__FILE__, __LINE__);

				word P3=Peek();
				Node[P3].ID = iFIELD;
				Node[P3].pLeft = pPrefixExpr;
				Node[P3].Value = F;
				pType = Dict[F].pType;
				Node[P3].pType = pType;
				pPrefixExpr = P3;

				Scan(@Buff);
			default:
				StopWithSubject(@eSTRUCTEXP, @Buff);
			end:select
		default:
			exit;
		end:select
	end:forever

	return pPrefixExpr;
end

/*****************************************************************************/

word Primary(word Prty; char @Buff)
	if isdigit(Buff[0]) then /* Число. */
		word P1 = Peek();
		NodeAssignWord(P1, val(@Buff));
		Scan(@Buff);
		return P1;
	end

	if str_eq(@Buff,"__LINE__") then
		word P1 = Peek();
		NodeAssignWord(P1, CurrentFileInfo.Line);
		Scan(@Buff);
		return P1;
	end

	word pType;
	word nPtr;

	word Flag=0;
	word P1;

	bool SkipScan = false;

	nPtr = ReadPtrs(@Buff);

	if Flag == 0 then /* Это имя текущего файла? */
		if str_eq(@Buff,"__FILE__") then
			if nPtr>0 then
				Stop(@eSTRING);
			end

			P1    = StringNode__FILE__();
			nPtr  = 1;
			pType = st_char;
			Flag  = 1;
		end:if
	end:if

	if Flag == 0 then /* Это строка? */
		if strcmp(@Buff,"~"") == 0 then
			if nPtr>0 then
				Stop(@eSTRING);
			end

			P1    = StringNode();
			nPtr  = 1;
			pType = st_char;
			Flag  = 1;
		end:if
	end:if

	if Flag == 0 then /* Это локальная переменная? */
		word I = ResolveLocal(@Buff);
		if I < nLOCAL then
			P1=Peek();
			Node[P1].ID    = iLOCAL;
			Node[P1].Value = I;
			pType          = Local[I].pType;
			Flag           = 1;
		end:if
	end:if

	if Flag == 0 then /* Это параметр функции? */
		word I = ResolveParm(@Buff);
		if I < nDICT then
			P1=Peek();
			Node[P1].ID    = iPARM;
			Node[P1].Value = I;
			pType          = Dict[I].pType;
			Flag           = 1;
		end:if
	end:if

	if Flag == 0 then /* Значит это глобальное имя. */
		word I = ResolveGlobal(@Buff, NULL);
		if I>=nDict then
			StopWithSubject(@eUNDECLARED, @Buff);
		end:if

		switch Dict[I].Class of
		case cDATA:
			P1 = Peek();
			Node[P1].ID = iDATA;
			Node[P1].Value = I;
			pType = Dict[I].pType;
			SkipScan = true;

		case cLITERAL:
			P1=Peek();
			word pTypeI = Dict[I].pType;
			select
			case
				(pTypeI == st_word) |
				(pTypeI == st_int)  |
				(pTypeI == st_char) |
				(pTypeI == st_bool) :
				pType = pTypeI;
				NodeAssignLiteral(P1, pType, Dict[I].LiteralValue);

			case pTypeI == T_PtrTo(st_char):
				Node[P1].ID    =iSTRING;
				if ROStrings != 0 then
					Node[P1].Value = I;
				else
					word NewLiteral = DictDupLiteral(I);
					Dict[NewLiteral].RO = 0;
					Node[P1].Value = NewLiteral;
				end
				pType = st_char;
			default:
				StopInternal(__FILE__, __LINE__);
			end:select

			//pType          = Dict[I].pType;
			SkipScan = true;

		case cFUNC:
			word b = LookupBracket(BracketType_Parentheses, @Buff);
			if b != BRACKET_INVALID then
				P1 = ReadFuncCall(@Buff, Peek(), I, b);
				pType = Node[P1].pType;
				SkipScan = true;
			else
				P1 = Peek();
				Node[P1].ID = iFUNC;
				Node[P1].Value = I;
				Node[P1].pType = T_PtrTo(T_FuncTypeForFunction(I));

				return P1;
			end:if

		case cTYPE:
			word b = LookupBracket(BracketType_Parentheses, @Buff);
			if b != BRACKET_INVALID then
				P1 = ReadCast(@Buff, I, b);
				/*
					TODO:
						Старый код построения Primary портил дерево для iCAST,
						поэтому здесь стоял принудительный выход из функции.
						Код был переписан, но сейчас iCAST поддерживается только для типов,
						для которых операции точки, индексации массива и вызова
						функции не имеют смысла.
						Поэтому принудительный выход пока оставлен как есть.
				*/
				return P1;
			else
				if nPtr>0 then
					Stop(@eUNDECLARED);
				end:if

				P1 = Peek();
				Node[P1].ID    = iTYPE;
				Node[P1].pType = st_type;
				Node[P1].Value = I;

				return P1;
			end:if
		case cWORD:
			StopWithSubject(@eKEYWORDUNEXP, @DictGetName(I));
		default:
			StopWithSubject(@eUNDECLARED, @DictGetName(I));
		end:switch
	end:if


	/*
		В этом месте имеем следующие поля:
		P1 - дочерний узел
		pType - тип дочернего узла
		nPtr - количество операций @ перед узлом.
	*/

	Node[P1].pType = pType;

	if !SkipScan then
		Scan(@Buff);
	end
	P1 = ReadPostfixOperators(@Buff, P1);
	pType = Node[P1].pType;

	if (Prty >= PRIO_LVALUE) & (strcmp(@Buff,"=") != 0) then
		while T_IsPtr(pType) do
			pType = T_DerefPtr(pType);
		end:while
	end:if

	word pTypeDeref = pType;
	word nPtr1 = 0;
	while T_IsPtr(pTypeDeref) do
		inc nPtr1;
		pTypeDeref = T_DerefPtr(pTypeDeref);
	end:while

	word P4=nNODE;
	if Prty < PRIO_INC then
		if nPtr>nPtr1+1 then
			Stop(@eNOADDR);
		end:if

		if nPtr>nPtr1 then
			P4=Peek();
			Node[P4].ID = iLPTR;
			Node[P4].pType = T_nPtrTo(1, pType);
		end:if
	end:if

	while nPtr1>nPtr do
		pType = T_DerefPtr(pType);
		P1 = Peek5(iADDR, P1, nNODE, pType);
		dec nPtr1;
	end:while

	if P4 != nNODE then
		Node[P4].pLeft = P1;
		P1 = P4;
	end:if

	return P1;

end

/*****************************************************************************/

word Expr(word Prio; char @Buff)

	word P1;
	word O;

	O = LookupOperator(@Buff, Prio, OPERATOR_UPRE);
	if O == OPERATOR_INVALID then
		P1 = Primary(Prio, @Buff);
		CTE(P1);
	else
		P1 = Operator[O].Handler(nNODE, O, @Buff);
		when Prio <= PRIO_EXPR:
			P1 = ReadPostfixOperators(@Buff, P1);
	end:if

	forever do
		O = LookupOperator(@Buff, Prio, OPERATOR_BLEFT);
		if O == OPERATOR_INVALID then
			exit;
		end

		P1 = Operator[O].Handler(P1, O, @Buff);
		when Prio <= PRIO_EXPR:
			P1 = ReadPostfixOperators(@Buff, P1);
	end:forever

	return P1;
end

/*****************************************************************************/

word ExprBinOp(word P1; word O; char @Buff)

	word P_OP = Peek();
	word ID = Operator[O].ID;
	Node[P_OP].ID = ID;

	if P1 >= nNODE then
		StopInternal(__FILE__, __LINE__);
	else
		Node[P_OP].pLeft  = P1;
		Node[P_OP].pRight = Expr(Operator[O].Prio, @Scan(@Buff));
		Cast2(P_OP, O);
	end:if

	return P_OP;
end

/*****************************************************************************/

word ExprParentheses(word P1; word O; char @Buff)
	word b = LookupBracket(BracketType_Parentheses, @Buff);
	when b == BRACKET_INVALID:
		StopInternal(__FILE__, __LINE__);

	word P2 = Expr(PRIO_ZERO, @Scan(@Buff));
	if !str_eq(@Buff,@Bracket[b].RightBracket) then
		Stop(@eBRACKETEXP);
	end
	Scan(@Buff);

	return P2;
end

/*****************************************************************************/

word ExprAsSigned(word P1; word O; char @Buff)
	word P = ExprInParentheses(@Scan(@Buff), @OperatorGetName(O));
	select
	case T_IsUnsigned(Node[P].pType):
		word pTypeCastTo = T_GetIntegerPair(Node[P].pType);
		when !T_IsSigned(pTypeCastTo):
			StopInternal(__FILE__, __LINE__);
		AddReinterpretCast(pTypeCastTo, @P);
	case T_IsSigned(Node[P].pType):
		pass;
	default:
		Error(@eWRONGTYPE_AS_SIGNED);
		ErrorWithSubject(@eWRONGTYPE_2NDLINE, @T_GetName(Node[P].pType));
		AddFakeCast(st_int, @P);
	end:select
	return P;
end

word ExprAsUnsigned(word P1; word O; char @Buff)
	word P = ExprInParentheses(@Scan(@Buff), @OperatorGetName(O));
	select
	case T_IsSigned(Node[P].pType):
		word pTypeCastTo = T_GetIntegerPair(Node[P].pType);
		when !T_IsUnsigned(pTypeCastTo):
			StopInternal(__FILE__, __LINE__);
		AddReinterpretCast(pTypeCastTo, @P);
	case T_IsUnsigned(Node[P].pType):
		pass;
	default:
		Error(@eWRONGTYPE_AS_SIGNED);
		ErrorWithSubject(@eWRONGTYPE_2NDLINE, @T_GetName(Node[P].pType));
		AddFakeCast(st_int, @P);
	end:select
	return P;
end

/*****************************************************************************/

word Expr_GuardedExpr(char @Buff; ExprGuard @Guard; char @Msg; char @ExprName)
	word P = ExprInParentheses(@Buff, @ExprName);
	if !Guard(P) then
		ErrorAtNode(P, @Msg);
	end
	return P;
end

word Expr_BoolFromGuard(char @Buff; ExprGuard @Guard; char @ExprName)
	word P = ExprInParentheses(@Buff, @ExprName);
	return BoolNode(Guard(P));
end

/*****************************************************************************/

word ExprTypeExpr(word P1; word O; char @Buff)
	return Expr_GuardedExpr(@Scan(@Buff), IsTypeExpr, @eNOTATYPEEXPR, @OperatorGetName(O));
end

word ExprConstExpr(word P1; word O; char @Buff)
	return Expr_GuardedExpr(@Scan(@Buff), IsConstExpr, @eNOTACONSTEXPR, @OperatorGetName(O));
end

word ExprStaticExpr(word P1; word O; char @Buff)
	return Expr_GuardedExpr(@Scan(@Buff), IsStaticExpr, @eNOTASTATICEXPR, @OperatorGetName(O));
end

word ExprTangibleExpr(word P1; word O; char @Buff)
	return Expr_GuardedExpr(@Scan(@Buff), IsTangibleExpr, @eNOTATANGIBLEEXPR, @OperatorGetName(O));
end

/*****************************************************************************/

word ExprIsTypeExpr(word P1; word O; char @Buff)
	return Expr_BoolFromGuard(@Scan(@Buff), IsTypeExpr, @OperatorGetName(O));
end

word ExprIsConstExpr(word P1; word O; char @Buff)
	return Expr_BoolFromGuard(@Scan(@Buff), IsConstExpr, @OperatorGetName(O));
end

word ExprIsStaticExpr(word P1; word O; char @Buff)
	return Expr_BoolFromGuard(@Scan(@Buff), IsStaticExpr, @OperatorGetName(O));
end

word ExprIsTangibleExpr(word P1; word O; char @Buff)
	return Expr_BoolFromGuard(@Scan(@Buff), IsTangibleExpr, @OperatorGetName(O));
end

/*****************************************************************************/

word ExprTypeOf(word _P1; word O; char @Buff)
	word P = ExprInParentheses(@Scan(@Buff), @OperatorGetName(O));

	word P1 = Peek();
	Node[P1].ID    = iTYPE;
	Node[P1].pType = st_type;
	Node[P1].Value = Node[P].pType;
	return P1;
end

/*****************************************************************************/

word TypeOrTypeOf(word P)
	if IsTypeExpr(P) then
		return Node[P].Value;
	else
		return Node[P].pType;
	end:if
end

word ExprSizeOf(word _P1; word O; char @Buff)
	word pType = TypeOrTypeOf(ExprInParentheses(@Scan(@Buff), @OperatorGetName(O)));
	word P1 = Peek();
	NodeAssignWord(P1, T_SizeOf(pType));
	return P1;
end

word ExprBitsizeOf(word _P1; word O; char @Buff)
	word pType = TypeOrTypeOf(ExprInParentheses(@Scan(@Buff), @OperatorGetName(O)));
	word Size = T_SizeOf(pType);
	word BitSize = Size * 8;
	when BitSize < Size:
		Stop(@eBITSIZEOVERFLOW);
	word P1 = Peek();
	NodeAssignWord(P1, BitSize);
	return P1;
end

word ExprCountOf(word _P1; word O; char @Buff)
	word pType = TypeOrTypeOf(ExprInParentheses(@Scan(@Buff), @OperatorGetName(O)));
	when !T_IsArray(pType):
		Stop(@eCOUNTOFREQARR);
	word P1 = Peek();
	NodeAssignWord(P1, T_ArrayGetLen(pType));
	return P1;
end

/*****************************************************************************/

word ExprLitChar(word P_; word O; char @Buff)

	word P1=Peek();

	select
	case strcmp(@Buff,"#") == 0: /* Символ в #-виде. */
		word N=val(@Scan(@Buff));
		if   N>255 then
			Stop(@eOVERFLOW);
		end
		NodeAssignChar(P1, N);

	case strcmp(@Buff,"'") == 0: /* Символ. */
		NodeAssignChar(P1, word(ScanChar()));
		if Read()!='~'' then
			Stop(@eQUOTEXP);
		end
		Next();
	default:
		StopInternal(__FILE__, __LINE__);
	end:select

	Scan(@Buff);

	return P1;
end

word ExprLitNULL(word P_; word O; char @Buff)
	word P1=Peek();
	Node[P1].ID = iNULL;
	Node[P1].pType = st_nulltype;
	Node[P1].Value = 0;
	Scan(@Buff);
	return P1;
end

word ExprLitFALSE(word P_; word O; char @Buff)
	word P1 = BoolNode(false);
	Scan(@Buff);
	return P1;
end

word ExprLitTRUE(word P_; word O; char @Buff)
	word P1 = BoolNode(true);
	Scan(@Buff);
	return P1;
end

/*****************************************************************************/

word ExprNOT(word P_; word O; char @Buff)

	word P1;

	word P2=Expr(Operator[O].Prio, @Scan(@Buff));
	word pType = Node[P2].pType;

	select
	case pType == st_byte | pType == st_word:
		P1=Peek();
		Node[P1].ID    =iBIT_NOT;
		Node[P1].pLeft = P2;

	case pType == st_bool:
		P1 = Not(P2);

	default:
		Stop(@eTYPE);
	end:select

	Node[P1].pType = pType;

	return P1;
end

/*****************************************************************************/

word ExprNEG(word P_; word O; char @Buff)

	word pLeft = Expr(Operator[O].Prio, @Scan(@Buff));
	word pTargetType;
	select
	case T_IsSigned(Node[pLeft].pType):
		pTargetType = Node[pLeft].pType;
	case T_IsUnsigned(Node[pLeft].pType):
		pTargetType = T_GetIntegerPair(Node[pLeft].pType);
	default:
		ImplicitCast(st_int, @pLeft);
		pTargetType = Node[pLeft].pType;
	end:select

	word P1 = Peek();
	Node[P1].ID    = iNEG;
	Node[P1].pLeft = pLeft;
	Node[P1].pType = pTargetType;

	select
	case (Node[pLeft].ID == iLITERAL) & (Node[pLeft].pType == st_word | Node[pLeft].pType == st_int):
		if Node[pLeft].pType == st_word & Node[pLeft].Value > 0x80000000 then
			Stop(@eCALCERR);
		end
		NodeAssignInt(P1, -Node[pLeft].Value);
	end:select

	return P1;

end

/*****************************************************************************/

void RegisterOperators()

	RegisterOperator("|"    , PRIO_BOOL , OPERATOR_BLEFT, iOR , @ExprBinOp);
	RegisterOperator("^"    , PRIO_BOOL , OPERATOR_BLEFT, iXOR, @ExprBinOp);
	RegisterOperator("&"    , PRIO_BOOL , OPERATOR_BLEFT, iAND, @ExprBinOp);

	RegisterOperator("<"    , PRIO_COMP , OPERATOR_BLEFT, iLT , @ExprBinOp);
	RegisterOperator("<="   , PRIO_COMP , OPERATOR_BLEFT, iLE , @ExprBinOp);
	RegisterOperator("=="   , PRIO_COMP , OPERATOR_BLEFT, iEQ , @ExprBinOp);
	RegisterOperator("!="   , PRIO_COMP , OPERATOR_BLEFT, iNE , @ExprBinOp);
	RegisterOperator(">"    , PRIO_COMP , OPERATOR_BLEFT, iGT , @ExprBinOp);
	RegisterOperator(">="   , PRIO_COMP , OPERATOR_BLEFT, iGE , @ExprBinOp);

	RegisterOperator("+"    , PRIO_ADD  , OPERATOR_BLEFT, iADD, @ExprBinOp);
	RegisterOperator("-"    , PRIO_ADD  , OPERATOR_BLEFT, iSUB, @ExprBinOp);

	RegisterOperator("*"    , PRIO_MUL  , OPERATOR_BLEFT, iMUL, @ExprBinOp);
	RegisterOperator("/"    , PRIO_MUL  , OPERATOR_BLEFT, iDIV, @ExprBinOp);
	RegisterOperator("%"    , PRIO_MUL  , OPERATOR_BLEFT, iMOD, @ExprBinOp);

	RegisterOperator("-"    , PRIO_NEG  , OPERATOR_UPRE , iNEG, @ExprNEG);
	RegisterOperator("!"    , PRIO_NEG  , OPERATOR_UPRE , iNOT, @ExprNOT);

	RegisterOperator("("    , PRIO_EXPR , OPERATOR_UPRE , 0   , @ExprParentheses);
	RegisterOperator("(*"   , PRIO_EXPR , OPERATOR_UPRE , 0   , @ExprParentheses);
	RegisterOperator("(%"   , PRIO_EXPR , OPERATOR_UPRE , 0   , @ExprParentheses);

	RegisterOperator("as_signed", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprAsSigned);
	RegisterOperator("as_unsigned", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprAsUnsigned);

	RegisterOperator("type_expr", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprTypeExpr);
	RegisterOperator("const_expr", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprConstExpr);
	RegisterOperator("static_expr", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprStaticExpr);
	RegisterOperator("tangible_expr", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprTangibleExpr);

	RegisterOperator("is_type_expr", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprIsTypeExpr);
	RegisterOperator("is_const_expr", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprIsConstExpr);
	RegisterOperator("is_static_expr", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprIsStaticExpr);
	RegisterOperator("is_tangible_expr", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprIsTangibleExpr);

	RegisterOperator("typeof", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprTypeOf);
	RegisterOperator("sizeof", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprSizeOf);
	RegisterOperator("bitsizeof", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprBitsizeOf);
	RegisterOperator("countof", PRIO_FUNCCALL , OPERATOR_UPRE , 0, @ExprCountOf);

	RegisterOperator("'"    , PRIO_LITER, OPERATOR_UPRE , iLITERAL, @ExprLitChar);
	RegisterOperator("#"    , PRIO_LITER, OPERATOR_UPRE , iLITERAL, @ExprLitChar);
	RegisterOperator("NULL" , PRIO_LITER, OPERATOR_UPRE , iNULL,    @ExprLitNULL);
	RegisterOperator("null" , PRIO_LITER, OPERATOR_UPRE , iNULL,    @ExprLitNULL);
	RegisterOperator("false", PRIO_LITER, OPERATOR_UPRE , iLITERAL, @ExprLitFALSE);
	RegisterOperator("true" , PRIO_LITER, OPERATOR_UPRE , iLITERAL, @ExprLitTRUE);
end

/*****************************************************************************/

void RegisterBrackets()
	RegisterBracket(BracketType_Parentheses, "(", ")");
	RegisterBracket(BracketType_Parentheses, "(*", "*)");
	RegisterBracket(BracketType_Parentheses, "(%", "%)");
end

/*****************************************************************************/

void InitExpressionParser()
	InitNumberParser();
	RegisterBrackets();
	RegisterOperators();
end

/*****************************************************************************/

end:ExpressionParser;

alias val = ExpressionParser.val;
alias ReadPtrs = ExpressionParser.ReadPtrs;
alias EnsureValidIdentifier = ExpressionParser.EnsureValidIdentifier;
alias ExprInParentheses = ExpressionParser.ExprInParentheses;
alias Tabl_ = ExpressionParser.Tabl_;
alias FuncArgs = ExpressionParser.FuncArgs;
alias InitExpressionParser = ExpressionParser.InitExpressionParser;
alias ReadTypeSuffix = ExpressionParser.ReadTypeSuffix;
alias Expr = ExpressionParser.Expr;
