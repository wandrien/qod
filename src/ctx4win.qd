
include "sys4win.qdi";
include "messages_cp866.qdi";
include "ctx4all.qdi";

ARGS __args;
bool __args_parsed = false;

define nCMDLINEBUFF 1024
char CmdLineBuff[nCMDLINEBUFF];
word nCmdLineBuff = nCMDLINEBUFF;

define nARGV 40
ARG ArgV[nARGV];

/*
	Парсит первое слово в строке S и помещает его в буфер Buff.
	Если слово превышает размер буфера (BuffLen) или содержит незакрытую кавычку,
	завершает работу программы с сообщением об ошибке.

	Возвращает длину слова в буфере, включая #0-символ.
	В len возвращает количество обработанных символов S.
*/
word StrParseFirstWord(char@ Buff; word BuffLen; char@ S; word @len)

	word s_i = 0;
	word b_i = 0;
	word quoted = 0;

	while S[s_i] != #0 do
		char c = S[s_i];

		select
		case c == '"':
			quoted = !quoted;
		case quoted == 0 & (c == ' ' | c == '~t' | c == '~r' | c == '~n') :
			Buff[b_i] = #0;
			inc b_i;
			exit;
		default:
			Buff[b_i] = c;
			inc b_i;
		end:select

		if b_i >= BuffLen then
			StopMemory();
		end

		inc s_i;
	end:while

	if quoted != 0 then
		Stop(@L10n.eCMDLINEQUOTE);
	end:if

	len = s_i;
	return b_i;
end

void ParseCmdLine(char@ S)
	__args.argc = 0;
	@__args.argv = @ArgV;

	forever do
		when S[0] == #0:
			exit;

		@S = @S[str_skip_wspace(@S)];

		when S[0] == #0:
			exit;

		word i;
		word l = StrParseFirstWord(@CmdLineBuff[nCMDLINEBUFF - nCmdLineBuff], nCmdLineBuff, @S, @i);

		@ArgV[__args.argc].arg = @CmdLineBuff[nCMDLINEBUFF - nCmdLineBuff];
		inc __args.argc;
		if __args.argc >= nARGV then
			StopMemory();
		end:if

		nCmdLineBuff = nCmdLineBuff - l;

		@S = @S[i];
	end:forever
end

ARGS@ GetProgramArgs()
	if !__args_parsed then
		char @CmdLine = @GetCommandLine();
		ParseCmdLine(@CmdLine);
		__args_parsed = true;
	end
	return @__args;
end

void _start() of
	@fpath_p_dir_separator = "\";
	@fpath_p_dir_separators = "/\";

	word result = main();
	ExitProcess(result);
end
