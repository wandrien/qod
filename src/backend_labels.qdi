
/*****************************************************************************/

LABEL    Label [nLABEL]; // Таблица ссылок
word    nLabel = 1;

/*****************************************************************************/

word NextLabelValue = 10000;

word NewLabel()
	word l = NextLabelValue;
	inc NextLabelValue;
	return l;
end

/*****************************************************************************/

word LabelAllocate(word N; word Name)
	when nLabel >= nLABEL:
		StopMemory();
	Label[nLabel].Name = Name;
	Label[nLabel].Value = NewLabel();
	Label[nLabel].pNext = Node[N].pLabel;
	Node[N].pLabel = nLabel;
	inc nLabel;
	return Node[N].pLabel;
end

word LabelGetValue(LABEL @L)
	return L[0].Value;
end

void LabelMarkUsed(LABEL @L)
	L[0].Used = true;
end

bool LabelIsUsed(LABEL @L)
	return L[0].Used;
end

LABEL @LabelResolve(word N; word Name)
	word L = Node[N].pLabel;
	forever do
		when L >= nLabel:
			StopAtNodeInternalCodegen(__FILE__, __LINE__, N);
		when L == 0:
			return @Label[LabelAllocate(N, Name)];
		when Label[L].Name == Name:
			return @Label[L];
		L = Label[L].pNext;
	end:forever
end

/*****************************************************************************/

void DictMarkUsed(word D)
	when D >= nDICT:
		return;

	when Dict[D].Used:
		return;

	Dict[D].Used = true;
	DictMarkUsed(Dict[D].pType);
	NodeMarkUsed(Dict[D].pNode);
end

void NodeMarkUsed(word P)
	when P >= nNODE:
		return;

	when Node[P].Used:
		return;

	Node[P].Used = true;
	DictMarkUsed(Node[P].pType);

	switch Node[P].ID of
	case iCALL, iFUNC, iDATA, iSTRING:
		DictMarkUsed(NodeGetDict(P));
	end:switch

	NodeMarkUsed(Node[P].pLeft );
	NodeMarkUsed(Node[P].pRight);
end

void DoWarnUnusedGlobals()
	char Buff[1024];
	word  P = 0;
	while P < nDict do
		if !Dict[P].Used then
			select
			case Dict[P].Class == CLASS.cDATA:
				strcpy(@Buff, @DictGetName(P));
				strcat(@Buff, @L10n.wGLOBALVARUNUSED);
				Warn(@Buff);
			case Dict[P].Class == CLASS.cFUNC:
				strcpy(@Buff, @DictGetName(P));
				strcat(@Buff, @L10n.wFUNCUNUSED);
				Warn(@Buff);
			case Dict[P].Class == CLASS.cTYPE & Dict[P].Sub <= SUBCLASS.sBASE_MAX:
				strcpy(@Buff, @DictGetName(P));
				strcat(@Buff, @L10n.wTYPEUNUSED);
				Warn(@Buff);
			end:select
		end:if
		inc P;
	end
end

/*****************************************************************************/


// Pасстановка меток

word     Enum(word P; word Flag)
  if P>=nNODE then
    return 0;
  end

  select
    case Flag!=0:
      word  S=0;
      word  M=0;
      while P<nNODE do
        select
          case Node[P].ID==iSELECT:
            LabelAllocate(P, JmpLbl.lEXIT);
            word  CASE = Node[P].pLeft;
            while CASE < nNODE do
                when Node[CASE].ID != iCASE:
                    StopInternal(__FILE__, __LINE__);

                LabelAllocate(CASE, JmpLbl.lCASEBODY);
                LabelAllocate(CASE, JmpLbl.lCASEBODYEND);

                word COND = Node[CASE].pLeft;
                word BODY = Node[COND].pRight;

                when Node[BODY].ID != iBODY
                |    Node[COND].ID != iCOND:
                    StopInternal(__FILE__, __LINE__);

                Enum(Node[COND].pLeft,0);

                word V=Enum(Node[BODY].pLeft,1);
                if M<S+V then
                  M=S+V;
                end

                CASE = Node[CASE].pRight;
            end

          case Node[P].ID==iSWITCH :

			LabelAllocate(P, JmpLbl.lEXIT);

			word COND = Node[P].pLeft;
			when Node[COND].ID != iCOND:
				StopInternal(__FILE__, __LINE__);

			Enum(Node[COND].pLeft,0);

			word  CASE_I = Node[COND].pRight;
			while CASE_I < nNODE do
				when Node[CASE_I].ID != iCASE:
					StopInternal(__FILE__, __LINE__);

				LabelAllocate(CASE_I, JmpLbl.lCASEBODY);

				word  VALUE_I = Node[CASE_I].pLeft;
				while VALUE_I < nNode do
					when Node[VALUE_I].ID != iVALUE
					&    Node[VALUE_I].ID != iDEFAULT
					&    Node[VALUE_I].ID != iBODY:
						StopInternal(__FILE__, __LINE__);
					if Node[VALUE_I].ID == iBODY then
						word V=Enum(Node[VALUE_I].pLeft,1);
						if M<S+V then
							M=S+V;
						end
					end
					VALUE_I = Node[VALUE_I].pRight;
				end:while

				CASE_I = Node[CASE_I].pRight;
			end:while

          case Node[P].ID==iWHILE | Node[P].ID==iREPEAT:
            word BODY = Node[P].pLeft;
            word COND = Node[BODY].pRight;
            when Node[BODY].ID != iBODY
            |    Node[COND].ID != iCOND:
                StopInternal(__FILE__, __LINE__);

            LabelAllocate(P, JmpLbl.lLOOPBODY);
            LabelAllocate(P, JmpLbl.lCONTINUE);
            LabelAllocate(P, JmpLbl.lEXIT);

            Enum(Node[COND].pLeft,0);

            word V=Enum(Node[BODY].pLeft,1);
            if M<S+V then
              M=S+V;
            end

          case Node[P].ID==iDEF_LOCAL:
			word Size = SizeOfType(Node[P].pType);
			S=S+DefaultInStackAlign(Size);

            if M<S then
              M=S;
            end
        end

        P=Node[P].pRight;
      end

      return M;

    case Node[P].ID!=iASSIGN & Node[P].ID!=iINC & Node[P].ID!=iDEC:
      Enum(Node[P].pLeft, 0);

      if Node[P].ID == iOR | Node[P].ID == iAND then
        LabelAllocate(P, JmpLbl.lBRANCH);
      end

      Enum(Node[P].pRight,0);
  end

  return 0;
end


/*****************************************************************************/


word AssignLabels_Data()
	word D = 0;
	word I = 0;
	while I < nDict do
		select
		case Dict[I].Class == CLASS.cDATA & Dict[I].Used:
			Dict[I].Label = D;
			word Size = SizeOfType(Dict[I].pType);
			D = D + DefaultStaticAlign(Size);
		end:select
		inc I;
	end
	return D;
end


/*****************************************************************************/


void AssignLabels_Func()
	word I=0;
	while I<nDict do
		if Dict[I].Class == CLASS.cFUNC & Dict[I].Sub != SUBCLASS.sSYS & Dict[I].Used then
			Dict[I].Label = NewLabel();
			Dict[I].StackSize = Enum(Dict[I].pNode,1);
			when Dict[I].Forward != 0:
				ErrorAtNodeWithSubject(
					Dict[I].pNode,
					@L10n.eNEVERDEFINED, @DictGetFullyQualifiedName(I)
				);
		end
		inc I;
	end
end


void AssignLabels_FuncExternal()
	word I=0;
	while I<nDict do
		if Dict[I].Class == CLASS.cLIB then
			word  J=0;
			while J<nDict do
				if Dict[J].Class == CLASS.cFUNC
				&  Dict[J].Sub == SUBCLASS.sSYS
				&  Dict[J].pNode == I
				&  Dict[J].Used then
					word Label = NewLabel();
					if !Dict[I].Used then
						Dict[I].Label = Label;
						Dict[I].Used = true;
					end:if
					Dict[J].Label = Label;
				end:if
				inc J;
			end:while
		end:if
		inc I;
	end:while
end
