
/*****************************************************************************/

void AddFakeCast(word pType1; word @P)

	word P1 = Peek();
	Node[P1].ID    = iFAKE_CAST;
	Node[P1].pType = pType1;
	Node[P1].pLeft = P;

	P = P1;
end

/*****************************************************************************/

void AddReinterpretCast(word pTypeCastTo; word @P)
	word P1 = Peek();
	Node[P1].ID    = iREINTERPRET_CAST;
	Node[P1].pType = pTypeCastTo;
	Node[P1].pLeft = P;

	P = P1;

	CTE(P);
end

/*****************************************************************************/

void AddCast(word pTypeCastTo; word @P)

	/* FIXME: Эта ветка должна быть частью подсистемы CTE. */
	if pTypeCastTo == st_int & Node[P].ID == iLITERAL & Node[P].pType == st_word then
		Node[P].pType = pTypeCastTo;
		return;
	end

	word P1 = Peek();
	Node[P1].ID    = iCAST;
	Node[P1].pType = pTypeCastTo;
	Node[P1].pLeft = P;

	P = P1;

	CTE(P);
end

/*****************************************************************************/

void AddImplicitCast(word pTypeTo; word @P)
	when Node[P].pType != pTypeTo:
		AddCast(pTypeTo, @P);
end

/*****************************************************************************/

bool IsLiteralAutoCastPossible(word pTypeTo; word P)
	when Node[P].ID != iLITERAL:
		return false;

	word pTypeFrom = Node[P].pType;
	when !T_IsInteger(pTypeFrom) | !T_IsInteger(pTypeTo):
		return false;

	word Min = 0;
	word Max = 0;

	if T_GetMinMaxOf(pTypeTo, @Min, @Max) == MinMaxIsUnsigned then
		word Value = Node[P].Value;
		when T_IsSigned(pTypeFrom) & (int(Value) < 0):
			return false;
		when Value <= Max:
			return true;
		return false;
	else
		word Value = Node[P].Value;
		when T_IsUnsigned(pTypeFrom) & (Value > Max):
			return false;
		when (as_signed(Min) <= as_signed(Value)) & (as_signed(Value) <= as_signed(Max)):
			return true;
		return false;
	end:if
end

/*****************************************************************************/

bool IsImplicitCastPossible(word pTypeFrom; word pTypeTo)

	select
	case T_Equal(pTypeFrom, pTypeTo):
		return true;
	case T_IsPtr(pTypeFrom) & T_IsPtr(pTypeTo):
		when pTypeFrom == T_PtrTo(st_void):
			return true;
		when pTypeTo == T_PtrTo(st_void):
			return true;
		word pTypeDerefFrom = T_DerefPtr(pTypeFrom);
		word pTypeDerefTo = T_DerefPtr(pTypeTo);
		when T_IsFuctTypesIdentical(pTypeDerefFrom, pTypeDerefTo):
			return true;
	case T_IsInteger(pTypeFrom) & T_IsInteger(pTypeTo):
		if T_IsSigned(pTypeFrom) == T_IsSigned(pTypeTo) then
			when T_SizeOf(pTypeFrom) <= T_SizeOf(pTypeTo):
				return true;
		end:if

		/* HACK: temporary rules to make self-compilation possible */
		when pTypeFrom == st_int & pTypeTo == st_word:
			return true;
		/* END HACK */
	end:select

	return false;
end

/*****************************************************************************/

void ImplicitCast(word pTypeTo; word @P)
	if
		!IsImplicitCastPossible(Node[P].pType, pTypeTo) &
		!IsLiteralAutoCastPossible(pTypeTo, P)
	then
		char Buff[nBUFF];
		strcpy4(@Buff,
			@msgIMPLICITCAST_1,
			@T_GetName(Node[P].pType),
			@msgIMPLICITCAST_2,
			@T_GetName(pTypeTo)
		);
		ErrorWithSubject(@eTYPE, @Buff);
		AddFakeCast(pTypeTo, @P);
	else
		AddImplicitCast(pTypeTo, @P);
	end:if
end

/*****************************************************************************/

bool IsExplicitCastPossible(word From; word To)
	when IsImplicitCastPossible(From, To):
		return true;

	when T_IsInteger(From) & T_IsInteger(To):
		return true;

	when T_IsInteger(From) & (To == st_char):
		return true;

	when (From == st_char) & T_IsInteger(To):
		return true;

	when T_IsPtr(From) & (To == st_intptr | To == st_uintptr):
		return true;

	return false;
end
