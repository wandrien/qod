
/*****************************************************************************/

void AddFakeCast(word pType1; word @P)

	word P1 = Peek();
	Node[P1].ID    = iFAKE_CAST;
	Node[P1].pType = pType1;
	Node[P1].pLeft = P;

	P = P1;
end

/*****************************************************************************/

void AddReinterpretCast(word pTypeCastTo; word @P)
	word P1 = Peek();
	Node[P1].ID    = iREINTERPRET_CAST;
	Node[P1].pType = pTypeCastTo;
	Node[P1].pLeft = P;

	P = P1;

	CTE(P);
end

/*****************************************************************************/

void AddCast(word pTypeCastTo; word @P)

	/* FIXME: Эта ветка должна быть частью подсистемы CTE. */
	if pTypeCastTo == st_int & Node[P].ID == iLITERAL & Node[P].pType == st_word then
		Node[P].pType = pTypeCastTo;
		return;
	end

	word P1 = Peek();
	Node[P1].ID    = iCAST;
	Node[P1].pType = pTypeCastTo;
	Node[P1].pLeft = P;

	P = P1;

	CTE(P);
end

/*****************************************************************************/

void AddImplicitCast(word pTypeTo; word @P)
	when Node[P].pType != pTypeTo:
		AddCast(pTypeTo, @P);
end

/*****************************************************************************/

bool IsLiteralAutoCastPossible(word pTypeTo; word P)
	when Node[P].ID != iLITERAL:
		return false;

	word pTypeFrom = Node[P].pType;
	when !T_IsInteger(pTypeFrom) | !T_IsInteger(pTypeTo):
		return false;

	word Min = 0;
	word Max = 0;

	if T_GetMinMaxOf(pTypeTo, @Min, @Max) == MinMaxIsUnsigned then
		word Value = Node[P].Value;
		when T_IsSigned(pTypeFrom) & (int(Value) < 0):
			return false;
		when Value <= Max:
			return true;
		return false;
	else
		word Value = Node[P].Value;
		when T_IsUnsigned(pTypeFrom) & (Value > Max):
			return false;
		when (as_signed(Min) <= as_signed(Value)) & (as_signed(Value) <= as_signed(Max)):
			return true;
		return false;
	end:if
end

/*****************************************************************************/

bool SkipImplicitCast(word pTypeFrom; word pTypeTo)
	when T_IsNulltype(pTypeFrom) & (T_IsPtr(pTypeTo) | T_IsNulltype(pTypeTo)):
		return true;
	return false;
end

/*****************************************************************************/

bool IsImplicitCastPossible(word pTypeFrom; word pTypeTo)

	select
	case T_Equal(pTypeFrom, pTypeTo):
		return true;
	case T_IsPtr(pTypeFrom) & T_IsPtr(pTypeTo):
		when pTypeFrom == T_PtrTo(st_void):
			return true;
		when pTypeTo == T_PtrTo(st_void):
			return true;
		word pTypeDerefFrom = T_DerefPtr(pTypeFrom);
		word pTypeDerefTo = T_DerefPtr(pTypeTo);
		when T_IsFuctTypesIdentical(pTypeDerefFrom, pTypeDerefTo):
			return true;
	case T_IsInteger(pTypeFrom) & T_IsInteger(pTypeTo):
		if T_IsSigned(pTypeFrom) == T_IsSigned(pTypeTo) then
			when T_SizeOf(pTypeFrom) <= T_SizeOf(pTypeTo):
				return true;
		end:if

		/* HACK: temporary rules to make self-compilation possible */
		when pTypeFrom == st_int & pTypeTo == st_word:
			return true;
		/* END HACK */
	end:select

	return false;
end

/*****************************************************************************/

void ImplicitCast(word pTypeTo; word @P)
	select
	case SkipImplicitCast(Node[P].pType, pTypeTo):
		pass;
	case
		!IsImplicitCastPossible(Node[P].pType, pTypeTo) &
		!IsLiteralAutoCastPossible(pTypeTo, P)
	:
		char Buff[nBUFF];
		strcpy4(@Buff,
			@L10n.msgIMPLICITCAST_1,
			@T_GetName(Node[P].pType),
			@L10n.msgIMPLICITCAST_2,
			@T_GetName(pTypeTo)
		);
		ErrorWithSubject(@L10n.eTYPE, @Buff);
		AddFakeCast(pTypeTo, @P);
	default:
		AddImplicitCast(pTypeTo, @P);
	end:select
end

/*****************************************************************************/

bool IsExplicitCastPossible(word From; word To)
	when IsImplicitCastPossible(From, To):
		return true;

	when T_IsInteger(From) & T_IsIntegerlike(To):
		return true;

	when T_IsIntegerlike(From) & T_IsInteger(To):
		return true;

	when T_IsPtr(From) & (To == st_intptr | To == st_uintptr):
		return true;

	return false;
end

/*****************************************************************************/

word IntegerPromotion(word pType)
	when T_SizeOf(pType) < T_SizeOf(st_int):
			return st_int;
	return pType;
end

void ApplyCommonType(word P_OP; word pType)
	AddImplicitCast(pType, @Node[P_OP].pLeft);
	AddImplicitCast(pType, @Node[P_OP].pRight);
	Node[P_OP].pType = pType;
end

void ApplyUACCastsForIntegers(word P_OP; word O)

	/* Usual arithmetic conversions */

	word P1 = Node[P_OP].pLeft;
	word P2 = Node[P_OP].pRight;

	word pType1 = Node[P1].pType;
	word pType2 = Node[P2].pType;

	/* Skip for non-integers. */
	when T_IsInteger(pType1) == false | T_IsInteger(pType2) == false:
		return;

	bool do_integer_promotion = false; /* TODO: disabled now; should be configurable with a pragma */
	bool allow_implicit_cast_uint_to_int = true; /* TODO: should be configurable with a pragma */

	if do_integer_promotion then
		pType1 = IntegerPromotion(pType1);
		pType2 = IntegerPromotion(pType2);
		AddImplicitCast(pType1, @Node[P_OP].pLeft);
		AddImplicitCast(pType2, @Node[P_OP].pRight);
		P1 = Node[P_OP].pLeft;
		P2 = Node[P_OP].pRight;
	end:if

	/* Эквивалентные типы. */
	if T_Equal(pType1, pType2) then
		ApplyCommonType(P_OP, pType1);
		return;
	end:if

	bool P1_IsLiteralAutocastPossible = IsLiteralAutoCastPossible(pType2, P1);
	bool P2_IsLiteralAutocastPossible = IsLiteralAutoCastPossible(pType1, P2);
	if P1_IsLiteralAutocastPossible & !P2_IsLiteralAutocastPossible then
		AddImplicitCast(pType2, @Node[P_OP].pLeft);
		return;
	end
	if P2_IsLiteralAutocastPossible & !P1_IsLiteralAutocastPossible then
		AddImplicitCast(pType1, @Node[P_OP].pRight);
		return;
	end

	/* signed + signed OR unsigned + unsigned */
	if T_IsSigned(pType1) == T_IsSigned(pType2) then
		word rank1 = T_SizeOf(pType1);
		word rank2 = T_SizeOf(pType2);
		word pTargetType;
		if rank1 > rank2 then
			pTargetType = pType1;
		else
			pTargetType = pType2;
		end
		ApplyCommonType(P_OP, pTargetType);
		return;
	end:if

	/* signed + unsigned */

	word pTypeSigned;
	word pTypeUnsigned;

	select
	case T_IsSigned(pType1) & T_IsUnsigned(pType2):
		pTypeSigned = pType1;
		pTypeUnsigned = pType2;
	case T_IsSigned(pType2) & T_IsUnsigned(pType1):
		pTypeSigned = pType2;
		pTypeUnsigned = pType1;
	default:
		StopInternal(__FILE__, __LINE__);
	end:select

	word rankSigned = T_SizeOf(pTypeSigned);
	word rankUnsigned = T_SizeOf(pTypeUnsigned);

	if rankSigned > rankUnsigned then
		word pTargetType = pTypeSigned;
		ApplyCommonType(P_OP, pTypeSigned);
		return;
	end:if

	if rankSigned == rankUnsigned then
		if allow_implicit_cast_uint_to_int then
			Warn(@L10n.wTYPE_SIGNED_UNSIGNED);
		else
			Error(@L10n.wTYPE_SIGNED_UNSIGNED);
		end:if
		word pTargetType = pTypeSigned;
		ApplyCommonType(P_OP, pTypeSigned);
		return;
	end:if

end

void Cast2(word P_OP; word O)

	ApplyUACCastsForIntegers(P_OP, O);

	word ID = Node[P_OP].ID;

	word P1 = Node[P_OP].pLeft;
	word P2 = Node[P_OP].pRight;

	word pType1 = Node[P1].pType;
	word pType2 = Node[P2].pType;

	word pTypeOp = pType1;

	/**************************************************************************/

	/* Допустимые сочетания операндов: */
	select

	/* Оба типа - указатели. */
	case T_IsPtr(pType1) & T_IsPtr(pType2):
		pass;

	/* Указатель и null */
	case T_IsPtr(pType1) & T_IsNulltype(pType2):
		pass;
	case T_IsPtr(pType2) & T_IsNulltype(pType1):
		pass;

	/* С обеих сторон - один и тот же тип... */
	case T_Equal(pType1, pType2):
		select
		case T_IsInteger(pType1):
			pass;
		case T_IsChar(pType1):
			pass;
		case T_IsBool(pType1):
			pass;
		case T_IsType(pType1):
			pass;
		case T_IsNulltype(pType1):
			pass;
		default:
			StopAtNode(P_OP, @L10n.eTYPE);
		end:select

	default:
		AddFakeCast(pType1, @Node[P_OP].pRight);
		ErrorAtNode(P_OP, @L10n.eTYPE);
	end:select

	/**************************************************************************/

	select
	case ID == iOR: /* операция ИЛИ возможна либо между беззнаковыми целыми, либо между булевыми значениями. */
		select
		case T_IsUnsigned(pTypeOp):
			Node[P_OP].ID=iBIT_OR;
		case pTypeOp == st_bool:
			pass;
		case T_IsSigned(pTypeOp):
			ErrorAtNode(P_OP, @L10n.eTYPE_SIGNED_BIT_OP);
		default:
			ErrorAtNode(P_OP, @L10n.eTYPE_LOGIC_OP);
		end

		CTE(P_OP);

	case ID == iXOR: /* Аналогично предыдущему. */
		select
		case T_IsUnsigned(pTypeOp):
			Node[P_OP].ID=iBIT_XOR;
		case pTypeOp == st_bool:
			Stop(@L10n.eXORNOTIMPL);
		case T_IsSigned(pTypeOp):
			ErrorAtNode(P_OP, @L10n.eTYPE_SIGNED_BIT_OP);
		default:
			ErrorAtNode(P_OP, @L10n.eTYPE_LOGIC_OP);
		end

		CTE(P_OP);

	case ID == iAND: /* Аналогично предыдущему. */
		select
		case T_IsUnsigned(pTypeOp):
			Node[P_OP].ID=iBIT_AND;
		case pTypeOp == st_bool:
			pass;
		case T_IsSigned(pTypeOp):
			ErrorAtNode(P_OP, @L10n.eTYPE_SIGNED_BIT_OP);
		default:
			ErrorAtNode(P_OP, @L10n.eTYPE_LOGIC_OP);
		end

		CTE(P_OP);

	case iLT<=ID & ID<=iGT:
		if ID == iEQ | ID == iNE then
			/* Сравнение равенство/неравенство... */
			/* ...возможно только между целыми, булевыми, символами, указателями, типами. */
			if
				!T_IsInteger(pTypeOp) &
				!T_IsChar(pTypeOp) &
				!T_IsBool(pTypeOp) &
				!T_IsPtr(pTypeOp) &
				!T_IsNulltype(pTypeOp) &
				!T_IsType(pTypeOp)
			then
				ErrorAtNode(P_OP, @L10n.eTYPE_COMP_OP);
			end
		else
			/* Сравнение больше/меньше */
			/* ...возможно только между целыми, символами. */
			if
				!T_IsInteger(pTypeOp) &
				!T_IsChar(pTypeOp)
			then
				ErrorAtNode(P_OP, @L10n.eTYPE_COMP_OP);
			end
		end:if
		pTypeOp = st_bool;

		CTE(P_OP);

	case iADD<=ID & ID<=iMOD:
		/* Арифметические операции только с целыми. */
		if !T_IsInteger(pTypeOp) then
			ErrorAtNode(P_OP, @L10n.eTYPE_ARITH_OP);
		end
		CTE(P_OP);

	default:
		StopInternal(__FILE__, __LINE__);
	end:select

	Node[P_OP].pType = pTypeOp;

end

/*****************************************************************************/
