
/*
	Compile-Time Evaluations
*/

/* TODO: Вычислять в отдельном проходе по дереву. */

/*****************************************************************************/

bool function ExprGuard(word P)

bool IsTypeExpr(word P)
	return Node[P].ID == iTYPE;
end

bool IsConstExpr(word P)
	return NodeHasImmediateValue(P);
end

bool IsStaticExpr(word P)
	return IsTypeExpr(P) | IsConstExpr(P);
end

bool IsTangibleExpr(word P)
	return Node[P].ID != iTYPE;
end

/*****************************************************************************/

word MakeBitMaskFromSize(word Size)
	switch Size of
	case 1: return 0xFF;
	case 2: return 0xFFFF;
	case 4: return 0xFFFF_FFFF;
	default:
		StopInternal(__FILE__, __LINE__);
	end:switch
end

word MakeSignMaskFromSize(word Size)
	switch Size of
	case 1: return 0x80;
	case 2: return 0x8000;
	case 4: return 0x8000_0000;
	default:
		StopInternal(__FILE__, __LINE__);
	end:switch
end

word MakeSignExtension(word Value; word Size)
	word SignMask = MakeSignMaskFromSize(Size);
	word BitMask = MakeBitMaskFromSize(Size);
	word SigExt = 0;
	when (Value & SignMask) != 0:
		SigExt = -1;
	return (SigExt & (!BitMask)) | (Value & BitMask);
end

word word_min2(word a1; word a2)
	when a1 < a2:
		return a1;
	return a2;
end

void CTE_Cast(word P)
	word pLeft = Node[P].pLeft;

	when Node[P].ID != iCAST:
		return;

	when Node[pLeft].ID != iLITERAL:
		return;

	word TypeTo   = Node[P].pType;
	word TypeFrom = Node[pLeft].pType;
	word Value    = Node[pLeft].Value;

	word TypeTo_Real   = TypeTo;
	word TypeFrom_Real = TypeFrom;

	/*
		Для анализа типов подменяем char на byte
		При преобразовании char к целому - подменяем исходный тип char на byte перед преобразованием.
	*/
	if T_IsInteger(TypeTo) & TypeFrom == st_char then
		TypeFrom = st_byte;
	end:if
	if T_IsInteger(TypeFrom) & TypeTo == st_char then
		TypeTo = st_byte;
	end:if

	/* Идентичные типы - просто копируем литерал. */
	if T_Equal(TypeTo, TypeFrom) then
		NodeAssignLiteral(P, TypeTo_Real, Value);
		return;
	end:if

	/*
		Преобразование unsigned в unsigned.
		Отбрасываем верхние биты.
	*/
	if T_IsUnsigned(TypeFrom) & T_IsUnsigned(TypeTo) then
		word MinSize = word_min2(T_SizeOf(TypeTo), T_SizeOf(TypeFrom));
		Value = Value & MakeBitMaskFromSize(MinSize);
		NodeAssignLiteral(P, TypeTo_Real, Value);
		return;
	end:if

	/*
		Преобразование signed в unsigned.
		Отбрасываем верхние биты.
	*/
	if T_IsSigned(TypeFrom) & T_IsUnsigned(TypeTo) then
		Value = Value & MakeBitMaskFromSize(T_SizeOf(TypeTo));
		NodeAssignLiteral(P, TypeTo_Real, Value);
		return;
	end:if

	/*
		Преобразование unsigned в signed.
		Отбрасываем верхние биты, затем делаем расширение по знаку.
	*/
	if T_IsUnsigned(TypeFrom) & T_IsSigned(TypeTo) then
		word Size = T_SizeOf(TypeTo);
		Value = Value & MakeBitMaskFromSize(Size);
		Value = MakeSignExtension(Value, Size);
		NodeAssignLiteral(P, TypeTo_Real, Value);
		return;
	end:if

	/*
		Преобразование signed в signed.
	*/
	if T_IsSigned(TypeFrom) & T_IsSigned(TypeTo) then
		/*
			При преобразовании в более длинный тип можно оставить значение как есть,
			так как signed число и так хранится с расширением по знаку на все старшие биты.

			При преобразовании в более короткий тип:
			* Либо результат укладывается в диапазон целевого типа, и тогда можно
			использовать значение как есть.
			* Либо результат не укладывается в диапазон целевого типа, и тогда результат
			неопределён. Для этого случае мы просто делаем расширение по знаку для
			целевого типа, чтобы численно результут укладывался в диапазон целевого типа.
		*/
		Value = MakeSignExtension(Value, T_SizeOf(TypeTo));
		NodeAssignLiteral(P, TypeTo_Real, Value);
		return;
	end:if

end

void CTE(word P)
	CTE_Cast(P);

	word ID = Node[P].ID;
	word pLeft = Node[P].pLeft;
	word pRight = Node[P].pRight;

	switch ID of
	case iOR:
		select
		case NodeIsTrue(pLeft):
			NodeAssignBool(P, true);
		case NodeIsFalse(pLeft) & NodeIsFalse(pRight):
			NodeAssignBool(P, false);
		end
		return;
	case iAND:
		select
		case NodeIsFalse(pLeft):
			NodeAssignBool(P, false);
		case NodeIsTrue(pLeft) & NodeIsTrue(pRight):
			NodeAssignBool(P, true);
		end
		return;
	end

	if Node[pLeft].ID == iTYPE & Node[pRight].ID == iTYPE then
		switch ID of
		case iEQ:
			NodeAssignBool(P, T_Equal(Node[pLeft].Value, Node[pRight].Value));
			return;
		case iNE:
			NodeAssignBool(P, !T_Equal(Node[pLeft].Value, Node[pRight].Value));
			return;
		end
	end

	if ID == iDIV | ID == iMOD then
		if NodeHasImmediateValue(pRight) then
			if NodeGetImmediateValue(pRight) == 0 then
				Error(@eDIVZERO);
				AddFakeCast(Node[pRight].pType, @Node[P].pRight);
				pRight = Node[P].pRight;
			end
		end
	end

	when Node[pLeft].ID != iLITERAL | Node[pRight].ID != iLITERAL:
		return;

	switch ID of
	case iADD:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 + v2);
		case Node[pLeft].pType == st_int:
			int v1 = as_signed(Node[pLeft].Value);
			int v2 = as_signed(Node[pRight].Value);
			NodeAssignInt(P, v1 + v2);
		end:select
	case iSUB:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 - v2);
		case Node[pLeft].pType == st_int:
			int v1 = as_signed(Node[pLeft].Value);
			int v2 = as_signed(Node[pRight].Value);
			NodeAssignInt(P, v1 - v2);
		end:select
	case iMUL:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 * v2);
		case Node[pLeft].pType == st_int:
			int v1 = as_signed(Node[pLeft].Value);
			int v2 = as_signed(Node[pRight].Value);
			NodeAssignInt(P, v1 * v2);
		end:select
	case iDIV:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 / v2);
		case Node[pLeft].pType == st_int:
			int v1 = as_signed(Node[pLeft].Value);
			int v2 = as_signed(Node[pRight].Value);
			NodeAssignInt(P, v1 / v2);
		end:select
	case iMOD:
		select
		case Node[pLeft].pType == st_word:
			word v1 = Node[pLeft].Value;
			word v2 = Node[pRight].Value;
			NodeAssignWord(P, v1 % v2);
		end:select
	case iEQ:
		NodeAssignBool(P, NodeEqual(pLeft, pRight));
	case iNE:
		NodeAssignBool(P, !NodeEqual(pLeft, pRight));
	end:switch
end

/*****************************************************************************/

bool CTE_CodeListDoesNotReturn(word P)
	while P != nNODE do
		if Node[P].pType == st_noreturn then
			return true;
		end:if
		P = Node[P].pRight;
	end:do
	return false;
end

/*****************************************************************************/

bool CTE_LoopHasExits(word pLoop, P)
	while P != nNODE do
		when Node[P].ID == iEXIT & Node[P].Value == pLoop:
			return true;
		when CTE_LoopHasExits(pLoop, Node[P].pLeft):
			return true;
		P = Node[P].pRight;
	end:do
	return false;
end

/*****************************************************************************/

bool CTE_LoopHasContinues(word pLoop, P)
	while P != nNODE do
		when Node[P].ID == iCONTINUE & Node[P].Value == pLoop:
			return true;
		when CTE_LoopHasContinues(pLoop, Node[P].pLeft):
			return true;
		P = Node[P].pRight;
	end:do
	return false;
end

/*****************************************************************************/

void CTE_WHILE(word @pLoop)
	word BODY = Node[pLoop].pLeft;
	word COND = Node[BODY].pRight;

	Node[pLoop].pType = st_void;

	if NodeIsFalse(Node[COND].pLeft) then
		Node[pLoop].ID = iEMPTY;
		NodeFree(@Node[pLoop].pLeft);
		return;
	end

	if NodeIsTrue(Node[COND].pLeft) then
		NodeFree(@Node[COND].pLeft);
	end

	if
		(Node[COND].pLeft == nNODE | CTE_CodeListDoesNotReturn(Node[BODY].pLeft)) &
		(!CTE_LoopHasExits(pLoop, Node[BODY].pLeft))
	then
		Node[pLoop].pType = st_noreturn;
	end:if
end

void CTE_REPEAT(word @pLoop)
	word BODY = Node[pLoop].pLeft;
	word COND = Node[BODY].pRight;
	word pBody = Node[BODY].pLeft;

	Node[pLoop].pType = st_void;

	if
		(NodeIsFalse(Node[COND].pLeft) | CTE_CodeListDoesNotReturn(Node[BODY].pLeft)) &
		(!CTE_LoopHasExits(pLoop, Node[BODY].pLeft))
	then
		Node[pLoop].pType = st_noreturn;
	end:if
end

/*****************************************************************************/

void CTE_SELECT(word P)

	/*
	                 iSELECT
	                /       \
	              iCASE      [next statement]
	             /     \
	            iCOND   [next case]
	           /     \
	[condition]     iBODY
	               /    \
	         [body]     NULL
	*/

	word pTypeFinal = st_noreturn;
	bool DefaultBranchPresent = false;
	word CASE = Node[P].pLeft;
	while CASE < nNODE do
		when Node[CASE].ID != iCASE:
			StopInternal(__FILE__, __LINE__);

		word COND = Node[CASE].pLeft;
		word BODY = Node[COND].pRight;

		when Node[BODY].ID != iBODY
		|    Node[COND].ID != iCOND:
			StopInternal(__FILE__, __LINE__);

		if Node[COND].pLeft == nNODE then
			DefaultBranchPresent = true;
		end

		if !CTE_CodeListDoesNotReturn(Node[BODY].pLeft) then
			pTypeFinal = st_void;
		end

		CASE = Node[CASE].pRight;
	end:while

	when !DefaultBranchPresent:
		pTypeFinal = st_void;

	Node[P].pType = pTypeFinal;
end

/*****************************************************************************/

void CTE_SWITCH(word P)

	/*
	                 iSWITCH
	                /       \
	              iCOND      [next statement]
	             /     \
	 [expression]     iCASE
	                 /     \
	            iVALUE      [next case]
	           /      \
	    [value]       iVALUE
                    /      \
	         [value]       iBODY
	                      /     \
	                [body]       NULL


                      iCASE
	                 /     \
	          iDEFAULT      [next case]
	         /        \
	     NULL        iBODY
	                /     \
	          [body]       NULL


	*/

	word pTypeFinal = st_noreturn;
	bool DefaultBranchPresent = false;

	word COND = Node[P].pLeft;
	when Node[COND].ID != iCOND:
		StopInternal(__FILE__, __LINE__);

	word  CASE_I = Node[COND].pRight;
	while CASE_I < nNODE do
		when Node[CASE_I].ID != iCASE:
			StopInternal(__FILE__, __LINE__);

		word  VALUE_I = Node[CASE_I].pLeft;
		while VALUE_I < nNode do
			switch Node[VALUE_I].ID of
			case iVALUE:
				pass;
			case iDEFAULT:
				DefaultBranchPresent = true;
			case iBODY:
				if !CTE_CodeListDoesNotReturn(Node[VALUE_I].pLeft) then
					pTypeFinal = st_void;
				end:if
			default:
				StopInternal(__FILE__, __LINE__);
			end:switch
			VALUE_I = Node[VALUE_I].pRight;
		end:while

		CASE_I = Node[CASE_I].pRight;
	end:while

	when !DefaultBranchPresent:
		pTypeFinal = st_void;

	Node[P].pType = pTypeFinal;
end

/*****************************************************************************/

void CTE_CodeList(word P)
	while P != nNODE do
		if Node[P].pType == st_noreturn then
			if Node[P].pRight != nNODE then
				WarnAtNode(Node[P].pRight, @wUNREACHABLE);
				NodeFree(@Node[P].pRight);
			end:if
			return;
		end:if
		P = Node[P].pRight;
	end:do
end

/*****************************************************************************/

bool CTE_CodeHasReturns(word P)
	while P != nNODE do
		when Node[P].ID == iRETURN:
			return true;
		when CTE_CodeHasReturns(Node[P].pLeft):
			return true;
		P = Node[P].pRight;
	end:do
	return false;
end

/*****************************************************************************/

void CTE_Function(word dFunc)
	word pBody = Dict[dFunc].pNode;

	bool fLastReturn = false;
	bool fLastNoReturn = false;
	bool fLastInlineAssembly = false;
	bool fReturn = true;

	word P = pBody;
	while P != nNODE do
		if Node[P].ID == iINLINE then
			fLastInlineAssembly = true;
		else
			fLastInlineAssembly = false;
		end:if
		if Node[P].ID == iRETURN then
			fLastReturn = true;
			exit;
		end:if
		if Node[P].pType == st_noreturn then
			fLastNoReturn = true;
			fReturn = false;
			exit;
		end:if
		P = Node[P].pRight;
	end:do

	if !fReturn then
		fReturn = CTE_CodeHasReturns(pBody);
	end:if

	if fReturn & (Dict[dFunc].pType == st_noreturn) then
		ErrorAtNode(pBody, @eRETINNORET2);
		return;
	end:if

	if !fReturn then
		Dict[dFunc].pType = st_noreturn;
	end:if

	if
		(!fLastReturn & !fLastNoReturn & !fLastInlineAssembly) &
		(Dict[dFunc].pType != st_void & Dict[dFunc].pType != st_noreturn)
	then
		ErrorAtNodeWithSubject(pBody, @eMISSINGRET, @DictGetName(dFunc));
	end:if

end

/*****************************************************************************/
